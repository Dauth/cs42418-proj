
import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest1 {

  public static boolean debug = false;

  @Test
  public void test001() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test001"); }


    sg.edu.nus.comp.cs4218.impl.app.FmtApplication fmtApplication0 = new sg.edu.nus.comp.cs4218.impl.app.FmtApplication();
    sg.edu.nus.comp.cs4218.misc.MergeSort mergeSort2 = new sg.edu.nus.comp.cs4218.misc.MergeSort(false);
    java.lang.String str4 = mergeSort2.extractFirstNumberWordFromLine("");
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl5 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl6 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array8 = new java.lang.String[] { "" };
    java.lang.String str9 = shellImpl6.globFilesDirectories(str_array8);
    java.lang.String str10 = shellImpl5.pipeWithException(str_array8);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl11 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array13 = new java.lang.String[] { "" };
    java.lang.String str14 = shellImpl11.globFilesDirectories(str_array13);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl15 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl16 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array18 = new java.lang.String[] { "" };
    java.lang.String str19 = shellImpl16.globFilesDirectories(str_array18);
    java.lang.String str20 = shellImpl15.pipeWithException(str_array18);
    java.lang.String str21 = shellImpl11.globNoPaths(str_array18);
    java.lang.String str22 = shellImpl5.globNoPaths(str_array18);
    java.lang.String[] str_array25 = mergeSort2.mergeSort(str_array18, 0, (-29));
    java.io.InputStream inputStream26 = null;
    java.io.OutputStream outputStream28 = sg.edu.nus.comp.cs4218.impl.ShellImpl.openOutputRedir("hi!");
    sg.edu.nus.comp.cs4218.impl.app.EchoApplication echoApplication29 = new sg.edu.nus.comp.cs4218.impl.app.EchoApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication30 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl31 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array33 = new java.lang.String[] { "" };
    java.lang.String str34 = shellImpl31.globFilesDirectories(str_array33);
    java.lang.String str35 = calApplication30.printCalForYear(str_array33);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl36 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array38 = new java.lang.String[] { "" };
    java.lang.String str39 = shellImpl36.globFilesDirectories(str_array38);
    boolean b40 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.isNumberCommandFormat(str_array38);
    java.lang.String str41 = calApplication30.printCalForMonthYearMondayFirst(str_array38);
    java.nio.file.Path path42 = null;
    java.lang.String[] str_array44 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.getFileContents(str_array38, path42, 4);
    java.io.InputStream inputStream45 = null;
    sg.edu.nus.comp.cs4218.impl.app.EchoApplication echoApplication46 = new sg.edu.nus.comp.cs4218.impl.app.EchoApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication47 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl48 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array50 = new java.lang.String[] { "" };
    java.lang.String str51 = shellImpl48.globFilesDirectories(str_array50);
    java.lang.String str52 = calApplication47.printCalForYear(str_array50);
    java.io.InputStream inputStream53 = null;
    java.io.OutputStream outputStream55 = sg.edu.nus.comp.cs4218.impl.ShellImpl.openOutputRedir("File output redirection and pipe operator cannot be used side by side.");
    echoApplication46.run(str_array50, inputStream53, outputStream55);
    echoApplication29.run(str_array44, inputStream45, outputStream55);
    sg.edu.nus.comp.cs4218.impl.ShellImpl.writeToStdout(outputStream28, outputStream55);
    // The following exception was thrown during execution in test generation
    try {
      fmtApplication0.run(str_array25, inputStream26, outputStream55);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.FmtException");
    } catch (sg.edu.nus.comp.cs4218.exception.FmtException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.FmtException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.FmtException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + ""+ "'", str4.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "\r\n"+ "'", str9.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + ""+ "'", str10.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\r\n"+ "'", str14.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "\r\n"+ "'", str19.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + ""+ "'", str20.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + ""+ "'", str21.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + ""+ "'", str22.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(outputStream28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "\r\n"+ "'", str34.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str35.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "\r\n"+ "'", str39.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "Invalid flag provided."+ "'", str41.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "\r\n"+ "'", str51.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str52.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(outputStream55);

  }

  @Test
  public void test002() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test002"); }


    java.io.OutputStream outputStream1 = sg.edu.nus.comp.cs4218.impl.ShellImpl.openOutputRedir("hi!");
    sg.edu.nus.comp.cs4218.impl.app.DateApplication dateApplication2 = new sg.edu.nus.comp.cs4218.impl.app.DateApplication();
    java.lang.String[] str_array3 = null;
    java.io.InputStream inputStream4 = null;
    sg.edu.nus.comp.cs4218.impl.app.EchoApplication echoApplication5 = new sg.edu.nus.comp.cs4218.impl.app.EchoApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl6 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl7 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array9 = new java.lang.String[] { "" };
    java.lang.String str10 = shellImpl7.globFilesDirectories(str_array9);
    java.lang.String str11 = shellImpl6.pipeWithException(str_array9);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl12 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array14 = new java.lang.String[] { "" };
    java.lang.String str15 = shellImpl12.globFilesDirectories(str_array14);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl16 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl17 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array19 = new java.lang.String[] { "" };
    java.lang.String str20 = shellImpl17.globFilesDirectories(str_array19);
    java.lang.String str21 = shellImpl16.pipeWithException(str_array19);
    java.lang.String str22 = shellImpl12.globNoPaths(str_array19);
    java.lang.String str23 = shellImpl6.globNoPaths(str_array19);
    java.io.InputStream inputStream24 = null;
    java.io.OutputStream outputStream26 = sg.edu.nus.comp.cs4218.impl.ShellImpl.openOutputRedir("File output redirection and pipe operator cannot be used side by side.");
    sg.edu.nus.comp.cs4218.impl.app.EchoApplication echoApplication27 = new sg.edu.nus.comp.cs4218.impl.app.EchoApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication28 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl29 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array31 = new java.lang.String[] { "" };
    java.lang.String str32 = shellImpl29.globFilesDirectories(str_array31);
    java.lang.String str33 = calApplication28.printCalForYear(str_array31);
    java.io.InputStream inputStream34 = null;
    java.io.OutputStream outputStream36 = sg.edu.nus.comp.cs4218.impl.ShellImpl.openOutputRedir("File output redirection and pipe operator cannot be used side by side.");
    echoApplication27.run(str_array31, inputStream34, outputStream36);
    sg.edu.nus.comp.cs4218.impl.ShellImpl.writeToStdout(outputStream26, outputStream36);
    echoApplication5.run(str_array19, inputStream24, outputStream36);
    dateApplication2.run(str_array3, inputStream4, outputStream36);
    sg.edu.nus.comp.cs4218.impl.ShellImpl.writeToStdout(outputStream1, outputStream36);
    // The following exception was thrown during execution in test generation
    try {
      java.io.InputStream inputStream42 = sg.edu.nus.comp.cs4218.impl.ShellImpl.outputStreamToInputStream(outputStream36);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(outputStream1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\r\n"+ "'", str10.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + ""+ "'", str11.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "\r\n"+ "'", str15.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "\r\n"+ "'", str20.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + ""+ "'", str21.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + ""+ "'", str22.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + ""+ "'", str23.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(outputStream26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "\r\n"+ "'", str32.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str33.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(outputStream36);

  }

  @Test
  public void test003() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test003"); }


    java.io.OutputStream outputStream1 = sg.edu.nus.comp.cs4218.impl.ShellImpl.openOutputRedir("File output redirection and pipe operator cannot be used side by side.");
    sg.edu.nus.comp.cs4218.impl.app.EchoApplication echoApplication2 = new sg.edu.nus.comp.cs4218.impl.app.EchoApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication3 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl4 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array6 = new java.lang.String[] { "" };
    java.lang.String str7 = shellImpl4.globFilesDirectories(str_array6);
    java.lang.String str8 = calApplication3.printCalForYear(str_array6);
    java.io.InputStream inputStream9 = null;
    java.io.OutputStream outputStream11 = sg.edu.nus.comp.cs4218.impl.ShellImpl.openOutputRedir("File output redirection and pipe operator cannot be used side by side.");
    echoApplication2.run(str_array6, inputStream9, outputStream11);
    sg.edu.nus.comp.cs4218.impl.ShellImpl.writeToStdout(outputStream1, outputStream11);
    java.io.OutputStream outputStream15 = sg.edu.nus.comp.cs4218.impl.ShellImpl.openOutputRedir("File output redirection and pipe operator cannot be used side by side.");
    sg.edu.nus.comp.cs4218.impl.app.EchoApplication echoApplication16 = new sg.edu.nus.comp.cs4218.impl.app.EchoApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication17 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl18 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array20 = new java.lang.String[] { "" };
    java.lang.String str21 = shellImpl18.globFilesDirectories(str_array20);
    java.lang.String str22 = calApplication17.printCalForYear(str_array20);
    java.io.InputStream inputStream23 = null;
    java.io.OutputStream outputStream25 = sg.edu.nus.comp.cs4218.impl.ShellImpl.openOutputRedir("File output redirection and pipe operator cannot be used side by side.");
    echoApplication16.run(str_array20, inputStream23, outputStream25);
    sg.edu.nus.comp.cs4218.impl.ShellImpl.writeToStdout(outputStream15, outputStream25);
    sg.edu.nus.comp.cs4218.impl.app.EchoApplication echoApplication28 = new sg.edu.nus.comp.cs4218.impl.app.EchoApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl29 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl30 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array32 = new java.lang.String[] { "" };
    java.lang.String str33 = shellImpl30.globFilesDirectories(str_array32);
    java.lang.String str34 = shellImpl29.pipeWithException(str_array32);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl35 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array37 = new java.lang.String[] { "" };
    java.lang.String str38 = shellImpl35.globFilesDirectories(str_array37);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl39 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl40 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array42 = new java.lang.String[] { "" };
    java.lang.String str43 = shellImpl40.globFilesDirectories(str_array42);
    java.lang.String str44 = shellImpl39.pipeWithException(str_array42);
    java.lang.String str45 = shellImpl35.globNoPaths(str_array42);
    java.lang.String str46 = shellImpl29.globNoPaths(str_array42);
    java.io.InputStream inputStream47 = null;
    java.io.OutputStream outputStream49 = sg.edu.nus.comp.cs4218.impl.ShellImpl.openOutputRedir("File output redirection and pipe operator cannot be used side by side.");
    sg.edu.nus.comp.cs4218.impl.app.EchoApplication echoApplication50 = new sg.edu.nus.comp.cs4218.impl.app.EchoApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication51 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl52 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array54 = new java.lang.String[] { "" };
    java.lang.String str55 = shellImpl52.globFilesDirectories(str_array54);
    java.lang.String str56 = calApplication51.printCalForYear(str_array54);
    java.io.InputStream inputStream57 = null;
    java.io.OutputStream outputStream59 = sg.edu.nus.comp.cs4218.impl.ShellImpl.openOutputRedir("File output redirection and pipe operator cannot be used side by side.");
    echoApplication50.run(str_array54, inputStream57, outputStream59);
    sg.edu.nus.comp.cs4218.impl.ShellImpl.writeToStdout(outputStream49, outputStream59);
    echoApplication28.run(str_array42, inputStream47, outputStream59);
    sg.edu.nus.comp.cs4218.impl.ShellImpl.writeToStdout(outputStream25, outputStream59);
    sg.edu.nus.comp.cs4218.impl.ShellImpl.writeToStdout(outputStream11, outputStream25);
    // The following exception was thrown during execution in test generation
    try {
      java.io.InputStream inputStream65 = sg.edu.nus.comp.cs4218.impl.ShellImpl.outputStreamToInputStream(outputStream11);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(outputStream1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "\r\n"+ "'", str7.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str8.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(outputStream11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(outputStream15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "\r\n"+ "'", str21.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str22.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(outputStream25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "\r\n"+ "'", str33.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + ""+ "'", str34.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "\r\n"+ "'", str38.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "\r\n"+ "'", str43.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + ""+ "'", str44.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + ""+ "'", str45.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + ""+ "'", str46.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(outputStream49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "\r\n"+ "'", str55.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str56.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(outputStream59);

  }

  @Test
  public void test004() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test004"); }


    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication0 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl1 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl2 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl3 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array5 = new java.lang.String[] { "" };
    java.lang.String str6 = shellImpl3.globFilesDirectories(str_array5);
    java.lang.String str7 = shellImpl2.pipeWithException(str_array5);
    java.lang.String str8 = shellImpl1.globFilesDirectories(str_array5);
    java.lang.String str9 = bcApplication0.number(str_array5);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl10 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array12 = new java.lang.String[] { "" };
    java.lang.String str13 = shellImpl10.globFilesDirectories(str_array12);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication14 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl15 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array17 = new java.lang.String[] { "" };
    java.lang.String str18 = shellImpl15.globFilesDirectories(str_array17);
    java.lang.String str19 = calApplication14.printCalForYear(str_array17);
    java.lang.String str20 = shellImpl10.pipeTwoCommands(str_array17);
    java.lang.String str21 = bcApplication0.number(str_array17);
    java.lang.String[] str_array23 = new java.lang.String[] { "Invalid syntax encountered." };
    boolean b24 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.isNumberCommandFormat(str_array23);
    java.lang.String str25 = bcApplication0.lessThan(str_array23);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication26 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl27 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array29 = new java.lang.String[] { "" };
    java.lang.String str30 = shellImpl27.globFilesDirectories(str_array29);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication31 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl32 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array34 = new java.lang.String[] { "" };
    java.lang.String str35 = shellImpl32.globFilesDirectories(str_array34);
    java.lang.String str36 = calApplication31.printCalForYear(str_array34);
    java.lang.String str37 = shellImpl27.pipeTwoCommands(str_array34);
    java.lang.String str38 = calApplication26.printCalForYearMondayFirst(str_array34);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl39 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array41 = new java.lang.String[] { "" };
    java.lang.String str42 = shellImpl39.globFilesDirectories(str_array41);
    java.lang.String str43 = calApplication26.printCalForYear(str_array41);
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str44 = bcApplication0.equalEqual(str_array41);
      org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException");
    } catch (java.util.EmptyStackException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.util.EmptyStackException")) {
        org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\r\n"+ "'", str6.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + ""+ "'", str7.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\r\n"+ "'", str8.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "1"+ "'", str9.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "\r\n"+ "'", str13.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "\r\n"+ "'", str18.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str19.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + ""+ "'", str20.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "1"+ "'", str21.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "bc: Unknown character detected I"+ "'", str25.equals("bc: Unknown character detected I"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "\r\n"+ "'", str30.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "\r\n"+ "'", str35.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str36.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + ""+ "'", str37.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "Invalid flag provided."+ "'", str38.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "\r\n"+ "'", str42.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str43.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));

  }

  @Test
  public void test005() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test005"); }


    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl1 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl3 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array5 = new java.lang.String[] { "" };
    java.lang.String str6 = shellImpl3.globFilesDirectories(str_array5);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl8 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array10 = new java.lang.String[] { "" };
    java.lang.String str11 = shellImpl8.globFilesDirectories(str_array10);
    java.lang.String str12 = calApplication7.printCalForYear(str_array10);
    java.lang.String str13 = shellImpl3.pipeTwoCommands(str_array10);
    java.lang.String str14 = calApplication2.printCalForYearMondayFirst(str_array10);
    java.nio.file.Path path15 = null;
    java.lang.String[] str_array17 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.getFileContents(str_array10, path15, 10);
    java.lang.String str18 = shellImpl1.globMultiLevel(str_array17);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl19 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl20 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array22 = new java.lang.String[] { "" };
    java.lang.String str23 = shellImpl20.globFilesDirectories(str_array22);
    java.lang.String str24 = shellImpl19.pipeWithException(str_array22);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl25 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array27 = new java.lang.String[] { "" };
    java.lang.String str28 = shellImpl25.globFilesDirectories(str_array27);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl29 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl30 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array32 = new java.lang.String[] { "" };
    java.lang.String str33 = shellImpl30.globFilesDirectories(str_array32);
    java.lang.String str34 = shellImpl29.pipeWithException(str_array32);
    java.lang.String str35 = shellImpl25.globNoPaths(str_array32);
    java.lang.String str36 = shellImpl19.globNoPaths(str_array32);
    java.lang.String str37 = shellImpl1.globFilesDirectories(str_array32);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication38 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl39 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array41 = new java.lang.String[] { "" };
    java.lang.String str42 = shellImpl39.globFilesDirectories(str_array41);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication43 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl44 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array46 = new java.lang.String[] { "" };
    java.lang.String str47 = shellImpl44.globFilesDirectories(str_array46);
    java.lang.String str48 = calApplication43.printCalForYear(str_array46);
    java.lang.String str49 = shellImpl39.pipeTwoCommands(str_array46);
    java.lang.String str50 = calApplication38.printCalForYearMondayFirst(str_array46);
    java.nio.file.Path path51 = null;
    java.lang.String[] str_array53 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.getFileContents(str_array46, path51, 10);
    java.lang.String str54 = shellImpl1.globOneFile(str_array53);
    java.util.List list55 = sortApplication0.sortNumbersSpecialChars(str_array53);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl56 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl57 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array59 = new java.lang.String[] { "" };
    java.lang.String str60 = shellImpl57.globFilesDirectories(str_array59);
    java.lang.String str61 = shellImpl56.pipeWithException(str_array59);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl62 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array64 = new java.lang.String[] { "" };
    java.lang.String str65 = shellImpl62.globFilesDirectories(str_array64);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl66 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl67 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array69 = new java.lang.String[] { "" };
    java.lang.String str70 = shellImpl67.globFilesDirectories(str_array69);
    java.lang.String str71 = shellImpl66.pipeWithException(str_array69);
    java.lang.String str72 = shellImpl62.globNoPaths(str_array69);
    java.lang.String str73 = shellImpl56.globNoPaths(str_array69);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl74 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl75 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl76 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array78 = new java.lang.String[] { "" };
    java.lang.String str79 = shellImpl76.globFilesDirectories(str_array78);
    java.lang.String str80 = shellImpl75.pipeWithException(str_array78);
    java.lang.String str81 = shellImpl74.globFilesDirectories(str_array78);
    java.lang.String str82 = shellImpl56.globNoPaths(str_array78);
    java.util.List list83 = sortApplication0.sortSimpleNumbersWithNumFlagOn(str_array78);
    java.util.List list84 = sg.edu.nus.comp.cs4218.misc.SortHelper.sortHelperWithNumFlag(list83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\r\n"+ "'", str6.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "\r\n"+ "'", str11.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str12.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + ""+ "'", str13.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Invalid flag provided."+ "'", str14.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + ""+ "'", str18.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "\r\n"+ "'", str23.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + ""+ "'", str24.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "\r\n"+ "'", str28.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "\r\n"+ "'", str33.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + ""+ "'", str34.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + ""+ "'", str35.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + ""+ "'", str36.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "\r\n"+ "'", str37.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "\r\n"+ "'", str42.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "\r\n"+ "'", str47.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str48.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + ""+ "'", str49.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "Invalid flag provided."+ "'", str50.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + ""+ "'", str54.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "\r\n"+ "'", str60.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + ""+ "'", str61.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "\r\n"+ "'", str65.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str70 + "' != '" + "\r\n"+ "'", str70.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str71 + "' != '" + ""+ "'", str71.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str72 + "' != '" + ""+ "'", str72.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str73 + "' != '" + ""+ "'", str73.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str79 + "' != '" + "\r\n"+ "'", str79.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str80 + "' != '" + ""+ "'", str80.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str81 + "' != '" + "\r\n"+ "'", str81.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str82 + "' != '" + ""+ "'", str82.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list84);

  }

  @Test
  public void test006() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test006"); }


    // The following exception was thrown during execution in test generation
    try {
      java.util.Vector vector1 = sg.edu.nus.comp.cs4218.misc.ExpressionEvaluator.splitSeparateStrings("$");
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.BcException");
    } catch (sg.edu.nus.comp.cs4218.exception.BcException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.BcException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.BcException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test007() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test007"); }


    sg.edu.nus.comp.cs4218.misc.MergeSort mergeSort1 = new sg.edu.nus.comp.cs4218.misc.MergeSort(false);
    java.lang.String str3 = mergeSort1.extractFirstNumberWordFromLine("=");
    int i6 = mergeSort1.customCompare("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n", "");
    int i9 = mergeSort1.compareIncludeNumOrder("0", "||");
    java.lang.String str11 = mergeSort1.extractFirstNumberWordFromLine("-0");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + ""+ "'", str3.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + ""+ "'", str11.equals(""));

  }

  @Test
  public void test008() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test008"); }


    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl1 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl3 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array5 = new java.lang.String[] { "" };
    java.lang.String str6 = shellImpl3.globFilesDirectories(str_array5);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl8 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array10 = new java.lang.String[] { "" };
    java.lang.String str11 = shellImpl8.globFilesDirectories(str_array10);
    java.lang.String str12 = calApplication7.printCalForYear(str_array10);
    java.lang.String str13 = shellImpl3.pipeTwoCommands(str_array10);
    java.lang.String str14 = calApplication2.printCalForYearMondayFirst(str_array10);
    java.nio.file.Path path15 = null;
    java.lang.String[] str_array17 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.getFileContents(str_array10, path15, 10);
    java.lang.String str18 = shellImpl1.globMultiLevel(str_array17);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl19 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl20 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array22 = new java.lang.String[] { "" };
    java.lang.String str23 = shellImpl20.globFilesDirectories(str_array22);
    java.lang.String str24 = shellImpl19.pipeWithException(str_array22);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl25 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array27 = new java.lang.String[] { "" };
    java.lang.String str28 = shellImpl25.globFilesDirectories(str_array27);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl29 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl30 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array32 = new java.lang.String[] { "" };
    java.lang.String str33 = shellImpl30.globFilesDirectories(str_array32);
    java.lang.String str34 = shellImpl29.pipeWithException(str_array32);
    java.lang.String str35 = shellImpl25.globNoPaths(str_array32);
    java.lang.String str36 = shellImpl19.globNoPaths(str_array32);
    java.lang.String str37 = shellImpl1.globFilesDirectories(str_array32);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication38 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl39 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array41 = new java.lang.String[] { "" };
    java.lang.String str42 = shellImpl39.globFilesDirectories(str_array41);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication43 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl44 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array46 = new java.lang.String[] { "" };
    java.lang.String str47 = shellImpl44.globFilesDirectories(str_array46);
    java.lang.String str48 = calApplication43.printCalForYear(str_array46);
    java.lang.String str49 = shellImpl39.pipeTwoCommands(str_array46);
    java.lang.String str50 = calApplication38.printCalForYearMondayFirst(str_array46);
    java.nio.file.Path path51 = null;
    java.lang.String[] str_array53 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.getFileContents(str_array46, path51, 10);
    java.lang.String str54 = shellImpl1.globOneFile(str_array53);
    java.util.List list55 = sortApplication0.sortNumbersSpecialChars(str_array53);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication56 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl57 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array59 = new java.lang.String[] { "" };
    java.lang.String str60 = shellImpl57.globFilesDirectories(str_array59);
    java.lang.String str61 = calApplication56.printCalForYear(str_array59);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl62 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array64 = new java.lang.String[] { "" };
    java.lang.String str65 = shellImpl62.globFilesDirectories(str_array64);
    boolean b66 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.isNumberCommandFormat(str_array64);
    java.lang.String str67 = calApplication56.printCalForMonthYearMondayFirst(str_array64);
    java.util.List list68 = sortApplication0.sortAllWithNumFlagOn(str_array64);
    java.lang.String[] str_array70 = new java.lang.String[] { "Invalid syntax encountered." };
    boolean b71 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.isNumberCommandFormat(str_array70);
    java.util.List list72 = sortApplication0.sortNumbersSpecialChars(str_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\r\n"+ "'", str6.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "\r\n"+ "'", str11.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str12.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + ""+ "'", str13.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Invalid flag provided."+ "'", str14.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + ""+ "'", str18.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "\r\n"+ "'", str23.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + ""+ "'", str24.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "\r\n"+ "'", str28.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "\r\n"+ "'", str33.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + ""+ "'", str34.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + ""+ "'", str35.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + ""+ "'", str36.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "\r\n"+ "'", str37.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "\r\n"+ "'", str42.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "\r\n"+ "'", str47.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str48.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + ""+ "'", str49.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "Invalid flag provided."+ "'", str50.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + ""+ "'", str54.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "\r\n"+ "'", str60.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str61.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "\r\n"+ "'", str65.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "Invalid flag provided."+ "'", str67.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list72);

  }

  @Test
  public void test009() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test009"); }


    sg.edu.nus.comp.cs4218.impl.GlobFinder globFinder2 = new sg.edu.nus.comp.cs4218.impl.GlobFinder("Missing arg for pipe command.", "Missing arg for pipe command.");
    java.nio.file.Path path3 = null;
    java.nio.file.attribute.BasicFileAttributes basicFileAttributes4 = null;
    java.nio.file.FileVisitResult fileVisitResult5 = globFinder2.visitFile(path3, basicFileAttributes4);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl6 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl8 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array10 = new java.lang.String[] { "" };
    java.lang.String str11 = shellImpl8.globFilesDirectories(str_array10);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication12 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl13 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array15 = new java.lang.String[] { "" };
    java.lang.String str16 = shellImpl13.globFilesDirectories(str_array15);
    java.lang.String str17 = calApplication12.printCalForYear(str_array15);
    java.lang.String str18 = shellImpl8.pipeTwoCommands(str_array15);
    java.lang.String str19 = calApplication7.printCalForYearMondayFirst(str_array15);
    java.nio.file.Path path20 = null;
    java.lang.String[] str_array22 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.getFileContents(str_array15, path20, 10);
    java.lang.String str23 = shellImpl6.globMultiLevel(str_array22);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl24 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array26 = new java.lang.String[] { "" };
    java.lang.String str27 = shellImpl24.globFilesDirectories(str_array26);
    java.lang.String str28 = shellImpl6.pipeTwoCommands(str_array26);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl29 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl30 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array32 = new java.lang.String[] { "" };
    java.lang.String str33 = shellImpl30.globFilesDirectories(str_array32);
    java.lang.String str34 = shellImpl29.pipeWithException(str_array32);
    java.lang.String[] str_array35 = sg.edu.nus.comp.cs4218.impl.ShellImpl.processBQ(str_array32);
    java.lang.String str36 = shellImpl6.globOneFile(str_array35);
    java.io.IOException iOException37 = null;
    java.nio.file.FileVisitResult fileVisitResult38 = globFinder2.postVisitDirectory((java.lang.Object)shellImpl6, iOException37);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl39 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array41 = new java.lang.String[] { "" };
    java.lang.String str42 = shellImpl39.globFilesDirectories(str_array41);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl43 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl44 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array46 = new java.lang.String[] { "" };
    java.lang.String str47 = shellImpl44.globFilesDirectories(str_array46);
    java.lang.String str48 = shellImpl43.pipeWithException(str_array46);
    java.lang.String str49 = shellImpl39.globNoPaths(str_array46);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl50 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array52 = new java.lang.String[] { "" };
    java.lang.String str53 = shellImpl50.globFilesDirectories(str_array52);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication54 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl55 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array57 = new java.lang.String[] { "" };
    java.lang.String str58 = shellImpl55.globFilesDirectories(str_array57);
    java.lang.String str59 = calApplication54.printCalForYear(str_array57);
    java.lang.String str60 = shellImpl50.pipeTwoCommands(str_array57);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication61 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication62 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl63 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array65 = new java.lang.String[] { "" };
    java.lang.String str66 = shellImpl63.globFilesDirectories(str_array65);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication67 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl68 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array70 = new java.lang.String[] { "" };
    java.lang.String str71 = shellImpl68.globFilesDirectories(str_array70);
    java.lang.String str72 = calApplication67.printCalForYear(str_array70);
    java.lang.String str73 = shellImpl63.pipeTwoCommands(str_array70);
    java.lang.String str74 = calApplication62.printCalForYearMondayFirst(str_array70);
    java.nio.file.Path path75 = null;
    java.lang.String[] str_array77 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.getFileContents(str_array70, path75, 10);
    java.lang.String str78 = calApplication61.printCal(str_array77);
    java.lang.String str79 = shellImpl50.globOneFile(str_array77);
    java.lang.String str80 = shellImpl39.globNoPaths(str_array77);
    java.lang.String str81 = shellImpl6.pipeTwoCommands(str_array77);
    sg.edu.nus.comp.cs4218.impl.cmd.PipeCommand pipeCommand84 = new sg.edu.nus.comp.cs4218.impl.cmd.PipeCommand("Invalid app.");
    java.io.InputStream inputStream85 = null;
    sg.edu.nus.comp.cs4218.impl.app.EchoApplication echoApplication86 = new sg.edu.nus.comp.cs4218.impl.app.EchoApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication87 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl88 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array90 = new java.lang.String[] { "" };
    java.lang.String str91 = shellImpl88.globFilesDirectories(str_array90);
    java.lang.String str92 = calApplication87.printCalForYear(str_array90);
    java.io.InputStream inputStream93 = null;
    java.io.OutputStream outputStream95 = sg.edu.nus.comp.cs4218.impl.ShellImpl.openOutputRedir("File output redirection and pipe operator cannot be used side by side.");
    echoApplication86.run(str_array90, inputStream93, outputStream95);
    pipeCommand84.evaluate(inputStream85, outputStream95);
    // The following exception was thrown during execution in test generation
    try {
      shellImpl6.parseAndEvaluate("Error writing to stdout.", outputStream95);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.ShellException");
    } catch (sg.edu.nus.comp.cs4218.exception.ShellException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.ShellException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.ShellException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fileVisitResult5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "\r\n"+ "'", str11.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\r\n"+ "'", str16.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str17.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + ""+ "'", str18.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "Invalid flag provided."+ "'", str19.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + ""+ "'", str23.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "\r\n"+ "'", str27.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + ""+ "'", str28.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "\r\n"+ "'", str33.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + ""+ "'", str34.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "\r\n"+ "'", str36.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fileVisitResult38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "\r\n"+ "'", str42.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "\r\n"+ "'", str47.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + ""+ "'", str48.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + ""+ "'", str49.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "\r\n"+ "'", str53.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "\r\n"+ "'", str58.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str59.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + ""+ "'", str60.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "\r\n"+ "'", str66.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str71 + "' != '" + "\r\n"+ "'", str71.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str72 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str72.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str73 + "' != '" + ""+ "'", str73.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str74 + "' != '" + "Invalid flag provided."+ "'", str74.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str78 + "' != '" + "     March 2016     \r\nSu Mo Tu We Th Fr Sa\r\n       1  2  3  4  5\r\n 6  7  8  9 10 11 12\r\n13 14 15 16 17 18 19\r\n20 21 22 23 24 25 26\r\n27 28 29 30 31\r\n"+ "'", str78.equals("     March 2016     \r\nSu Mo Tu We Th Fr Sa\r\n       1  2  3  4  5\r\n 6  7  8  9 10 11 12\r\n13 14 15 16 17 18 19\r\n20 21 22 23 24 25 26\r\n27 28 29 30 31\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str79 + "' != '" + ""+ "'", str79.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str80 + "' != '" + ""+ "'", str80.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str81 + "' != '" + ""+ "'", str81.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str91 + "' != '" + "\r\n"+ "'", str91.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str92 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str92.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(outputStream95);

  }

  @Test
  public void test010() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test010"); }


    sg.edu.nus.comp.cs4218.misc.MergeSort mergeSort1 = new sg.edu.nus.comp.cs4218.misc.MergeSort(false);
    int i3 = mergeSort1.getRank('>');
    int i6 = mergeSort1.customCompare("", "/");
    int i8 = mergeSort1.getRank('*');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);

  }

  @Test
  public void test011() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test011"); }


    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl0 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array2 = new java.lang.String[] { "" };
    java.lang.String str3 = shellImpl0.globFilesDirectories(str_array2);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl4 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl5 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array7 = new java.lang.String[] { "" };
    java.lang.String str8 = shellImpl5.globFilesDirectories(str_array7);
    java.lang.String str9 = shellImpl4.pipeWithException(str_array7);
    java.lang.String str10 = shellImpl0.globNoPaths(str_array7);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl11 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array13 = new java.lang.String[] { "" };
    java.lang.String str14 = shellImpl11.globFilesDirectories(str_array13);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication15 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl16 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array18 = new java.lang.String[] { "" };
    java.lang.String str19 = shellImpl16.globFilesDirectories(str_array18);
    java.lang.String str20 = calApplication15.printCalForYear(str_array18);
    java.lang.String str21 = shellImpl11.pipeTwoCommands(str_array18);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication22 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication23 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl24 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array26 = new java.lang.String[] { "" };
    java.lang.String str27 = shellImpl24.globFilesDirectories(str_array26);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication28 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl29 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array31 = new java.lang.String[] { "" };
    java.lang.String str32 = shellImpl29.globFilesDirectories(str_array31);
    java.lang.String str33 = calApplication28.printCalForYear(str_array31);
    java.lang.String str34 = shellImpl24.pipeTwoCommands(str_array31);
    java.lang.String str35 = calApplication23.printCalForYearMondayFirst(str_array31);
    java.nio.file.Path path36 = null;
    java.lang.String[] str_array38 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.getFileContents(str_array31, path36, 10);
    java.lang.String str39 = calApplication22.printCal(str_array38);
    java.lang.String str40 = shellImpl11.globOneFile(str_array38);
    java.lang.String str41 = shellImpl0.globNoPaths(str_array38);
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str42 = sg.edu.nus.comp.cs4218.impl.app.BcApplication.evaluateHelper(str_array38);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "\r\n"+ "'", str3.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\r\n"+ "'", str8.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + ""+ "'", str10.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\r\n"+ "'", str14.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "\r\n"+ "'", str19.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str20.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + ""+ "'", str21.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "\r\n"+ "'", str27.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "\r\n"+ "'", str32.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str33.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + ""+ "'", str34.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "Invalid flag provided."+ "'", str35.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "     March 2016     \r\nSu Mo Tu We Th Fr Sa\r\n       1  2  3  4  5\r\n 6  7  8  9 10 11 12\r\n13 14 15 16 17 18 19\r\n20 21 22 23 24 25 26\r\n27 28 29 30 31\r\n"+ "'", str39.equals("     March 2016     \r\nSu Mo Tu We Th Fr Sa\r\n       1  2  3  4  5\r\n 6  7  8  9 10 11 12\r\n13 14 15 16 17 18 19\r\n20 21 22 23 24 25 26\r\n27 28 29 30 31\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + ""+ "'", str40.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + ""+ "'", str41.equals(""));

  }

  @Test
  public void test012() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test012"); }


    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl1 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl3 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array5 = new java.lang.String[] { "" };
    java.lang.String str6 = shellImpl3.globFilesDirectories(str_array5);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl8 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array10 = new java.lang.String[] { "" };
    java.lang.String str11 = shellImpl8.globFilesDirectories(str_array10);
    java.lang.String str12 = calApplication7.printCalForYear(str_array10);
    java.lang.String str13 = shellImpl3.pipeTwoCommands(str_array10);
    java.lang.String str14 = calApplication2.printCalForYearMondayFirst(str_array10);
    java.nio.file.Path path15 = null;
    java.lang.String[] str_array17 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.getFileContents(str_array10, path15, 10);
    java.lang.String str18 = shellImpl1.globMultiLevel(str_array17);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl19 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl20 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array22 = new java.lang.String[] { "" };
    java.lang.String str23 = shellImpl20.globFilesDirectories(str_array22);
    java.lang.String str24 = shellImpl19.pipeWithException(str_array22);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl25 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array27 = new java.lang.String[] { "" };
    java.lang.String str28 = shellImpl25.globFilesDirectories(str_array27);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl29 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl30 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array32 = new java.lang.String[] { "" };
    java.lang.String str33 = shellImpl30.globFilesDirectories(str_array32);
    java.lang.String str34 = shellImpl29.pipeWithException(str_array32);
    java.lang.String str35 = shellImpl25.globNoPaths(str_array32);
    java.lang.String str36 = shellImpl19.globNoPaths(str_array32);
    java.lang.String str37 = shellImpl1.globFilesDirectories(str_array32);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication38 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl39 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array41 = new java.lang.String[] { "" };
    java.lang.String str42 = shellImpl39.globFilesDirectories(str_array41);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication43 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl44 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array46 = new java.lang.String[] { "" };
    java.lang.String str47 = shellImpl44.globFilesDirectories(str_array46);
    java.lang.String str48 = calApplication43.printCalForYear(str_array46);
    java.lang.String str49 = shellImpl39.pipeTwoCommands(str_array46);
    java.lang.String str50 = calApplication38.printCalForYearMondayFirst(str_array46);
    java.nio.file.Path path51 = null;
    java.lang.String[] str_array53 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.getFileContents(str_array46, path51, 10);
    java.lang.String str54 = shellImpl1.globOneFile(str_array53);
    java.util.List list55 = sortApplication0.sortNumbersSpecialChars(str_array53);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication56 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl57 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array59 = new java.lang.String[] { "" };
    java.lang.String str60 = shellImpl57.globFilesDirectories(str_array59);
    java.lang.String str61 = calApplication56.printCalForYear(str_array59);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl62 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array64 = new java.lang.String[] { "" };
    java.lang.String str65 = shellImpl62.globFilesDirectories(str_array64);
    boolean b66 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.isNumberCommandFormat(str_array64);
    java.lang.String str67 = calApplication56.printCalForMonthYearMondayFirst(str_array64);
    java.util.List list68 = sortApplication0.sortAllWithNumFlagOn(str_array64);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl69 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl70 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array72 = new java.lang.String[] { "" };
    java.lang.String str73 = shellImpl70.globFilesDirectories(str_array72);
    java.lang.String str74 = shellImpl69.pipeWithException(str_array72);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl75 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array77 = new java.lang.String[] { "" };
    java.lang.String str78 = shellImpl75.globFilesDirectories(str_array77);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl79 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl80 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array82 = new java.lang.String[] { "" };
    java.lang.String str83 = shellImpl80.globFilesDirectories(str_array82);
    java.lang.String str84 = shellImpl79.pipeWithException(str_array82);
    java.lang.String str85 = shellImpl75.globNoPaths(str_array82);
    java.lang.String str86 = shellImpl69.globNoPaths(str_array82);
    boolean b87 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.isNumberCommandFormat(str_array82);
    java.util.List list88 = sortApplication0.sortCapitalNumberswithNumFlagOn(str_array82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\r\n"+ "'", str6.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "\r\n"+ "'", str11.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str12.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + ""+ "'", str13.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Invalid flag provided."+ "'", str14.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + ""+ "'", str18.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "\r\n"+ "'", str23.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + ""+ "'", str24.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "\r\n"+ "'", str28.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "\r\n"+ "'", str33.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + ""+ "'", str34.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + ""+ "'", str35.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + ""+ "'", str36.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "\r\n"+ "'", str37.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "\r\n"+ "'", str42.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "\r\n"+ "'", str47.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str48.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + ""+ "'", str49.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "Invalid flag provided."+ "'", str50.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + ""+ "'", str54.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "\r\n"+ "'", str60.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str61.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "\r\n"+ "'", str65.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "Invalid flag provided."+ "'", str67.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str73 + "' != '" + "\r\n"+ "'", str73.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str74 + "' != '" + ""+ "'", str74.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str78 + "' != '" + "\r\n"+ "'", str78.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str83 + "' != '" + "\r\n"+ "'", str83.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str84 + "' != '" + ""+ "'", str84.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str85 + "' != '" + ""+ "'", str85.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str86 + "' != '" + ""+ "'", str86.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list88);

  }

  @Test
  public void test013() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test013"); }


    sg.edu.nus.comp.cs4218.impl.cmd.CallCommand callCommand1 = new sg.edu.nus.comp.cs4218.impl.cmd.CallCommand("Invalid app.");
    java.util.Vector vector4 = sg.edu.nus.comp.cs4218.misc.ExpressionEvaluator.splitSeparateStrings("-1");
    // The following exception was thrown during execution in test generation
    try {
      int i6 = callCommand1.extractOutputRedir("\r\n", vector4, (-30));
      org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException");
    } catch (java.lang.StringIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.StringIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(vector4);

  }

  @Test
  public void test014() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test014"); }


    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication0 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl1 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl2 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl3 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array5 = new java.lang.String[] { "" };
    java.lang.String str6 = shellImpl3.globFilesDirectories(str_array5);
    java.lang.String str7 = shellImpl2.pipeWithException(str_array5);
    java.lang.String str8 = shellImpl1.globFilesDirectories(str_array5);
    java.lang.String str9 = bcApplication0.number(str_array5);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication10 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication11 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl12 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array14 = new java.lang.String[] { "" };
    java.lang.String str15 = shellImpl12.globFilesDirectories(str_array14);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication16 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl17 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array19 = new java.lang.String[] { "" };
    java.lang.String str20 = shellImpl17.globFilesDirectories(str_array19);
    java.lang.String str21 = calApplication16.printCalForYear(str_array19);
    java.lang.String str22 = shellImpl12.pipeTwoCommands(str_array19);
    java.lang.String str23 = calApplication11.printCalForYearMondayFirst(str_array19);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl24 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array26 = new java.lang.String[] { "" };
    java.lang.String str27 = shellImpl24.globFilesDirectories(str_array26);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication28 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl29 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array31 = new java.lang.String[] { "" };
    java.lang.String str32 = shellImpl29.globFilesDirectories(str_array31);
    java.lang.String str33 = calApplication28.printCalForYear(str_array31);
    java.lang.String str34 = shellImpl24.pipeTwoCommands(str_array31);
    sg.edu.nus.comp.cs4218.impl.cmd.CallCommand callCommand35 = new sg.edu.nus.comp.cs4218.impl.cmd.CallCommand();
    java.lang.String str36 = callCommand35.getInputStreamS();
    callCommand35.terminate();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication38 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl39 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array41 = new java.lang.String[] { "" };
    java.lang.String str42 = shellImpl39.globFilesDirectories(str_array41);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication43 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl44 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array46 = new java.lang.String[] { "" };
    java.lang.String str47 = shellImpl44.globFilesDirectories(str_array46);
    java.lang.String str48 = calApplication43.printCalForYear(str_array46);
    java.lang.String str49 = shellImpl39.pipeTwoCommands(str_array46);
    java.lang.String str50 = calApplication38.printCalForYearMondayFirst(str_array46);
    java.nio.file.Path path51 = null;
    java.lang.String[] str_array53 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.getFileContents(str_array46, path51, 10);
    java.lang.String[] str_array54 = callCommand35.evaluateGlob(str_array46);
    java.lang.String str55 = shellImpl24.globMultiLevel(str_array46);
    java.lang.String str56 = calApplication11.printCal(str_array46);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl57 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl58 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array60 = new java.lang.String[] { "" };
    java.lang.String str61 = shellImpl58.globFilesDirectories(str_array60);
    java.lang.String str62 = shellImpl57.pipeWithException(str_array60);
    java.lang.String[] str_array63 = sg.edu.nus.comp.cs4218.impl.ShellImpl.processBQ(str_array60);
    java.lang.String str64 = calApplication11.printCalForMonthYearMondayFirst(str_array60);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl65 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array67 = new java.lang.String[] { "" };
    java.lang.String str68 = shellImpl65.globFilesDirectories(str_array67);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl69 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl70 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array72 = new java.lang.String[] { "" };
    java.lang.String str73 = shellImpl70.globFilesDirectories(str_array72);
    java.lang.String str74 = shellImpl69.pipeWithException(str_array72);
    java.lang.String str75 = shellImpl65.globNoPaths(str_array72);
    java.lang.String str76 = calApplication11.printCal(str_array72);
    java.util.List list77 = sortApplication10.sortCapitalNumberswithNumFlagOn(str_array72);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication78 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array80 = new java.lang.String[] { "-0" };
    java.lang.String str81 = calApplication78.printCalForYearMondayFirst(str_array80);
    java.util.List list82 = sortApplication10.sortStringsCapital(str_array80);
    java.lang.String str83 = bcApplication0.orMethod(str_array80);
    java.nio.file.Path path84 = null;
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String[] str_array86 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.getFileContents(str_array80, path84, (-82));
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\r\n"+ "'", str6.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + ""+ "'", str7.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\r\n"+ "'", str8.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "1"+ "'", str9.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "\r\n"+ "'", str15.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "\r\n"+ "'", str20.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str21.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + ""+ "'", str22.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "Invalid flag provided."+ "'", str23.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "\r\n"+ "'", str27.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "\r\n"+ "'", str32.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str33.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + ""+ "'", str34.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + ""+ "'", str36.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "\r\n"+ "'", str42.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "\r\n"+ "'", str47.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str48.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + ""+ "'", str49.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "Invalid flag provided."+ "'", str50.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "\r\n"+ "'", str55.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "     March 2016     \r\nSu Mo Tu We Th Fr Sa\r\n       1  2  3  4  5\r\n 6  7  8  9 10 11 12\r\n13 14 15 16 17 18 19\r\n20 21 22 23 24 25 26\r\n27 28 29 30 31\r\n"+ "'", str56.equals("     March 2016     \r\nSu Mo Tu We Th Fr Sa\r\n       1  2  3  4  5\r\n 6  7  8  9 10 11 12\r\n13 14 15 16 17 18 19\r\n20 21 22 23 24 25 26\r\n27 28 29 30 31\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "\r\n"+ "'", str61.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + ""+ "'", str62.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str64 + "' != '" + "Invalid flag provided."+ "'", str64.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str68 + "' != '" + "\r\n"+ "'", str68.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str73 + "' != '" + "\r\n"+ "'", str73.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str74 + "' != '" + ""+ "'", str74.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str75 + "' != '" + ""+ "'", str75.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str76 + "' != '" + "     March 2016     \r\nSu Mo Tu We Th Fr Sa\r\n       1  2  3  4  5\r\n 6  7  8  9 10 11 12\r\n13 14 15 16 17 18 19\r\n20 21 22 23 24 25 26\r\n27 28 29 30 31\r\n"+ "'", str76.equals("     March 2016     \r\nSu Mo Tu We Th Fr Sa\r\n       1  2  3  4  5\r\n 6  7  8  9 10 11 12\r\n13 14 15 16 17 18 19\r\n20 21 22 23 24 25 26\r\n27 28 29 30 31\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str81 + "' != '" + "Invalid flag provided."+ "'", str81.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str83 + "' != '" + "0"+ "'", str83.equals("0"));

  }

  @Test
  public void test015() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test015"); }


    sg.edu.nus.comp.cs4218.impl.cmd.SequenceCommand sequenceCommand1 = new sg.edu.nus.comp.cs4218.impl.cmd.SequenceCommand("|");
    java.io.InputStream inputStream2 = null;
    sg.edu.nus.comp.cs4218.impl.cmd.PipeCommand pipeCommand4 = new sg.edu.nus.comp.cs4218.impl.cmd.PipeCommand("Invalid app.");
    java.io.InputStream inputStream5 = null;
    sg.edu.nus.comp.cs4218.impl.app.EchoApplication echoApplication6 = new sg.edu.nus.comp.cs4218.impl.app.EchoApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl8 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array10 = new java.lang.String[] { "" };
    java.lang.String str11 = shellImpl8.globFilesDirectories(str_array10);
    java.lang.String str12 = calApplication7.printCalForYear(str_array10);
    java.io.InputStream inputStream13 = null;
    java.io.OutputStream outputStream15 = sg.edu.nus.comp.cs4218.impl.ShellImpl.openOutputRedir("File output redirection and pipe operator cannot be used side by side.");
    echoApplication6.run(str_array10, inputStream13, outputStream15);
    pipeCommand4.evaluate(inputStream5, outputStream15);
    // The following exception was thrown during execution in test generation
    try {
      sequenceCommand1.evaluate(inputStream2, outputStream15);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "\r\n"+ "'", str11.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str12.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(outputStream15);

  }

  @Test
  public void test016() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test016"); }


    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl1 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array3 = new java.lang.String[] { "" };
    java.lang.String str4 = shellImpl1.globFilesDirectories(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication5 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl6 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array8 = new java.lang.String[] { "" };
    java.lang.String str9 = shellImpl6.globFilesDirectories(str_array8);
    java.lang.String str10 = calApplication5.printCalForYear(str_array8);
    java.lang.String str11 = shellImpl1.pipeTwoCommands(str_array8);
    java.lang.String str12 = calApplication0.printCalForYearMondayFirst(str_array8);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl13 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array15 = new java.lang.String[] { "" };
    java.lang.String str16 = shellImpl13.globFilesDirectories(str_array15);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication17 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl18 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array20 = new java.lang.String[] { "" };
    java.lang.String str21 = shellImpl18.globFilesDirectories(str_array20);
    java.lang.String str22 = calApplication17.printCalForYear(str_array20);
    java.lang.String str23 = shellImpl13.pipeTwoCommands(str_array20);
    sg.edu.nus.comp.cs4218.impl.cmd.CallCommand callCommand24 = new sg.edu.nus.comp.cs4218.impl.cmd.CallCommand();
    java.lang.String str25 = callCommand24.getInputStreamS();
    callCommand24.terminate();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication27 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl28 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array30 = new java.lang.String[] { "" };
    java.lang.String str31 = shellImpl28.globFilesDirectories(str_array30);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication32 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl33 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array35 = new java.lang.String[] { "" };
    java.lang.String str36 = shellImpl33.globFilesDirectories(str_array35);
    java.lang.String str37 = calApplication32.printCalForYear(str_array35);
    java.lang.String str38 = shellImpl28.pipeTwoCommands(str_array35);
    java.lang.String str39 = calApplication27.printCalForYearMondayFirst(str_array35);
    java.nio.file.Path path40 = null;
    java.lang.String[] str_array42 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.getFileContents(str_array35, path40, 10);
    java.lang.String[] str_array43 = callCommand24.evaluateGlob(str_array35);
    java.lang.String str44 = shellImpl13.globMultiLevel(str_array35);
    java.lang.String str45 = calApplication0.printCal(str_array35);
    sg.edu.nus.comp.cs4218.impl.cmd.CallCommand callCommand46 = new sg.edu.nus.comp.cs4218.impl.cmd.CallCommand();
    java.lang.String str47 = callCommand46.getInputStreamS();
    callCommand46.terminate();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication49 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl50 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array52 = new java.lang.String[] { "" };
    java.lang.String str53 = shellImpl50.globFilesDirectories(str_array52);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication54 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl55 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array57 = new java.lang.String[] { "" };
    java.lang.String str58 = shellImpl55.globFilesDirectories(str_array57);
    java.lang.String str59 = calApplication54.printCalForYear(str_array57);
    java.lang.String str60 = shellImpl50.pipeTwoCommands(str_array57);
    java.lang.String str61 = calApplication49.printCalForYearMondayFirst(str_array57);
    java.nio.file.Path path62 = null;
    java.lang.String[] str_array64 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.getFileContents(str_array57, path62, 10);
    java.lang.String[] str_array65 = callCommand46.evaluateGlob(str_array64);
    java.lang.String str66 = calApplication0.printCalWithMondayFirst(str_array65);
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str67 = sg.edu.nus.comp.cs4218.impl.app.BcApplication.evaluateHelper(str_array65);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\r\n"+ "'", str4.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "\r\n"+ "'", str9.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str10.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + ""+ "'", str11.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Invalid flag provided."+ "'", str12.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\r\n"+ "'", str16.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "\r\n"+ "'", str21.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str22.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + ""+ "'", str23.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + ""+ "'", str25.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "\r\n"+ "'", str31.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "\r\n"+ "'", str36.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str37.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + ""+ "'", str38.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "Invalid flag provided."+ "'", str39.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "\r\n"+ "'", str44.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "     March 2016     \r\nSu Mo Tu We Th Fr Sa\r\n       1  2  3  4  5\r\n 6  7  8  9 10 11 12\r\n13 14 15 16 17 18 19\r\n20 21 22 23 24 25 26\r\n27 28 29 30 31\r\n"+ "'", str45.equals("     March 2016     \r\nSu Mo Tu We Th Fr Sa\r\n       1  2  3  4  5\r\n 6  7  8  9 10 11 12\r\n13 14 15 16 17 18 19\r\n20 21 22 23 24 25 26\r\n27 28 29 30 31\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + ""+ "'", str47.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "\r\n"+ "'", str53.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "\r\n"+ "'", str58.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str59.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + ""+ "'", str60.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "Invalid flag provided."+ "'", str61.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "Invalid flag provided."+ "'", str66.equals("Invalid flag provided."));

  }

  @Test
  public void test017() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test017"); }


    sg.edu.nus.comp.cs4218.misc.MergeSort mergeSort1 = new sg.edu.nus.comp.cs4218.misc.MergeSort(false);
    java.lang.String str3 = mergeSort1.extractFirstNumberWordFromLine("");
    int i5 = mergeSort1.getRank('!');
    int i8 = mergeSort1.compareIncludeNumOrder("File output redirection and pipe operator cannot be used side by side.", "\r\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + ""+ "'", str3.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);

  }

  @Test
  public void test018() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test018"); }


    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str3 = sg.edu.nus.comp.cs4218.misc.ExpressionEvaluator.calculateRelation("/", "&&", "hi!");
      org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
    } catch (java.lang.NumberFormatException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NumberFormatException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test019() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test019"); }


    sg.edu.nus.comp.cs4218.impl.GlobFinder globFinder2 = new sg.edu.nus.comp.cs4218.impl.GlobFinder("Missing arg for pipe command.", "Missing arg for pipe command.");
    java.nio.file.Path path3 = null;
    java.nio.file.attribute.BasicFileAttributes basicFileAttributes4 = null;
    java.nio.file.FileVisitResult fileVisitResult5 = globFinder2.preVisitDirectory(path3, basicFileAttributes4);
    java.io.IOException iOException7 = null;
    java.nio.file.FileVisitResult fileVisitResult8 = globFinder2.postVisitDirectory((java.lang.Object)100, iOException7);
    java.nio.file.Path path9 = null;
    java.nio.file.attribute.BasicFileAttributes basicFileAttributes10 = null;
    java.nio.file.FileVisitResult fileVisitResult11 = globFinder2.visitFile(path9, basicFileAttributes10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fileVisitResult5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fileVisitResult8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fileVisitResult11);

  }

  @Test
  public void test020() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test020"); }


    sg.edu.nus.comp.cs4218.misc.MergeSort mergeSort1 = new sg.edu.nus.comp.cs4218.misc.MergeSort(false);
    java.lang.String str3 = mergeSort1.extractFirstNumberWordFromLine("=");
    int i6 = mergeSort1.customCompare("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n", "");
    int i9 = mergeSort1.customCompare("bc: Unknown character detected I", ".");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + ""+ "'", str3.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);

  }

  @Test
  public void test021() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test021"); }


    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str3 = sg.edu.nus.comp.cs4218.misc.ExpressionEvaluator.calculateRelation("$", "Invalid app.", "*");
      org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
    } catch (java.lang.NumberFormatException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NumberFormatException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test022() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test022"); }


    sg.edu.nus.comp.cs4218.impl.cmd.SequenceCommand sequenceCommand1 = new sg.edu.nus.comp.cs4218.impl.cmd.SequenceCommand("|");
    sequenceCommand1.terminate();
    sequenceCommand1.terminate();

  }

  @Test
  public void test023() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test023"); }


    java.io.OutputStream outputStream1 = sg.edu.nus.comp.cs4218.impl.ShellImpl.openOutputRedir("hi!");
    sg.edu.nus.comp.cs4218.impl.app.EchoApplication echoApplication2 = new sg.edu.nus.comp.cs4218.impl.app.EchoApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication3 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl4 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array6 = new java.lang.String[] { "" };
    java.lang.String str7 = shellImpl4.globFilesDirectories(str_array6);
    java.lang.String str8 = calApplication3.printCalForYear(str_array6);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl9 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array11 = new java.lang.String[] { "" };
    java.lang.String str12 = shellImpl9.globFilesDirectories(str_array11);
    boolean b13 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.isNumberCommandFormat(str_array11);
    java.lang.String str14 = calApplication3.printCalForMonthYearMondayFirst(str_array11);
    java.nio.file.Path path15 = null;
    java.lang.String[] str_array17 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.getFileContents(str_array11, path15, 4);
    java.io.InputStream inputStream18 = null;
    sg.edu.nus.comp.cs4218.impl.app.EchoApplication echoApplication19 = new sg.edu.nus.comp.cs4218.impl.app.EchoApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication20 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl21 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array23 = new java.lang.String[] { "" };
    java.lang.String str24 = shellImpl21.globFilesDirectories(str_array23);
    java.lang.String str25 = calApplication20.printCalForYear(str_array23);
    java.io.InputStream inputStream26 = null;
    java.io.OutputStream outputStream28 = sg.edu.nus.comp.cs4218.impl.ShellImpl.openOutputRedir("File output redirection and pipe operator cannot be used side by side.");
    echoApplication19.run(str_array23, inputStream26, outputStream28);
    echoApplication2.run(str_array17, inputStream18, outputStream28);
    sg.edu.nus.comp.cs4218.impl.ShellImpl.writeToStdout(outputStream1, outputStream28);
    sg.edu.nus.comp.cs4218.impl.ShellImpl.closeOutputStream(outputStream28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(outputStream1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "\r\n"+ "'", str7.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str8.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\r\n"+ "'", str12.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Invalid flag provided."+ "'", str14.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "\r\n"+ "'", str24.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str25.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(outputStream28);

  }

  @Test
  public void test024() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test024"); }


    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl3 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array5 = new java.lang.String[] { "" };
    java.lang.String str6 = shellImpl3.globFilesDirectories(str_array5);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl8 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array10 = new java.lang.String[] { "" };
    java.lang.String str11 = shellImpl8.globFilesDirectories(str_array10);
    java.lang.String str12 = calApplication7.printCalForYear(str_array10);
    java.lang.String str13 = shellImpl3.pipeTwoCommands(str_array10);
    java.lang.String str14 = calApplication2.printCalForYearMondayFirst(str_array10);
    java.nio.file.Path path15 = null;
    java.lang.String[] str_array17 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.getFileContents(str_array10, path15, 10);
    java.lang.String str18 = calApplication1.printCal(str_array17);
    java.nio.file.Path path19 = null;
    java.lang.String[] str_array21 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.getFileContents(str_array17, path19, 1);
    java.util.List list22 = sg.edu.nus.comp.cs4218.misc.SortHelper.separateBasedOnType(28, str_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\r\n"+ "'", str6.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "\r\n"+ "'", str11.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str12.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + ""+ "'", str13.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Invalid flag provided."+ "'", str14.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "     March 2016     \r\nSu Mo Tu We Th Fr Sa\r\n       1  2  3  4  5\r\n 6  7  8  9 10 11 12\r\n13 14 15 16 17 18 19\r\n20 21 22 23 24 25 26\r\n27 28 29 30 31\r\n"+ "'", str18.equals("     March 2016     \r\nSu Mo Tu We Th Fr Sa\r\n       1  2  3  4  5\r\n 6  7  8  9 10 11 12\r\n13 14 15 16 17 18 19\r\n20 21 22 23 24 25 26\r\n27 28 29 30 31\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list22);

  }

  @Test
  public void test025() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test025"); }


    sg.edu.nus.comp.cs4218.misc.MergeSort mergeSort1 = new sg.edu.nus.comp.cs4218.misc.MergeSort(false);
    int i4 = mergeSort1.compareIncludeNumOrder("/", "<");
    int i7 = mergeSort1.compareIncludeNumOrder("-hi!", "File output redirection and pipe operator cannot be used side by side.");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-13));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));

  }

  @Test
  public void test026() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test026"); }


    sg.edu.nus.comp.cs4218.misc.MergeSort mergeSort1 = new sg.edu.nus.comp.cs4218.misc.MergeSort(false);
    int i3 = mergeSort1.getRank('>');
    int i6 = mergeSort1.customCompare("==", "\r\n");
    int i9 = mergeSort1.compareIncludeNumOrder("", "^");
    int i11 = mergeSort1.getRank('<');
    int i13 = mergeSort1.getRank(' ');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 4);

  }

  @Test
  public void test027() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test027"); }


    java.io.OutputStream outputStream1 = sg.edu.nus.comp.cs4218.impl.ShellImpl.openOutputRedir("hi!");
    // The following exception was thrown during execution in test generation
    try {
      java.io.InputStream inputStream2 = sg.edu.nus.comp.cs4218.impl.ShellImpl.outputStreamToInputStream(outputStream1);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(outputStream1);

  }

  @Test
  public void test028() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test028"); }


    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication0 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl1 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl2 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl3 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array5 = new java.lang.String[] { "" };
    java.lang.String str6 = shellImpl3.globFilesDirectories(str_array5);
    java.lang.String str7 = shellImpl2.pipeWithException(str_array5);
    java.lang.String str8 = shellImpl1.globFilesDirectories(str_array5);
    java.lang.String str9 = bcApplication0.number(str_array5);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl10 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array12 = new java.lang.String[] { "" };
    java.lang.String str13 = shellImpl10.globFilesDirectories(str_array12);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication14 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl15 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array17 = new java.lang.String[] { "" };
    java.lang.String str18 = shellImpl15.globFilesDirectories(str_array17);
    java.lang.String str19 = calApplication14.printCalForYear(str_array17);
    java.lang.String str20 = shellImpl10.pipeTwoCommands(str_array17);
    java.lang.String str21 = bcApplication0.number(str_array17);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication22 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl23 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array25 = new java.lang.String[] { "" };
    java.lang.String str26 = shellImpl23.globFilesDirectories(str_array25);
    java.lang.String str27 = calApplication22.printCalForYear(str_array25);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication28 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl29 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array31 = new java.lang.String[] { "" };
    java.lang.String str32 = shellImpl29.globFilesDirectories(str_array31);
    java.lang.String str33 = calApplication28.printCalForYear(str_array31);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl34 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array36 = new java.lang.String[] { "" };
    java.lang.String str37 = shellImpl34.globFilesDirectories(str_array36);
    boolean b38 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.isNumberCommandFormat(str_array36);
    java.lang.String str39 = calApplication28.printCalForMonthYearMondayFirst(str_array36);
    java.nio.file.Path path40 = null;
    java.lang.String[] str_array42 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.getFileContents(str_array36, path40, 4);
    java.lang.String str43 = calApplication22.printCal(str_array36);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl44 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication45 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl46 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array48 = new java.lang.String[] { "" };
    java.lang.String str49 = shellImpl46.globFilesDirectories(str_array48);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication50 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl51 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array53 = new java.lang.String[] { "" };
    java.lang.String str54 = shellImpl51.globFilesDirectories(str_array53);
    java.lang.String str55 = calApplication50.printCalForYear(str_array53);
    java.lang.String str56 = shellImpl46.pipeTwoCommands(str_array53);
    java.lang.String str57 = calApplication45.printCalForYearMondayFirst(str_array53);
    java.nio.file.Path path58 = null;
    java.lang.String[] str_array60 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.getFileContents(str_array53, path58, 10);
    java.lang.String str61 = shellImpl44.globMultiLevel(str_array60);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl62 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array64 = new java.lang.String[] { "" };
    java.lang.String str65 = shellImpl62.globFilesDirectories(str_array64);
    java.lang.String str66 = shellImpl44.pipeTwoCommands(str_array64);
    sg.edu.nus.comp.cs4218.impl.cmd.CallCommand callCommand67 = new sg.edu.nus.comp.cs4218.impl.cmd.CallCommand();
    java.lang.String str68 = callCommand67.getInputStreamS();
    callCommand67.terminate();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication70 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl71 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array73 = new java.lang.String[] { "" };
    java.lang.String str74 = shellImpl71.globFilesDirectories(str_array73);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication75 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl76 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array78 = new java.lang.String[] { "" };
    java.lang.String str79 = shellImpl76.globFilesDirectories(str_array78);
    java.lang.String str80 = calApplication75.printCalForYear(str_array78);
    java.lang.String str81 = shellImpl71.pipeTwoCommands(str_array78);
    java.lang.String str82 = calApplication70.printCalForYearMondayFirst(str_array78);
    java.nio.file.Path path83 = null;
    java.lang.String[] str_array85 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.getFileContents(str_array78, path83, 10);
    java.lang.String[] str_array86 = callCommand67.evaluateGlob(str_array85);
    java.lang.String str87 = shellImpl44.globOneFile(str_array86);
    java.lang.String str88 = calApplication22.printCal(str_array86);
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str89 = bcApplication0.not(str_array86);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\r\n"+ "'", str6.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + ""+ "'", str7.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\r\n"+ "'", str8.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "1"+ "'", str9.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "\r\n"+ "'", str13.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "\r\n"+ "'", str18.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str19.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + ""+ "'", str20.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "1"+ "'", str21.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "\r\n"+ "'", str26.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str27.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "\r\n"+ "'", str32.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str33.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "\r\n"+ "'", str37.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "Invalid flag provided."+ "'", str39.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "     March 2016     \r\nSu Mo Tu We Th Fr Sa\r\n       1  2  3  4  5\r\n 6  7  8  9 10 11 12\r\n13 14 15 16 17 18 19\r\n20 21 22 23 24 25 26\r\n27 28 29 30 31\r\n"+ "'", str43.equals("     March 2016     \r\nSu Mo Tu We Th Fr Sa\r\n       1  2  3  4  5\r\n 6  7  8  9 10 11 12\r\n13 14 15 16 17 18 19\r\n20 21 22 23 24 25 26\r\n27 28 29 30 31\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "\r\n"+ "'", str49.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "\r\n"+ "'", str54.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str55.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + ""+ "'", str56.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "Invalid flag provided."+ "'", str57.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + ""+ "'", str61.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "\r\n"+ "'", str65.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + ""+ "'", str66.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str68 + "' != '" + ""+ "'", str68.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str74 + "' != '" + "\r\n"+ "'", str74.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str79 + "' != '" + "\r\n"+ "'", str79.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str80 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str80.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str81 + "' != '" + ""+ "'", str81.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str82 + "' != '" + "Invalid flag provided."+ "'", str82.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str87 + "' != '" + ""+ "'", str87.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str88 + "' != '" + "     March 2016     \r\nSu Mo Tu We Th Fr Sa\r\n       1  2  3  4  5\r\n 6  7  8  9 10 11 12\r\n13 14 15 16 17 18 19\r\n20 21 22 23 24 25 26\r\n27 28 29 30 31\r\n"+ "'", str88.equals("     March 2016     \r\nSu Mo Tu We Th Fr Sa\r\n       1  2  3  4  5\r\n 6  7  8  9 10 11 12\r\n13 14 15 16 17 18 19\r\n20 21 22 23 24 25 26\r\n27 28 29 30 31\r\n"));

  }

  @Test
  public void test029() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test029"); }


    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl1 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl3 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array5 = new java.lang.String[] { "" };
    java.lang.String str6 = shellImpl3.globFilesDirectories(str_array5);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl8 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array10 = new java.lang.String[] { "" };
    java.lang.String str11 = shellImpl8.globFilesDirectories(str_array10);
    java.lang.String str12 = calApplication7.printCalForYear(str_array10);
    java.lang.String str13 = shellImpl3.pipeTwoCommands(str_array10);
    java.lang.String str14 = calApplication2.printCalForYearMondayFirst(str_array10);
    java.nio.file.Path path15 = null;
    java.lang.String[] str_array17 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.getFileContents(str_array10, path15, 10);
    java.lang.String str18 = shellImpl1.globMultiLevel(str_array17);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl19 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl20 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array22 = new java.lang.String[] { "" };
    java.lang.String str23 = shellImpl20.globFilesDirectories(str_array22);
    java.lang.String str24 = shellImpl19.pipeWithException(str_array22);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl25 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array27 = new java.lang.String[] { "" };
    java.lang.String str28 = shellImpl25.globFilesDirectories(str_array27);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl29 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl30 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array32 = new java.lang.String[] { "" };
    java.lang.String str33 = shellImpl30.globFilesDirectories(str_array32);
    java.lang.String str34 = shellImpl29.pipeWithException(str_array32);
    java.lang.String str35 = shellImpl25.globNoPaths(str_array32);
    java.lang.String str36 = shellImpl19.globNoPaths(str_array32);
    java.lang.String str37 = shellImpl1.globFilesDirectories(str_array32);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication38 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl39 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array41 = new java.lang.String[] { "" };
    java.lang.String str42 = shellImpl39.globFilesDirectories(str_array41);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication43 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl44 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array46 = new java.lang.String[] { "" };
    java.lang.String str47 = shellImpl44.globFilesDirectories(str_array46);
    java.lang.String str48 = calApplication43.printCalForYear(str_array46);
    java.lang.String str49 = shellImpl39.pipeTwoCommands(str_array46);
    java.lang.String str50 = calApplication38.printCalForYearMondayFirst(str_array46);
    java.nio.file.Path path51 = null;
    java.lang.String[] str_array53 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.getFileContents(str_array46, path51, 10);
    java.lang.String str54 = shellImpl1.globOneFile(str_array53);
    java.util.List list55 = sortApplication0.sortNumbersSpecialChars(str_array53);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl56 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl57 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array59 = new java.lang.String[] { "" };
    java.lang.String str60 = shellImpl57.globFilesDirectories(str_array59);
    java.lang.String str61 = shellImpl56.pipeWithException(str_array59);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl62 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array64 = new java.lang.String[] { "" };
    java.lang.String str65 = shellImpl62.globFilesDirectories(str_array64);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl66 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl67 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array69 = new java.lang.String[] { "" };
    java.lang.String str70 = shellImpl67.globFilesDirectories(str_array69);
    java.lang.String str71 = shellImpl66.pipeWithException(str_array69);
    java.lang.String str72 = shellImpl62.globNoPaths(str_array69);
    java.lang.String str73 = shellImpl56.globNoPaths(str_array69);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl74 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl75 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl76 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array78 = new java.lang.String[] { "" };
    java.lang.String str79 = shellImpl76.globFilesDirectories(str_array78);
    java.lang.String str80 = shellImpl75.pipeWithException(str_array78);
    java.lang.String str81 = shellImpl74.globFilesDirectories(str_array78);
    java.lang.String str82 = shellImpl56.globNoPaths(str_array78);
    java.util.List list83 = sortApplication0.sortSimpleNumbersWithNumFlagOn(str_array78);
    java.lang.String[] str_array84 = null;
    // The following exception was thrown during execution in test generation
    try {
      java.util.List list85 = sortApplication0.sortSimpleNumbersWithNumFlagOn(str_array84);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\r\n"+ "'", str6.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "\r\n"+ "'", str11.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str12.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + ""+ "'", str13.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Invalid flag provided."+ "'", str14.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + ""+ "'", str18.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "\r\n"+ "'", str23.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + ""+ "'", str24.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "\r\n"+ "'", str28.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "\r\n"+ "'", str33.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + ""+ "'", str34.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + ""+ "'", str35.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + ""+ "'", str36.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "\r\n"+ "'", str37.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "\r\n"+ "'", str42.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "\r\n"+ "'", str47.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str48.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + ""+ "'", str49.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "Invalid flag provided."+ "'", str50.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + ""+ "'", str54.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "\r\n"+ "'", str60.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + ""+ "'", str61.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "\r\n"+ "'", str65.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str70 + "' != '" + "\r\n"+ "'", str70.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str71 + "' != '" + ""+ "'", str71.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str72 + "' != '" + ""+ "'", str72.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str73 + "' != '" + ""+ "'", str73.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str79 + "' != '" + "\r\n"+ "'", str79.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str80 + "' != '" + ""+ "'", str80.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str81 + "' != '" + "\r\n"+ "'", str81.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str82 + "' != '" + ""+ "'", str82.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list83);

  }

  @Test
  public void test030() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test030"); }


    sg.edu.nus.comp.cs4218.impl.app.HeadApplication headApplication0 = new sg.edu.nus.comp.cs4218.impl.app.HeadApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl3 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array5 = new java.lang.String[] { "" };
    java.lang.String str6 = shellImpl3.globFilesDirectories(str_array5);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl8 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array10 = new java.lang.String[] { "" };
    java.lang.String str11 = shellImpl8.globFilesDirectories(str_array10);
    java.lang.String str12 = calApplication7.printCalForYear(str_array10);
    java.lang.String str13 = shellImpl3.pipeTwoCommands(str_array10);
    java.lang.String str14 = calApplication2.printCalForYearMondayFirst(str_array10);
    java.nio.file.Path path15 = null;
    java.lang.String[] str_array17 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.getFileContents(str_array10, path15, 10);
    java.lang.String str18 = calApplication1.printCal(str_array17);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication19 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication20 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl21 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array23 = new java.lang.String[] { "" };
    java.lang.String str24 = shellImpl21.globFilesDirectories(str_array23);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication25 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl26 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array28 = new java.lang.String[] { "" };
    java.lang.String str29 = shellImpl26.globFilesDirectories(str_array28);
    java.lang.String str30 = calApplication25.printCalForYear(str_array28);
    java.lang.String str31 = shellImpl21.pipeTwoCommands(str_array28);
    java.lang.String str32 = calApplication20.printCalForYearMondayFirst(str_array28);
    java.nio.file.Path path33 = null;
    java.lang.String[] str_array35 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.getFileContents(str_array28, path33, 10);
    java.lang.String str36 = calApplication19.printCal(str_array35);
    java.lang.String str37 = calApplication1.printCal(str_array35);
    sg.edu.nus.comp.cs4218.impl.cmd.CallCommand callCommand38 = new sg.edu.nus.comp.cs4218.impl.cmd.CallCommand();
    java.lang.String str39 = callCommand38.getInputStreamS();
    callCommand38.terminate();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication41 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl42 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array44 = new java.lang.String[] { "" };
    java.lang.String str45 = shellImpl42.globFilesDirectories(str_array44);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication46 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl47 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array49 = new java.lang.String[] { "" };
    java.lang.String str50 = shellImpl47.globFilesDirectories(str_array49);
    java.lang.String str51 = calApplication46.printCalForYear(str_array49);
    java.lang.String str52 = shellImpl42.pipeTwoCommands(str_array49);
    java.lang.String str53 = calApplication41.printCalForYearMondayFirst(str_array49);
    java.nio.file.Path path54 = null;
    java.lang.String[] str_array56 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.getFileContents(str_array49, path54, 10);
    java.lang.String[] str_array57 = callCommand38.evaluateGlob(str_array56);
    java.lang.String str58 = calApplication1.printCal(str_array56);
    java.io.InputStream inputStream59 = null;
    java.io.OutputStream outputStream60 = null;
    // The following exception was thrown during execution in test generation
    try {
      headApplication0.run(str_array56, inputStream59, outputStream60);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.HeadException");
    } catch (sg.edu.nus.comp.cs4218.exception.HeadException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.HeadException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.HeadException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\r\n"+ "'", str6.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "\r\n"+ "'", str11.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str12.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + ""+ "'", str13.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Invalid flag provided."+ "'", str14.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "     March 2016     \r\nSu Mo Tu We Th Fr Sa\r\n       1  2  3  4  5\r\n 6  7  8  9 10 11 12\r\n13 14 15 16 17 18 19\r\n20 21 22 23 24 25 26\r\n27 28 29 30 31\r\n"+ "'", str18.equals("     March 2016     \r\nSu Mo Tu We Th Fr Sa\r\n       1  2  3  4  5\r\n 6  7  8  9 10 11 12\r\n13 14 15 16 17 18 19\r\n20 21 22 23 24 25 26\r\n27 28 29 30 31\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "\r\n"+ "'", str24.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "\r\n"+ "'", str29.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str30.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + ""+ "'", str31.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "Invalid flag provided."+ "'", str32.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "     March 2016     \r\nSu Mo Tu We Th Fr Sa\r\n       1  2  3  4  5\r\n 6  7  8  9 10 11 12\r\n13 14 15 16 17 18 19\r\n20 21 22 23 24 25 26\r\n27 28 29 30 31\r\n"+ "'", str36.equals("     March 2016     \r\nSu Mo Tu We Th Fr Sa\r\n       1  2  3  4  5\r\n 6  7  8  9 10 11 12\r\n13 14 15 16 17 18 19\r\n20 21 22 23 24 25 26\r\n27 28 29 30 31\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "     March 2016     \r\nSu Mo Tu We Th Fr Sa\r\n       1  2  3  4  5\r\n 6  7  8  9 10 11 12\r\n13 14 15 16 17 18 19\r\n20 21 22 23 24 25 26\r\n27 28 29 30 31\r\n"+ "'", str37.equals("     March 2016     \r\nSu Mo Tu We Th Fr Sa\r\n       1  2  3  4  5\r\n 6  7  8  9 10 11 12\r\n13 14 15 16 17 18 19\r\n20 21 22 23 24 25 26\r\n27 28 29 30 31\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + ""+ "'", str39.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "\r\n"+ "'", str45.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "\r\n"+ "'", str50.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str51.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + ""+ "'", str52.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "Invalid flag provided."+ "'", str53.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "     March 2016     \r\nSu Mo Tu We Th Fr Sa\r\n       1  2  3  4  5\r\n 6  7  8  9 10 11 12\r\n13 14 15 16 17 18 19\r\n20 21 22 23 24 25 26\r\n27 28 29 30 31\r\n"+ "'", str58.equals("     March 2016     \r\nSu Mo Tu We Th Fr Sa\r\n       1  2  3  4  5\r\n 6  7  8  9 10 11 12\r\n13 14 15 16 17 18 19\r\n20 21 22 23 24 25 26\r\n27 28 29 30 31\r\n"));

  }

  @Test
  public void test031() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test031"); }


    sg.edu.nus.comp.cs4218.impl.GlobFinder globFinder2 = new sg.edu.nus.comp.cs4218.impl.GlobFinder("Missing arg for pipe command.", "Missing arg for pipe command.");
    java.nio.file.Path path3 = null;
    java.nio.file.attribute.BasicFileAttributes basicFileAttributes4 = null;
    java.nio.file.FileVisitResult fileVisitResult5 = globFinder2.preVisitDirectory(path3, basicFileAttributes4);
    java.io.IOException iOException7 = null;
    java.nio.file.FileVisitResult fileVisitResult8 = globFinder2.postVisitDirectory((java.lang.Object)100, iOException7);
    java.nio.file.Path path9 = null;
    java.nio.file.attribute.BasicFileAttributes basicFileAttributes10 = null;
    java.nio.file.FileVisitResult fileVisitResult11 = globFinder2.preVisitDirectory(path9, basicFileAttributes10);
    java.nio.file.Path path12 = null;
    java.nio.file.attribute.BasicFileAttributes basicFileAttributes13 = null;
    java.nio.file.FileVisitResult fileVisitResult14 = globFinder2.visitFile(path12, basicFileAttributes13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fileVisitResult5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fileVisitResult8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fileVisitResult11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fileVisitResult14);

  }

  @Test
  public void test032() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test032"); }


    sg.edu.nus.comp.cs4218.impl.cmd.SequenceCommand sequenceCommand1 = new sg.edu.nus.comp.cs4218.impl.cmd.SequenceCommand("-");
    sequenceCommand1.terminate();
    sequenceCommand1.terminate();
    sequenceCommand1.terminate();
    // The following exception was thrown during execution in test generation
    try {
      sequenceCommand1.parse();
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.ShellException");
    } catch (sg.edu.nus.comp.cs4218.exception.ShellException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.ShellException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.ShellException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test033() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test033"); }


    sg.edu.nus.comp.cs4218.impl.cmd.CallCommand callCommand0 = new sg.edu.nus.comp.cs4218.impl.cmd.CallCommand();
    java.lang.String str1 = callCommand0.getInputStreamS();
    java.util.Vector vector4 = sg.edu.nus.comp.cs4218.misc.ExpressionEvaluator.infixToPostfix("/");
    int i6 = callCommand0.extractInputRedir("\r\n", vector4, 2);
    callCommand0.parse();
    callCommand0.terminate();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + ""+ "'", str1.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(vector4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);

  }

  @Test
  public void test034() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test034"); }


    sg.edu.nus.comp.cs4218.misc.MergeSort mergeSort1 = new sg.edu.nus.comp.cs4218.misc.MergeSort(false);
    int i3 = mergeSort1.getRank('>');
    int i6 = mergeSort1.customCompare("==", "\r\n");
    int i9 = mergeSort1.compareIncludeNumOrder("", "^");
    int i11 = mergeSort1.getRank('<');
    int i13 = mergeSort1.getRank('#');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 4);

  }

  @Test
  public void test035() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test035"); }


    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array2 = new java.lang.String[] { "-0" };
    java.lang.String str3 = calApplication0.printCalForYearMondayFirst(str_array2);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication5 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication6 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl7 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array9 = new java.lang.String[] { "" };
    java.lang.String str10 = shellImpl7.globFilesDirectories(str_array9);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication11 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl12 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array14 = new java.lang.String[] { "" };
    java.lang.String str15 = shellImpl12.globFilesDirectories(str_array14);
    java.lang.String str16 = calApplication11.printCalForYear(str_array14);
    java.lang.String str17 = shellImpl7.pipeTwoCommands(str_array14);
    java.lang.String str18 = calApplication6.printCalForYearMondayFirst(str_array14);
    java.nio.file.Path path19 = null;
    java.lang.String[] str_array21 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.getFileContents(str_array14, path19, 10);
    java.lang.String str22 = calApplication5.printCal(str_array21);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication23 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication24 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl25 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array27 = new java.lang.String[] { "" };
    java.lang.String str28 = shellImpl25.globFilesDirectories(str_array27);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication29 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl30 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array32 = new java.lang.String[] { "" };
    java.lang.String str33 = shellImpl30.globFilesDirectories(str_array32);
    java.lang.String str34 = calApplication29.printCalForYear(str_array32);
    java.lang.String str35 = shellImpl25.pipeTwoCommands(str_array32);
    java.lang.String str36 = calApplication24.printCalForYearMondayFirst(str_array32);
    java.nio.file.Path path37 = null;
    java.lang.String[] str_array39 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.getFileContents(str_array32, path37, 10);
    java.lang.String str40 = calApplication23.printCal(str_array39);
    java.lang.String str41 = calApplication5.printCal(str_array39);
    java.util.List list42 = sg.edu.nus.comp.cs4218.misc.SortHelper.separateBasedOnType((-13), str_array39);
    java.lang.String[] str_array43 = sg.edu.nus.comp.cs4218.impl.ShellImpl.processBQ(str_array39);
    java.lang.String str44 = calApplication0.printCalForYearMondayFirst(str_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Invalid flag provided."+ "'", str3.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\r\n"+ "'", str10.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "\r\n"+ "'", str15.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str16.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + ""+ "'", str17.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "Invalid flag provided."+ "'", str18.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "     March 2016     \r\nSu Mo Tu We Th Fr Sa\r\n       1  2  3  4  5\r\n 6  7  8  9 10 11 12\r\n13 14 15 16 17 18 19\r\n20 21 22 23 24 25 26\r\n27 28 29 30 31\r\n"+ "'", str22.equals("     March 2016     \r\nSu Mo Tu We Th Fr Sa\r\n       1  2  3  4  5\r\n 6  7  8  9 10 11 12\r\n13 14 15 16 17 18 19\r\n20 21 22 23 24 25 26\r\n27 28 29 30 31\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "\r\n"+ "'", str28.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "\r\n"+ "'", str33.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str34.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + ""+ "'", str35.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "Invalid flag provided."+ "'", str36.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "     March 2016     \r\nSu Mo Tu We Th Fr Sa\r\n       1  2  3  4  5\r\n 6  7  8  9 10 11 12\r\n13 14 15 16 17 18 19\r\n20 21 22 23 24 25 26\r\n27 28 29 30 31\r\n"+ "'", str40.equals("     March 2016     \r\nSu Mo Tu We Th Fr Sa\r\n       1  2  3  4  5\r\n 6  7  8  9 10 11 12\r\n13 14 15 16 17 18 19\r\n20 21 22 23 24 25 26\r\n27 28 29 30 31\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "     March 2016     \r\nSu Mo Tu We Th Fr Sa\r\n       1  2  3  4  5\r\n 6  7  8  9 10 11 12\r\n13 14 15 16 17 18 19\r\n20 21 22 23 24 25 26\r\n27 28 29 30 31\r\n"+ "'", str41.equals("     March 2016     \r\nSu Mo Tu We Th Fr Sa\r\n       1  2  3  4  5\r\n 6  7  8  9 10 11 12\r\n13 14 15 16 17 18 19\r\n20 21 22 23 24 25 26\r\n27 28 29 30 31\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "Invalid flag provided."+ "'", str44.equals("Invalid flag provided."));

  }

  @Test
  public void test036() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test036"); }


    sg.edu.nus.comp.cs4218.impl.cmd.CallCommand callCommand1 = new sg.edu.nus.comp.cs4218.impl.cmd.CallCommand("<");
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl2 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array4 = new java.lang.String[] { "" };
    java.lang.String str5 = shellImpl2.globFilesDirectories(str_array4);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl6 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl7 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array9 = new java.lang.String[] { "" };
    java.lang.String str10 = shellImpl7.globFilesDirectories(str_array9);
    java.lang.String str11 = shellImpl6.pipeWithException(str_array9);
    java.lang.String str12 = shellImpl2.globNoPaths(str_array9);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl13 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array15 = new java.lang.String[] { "" };
    java.lang.String str16 = shellImpl13.globFilesDirectories(str_array15);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication17 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl18 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array20 = new java.lang.String[] { "" };
    java.lang.String str21 = shellImpl18.globFilesDirectories(str_array20);
    java.lang.String str22 = calApplication17.printCalForYear(str_array20);
    java.lang.String str23 = shellImpl13.pipeTwoCommands(str_array20);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication24 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication25 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl26 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array28 = new java.lang.String[] { "" };
    java.lang.String str29 = shellImpl26.globFilesDirectories(str_array28);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication30 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl31 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array33 = new java.lang.String[] { "" };
    java.lang.String str34 = shellImpl31.globFilesDirectories(str_array33);
    java.lang.String str35 = calApplication30.printCalForYear(str_array33);
    java.lang.String str36 = shellImpl26.pipeTwoCommands(str_array33);
    java.lang.String str37 = calApplication25.printCalForYearMondayFirst(str_array33);
    java.nio.file.Path path38 = null;
    java.lang.String[] str_array40 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.getFileContents(str_array33, path38, 10);
    java.lang.String str41 = calApplication24.printCal(str_array40);
    java.lang.String str42 = shellImpl13.globOneFile(str_array40);
    java.lang.String str43 = shellImpl2.globNoPaths(str_array40);
    java.lang.String[] str_array44 = callCommand1.evaluateGlob(str_array40);
    java.io.InputStream inputStream45 = null;
    java.io.OutputStream outputStream47 = sg.edu.nus.comp.cs4218.impl.ShellImpl.openOutputRedir("&&");
    // The following exception was thrown during execution in test generation
    try {
      callCommand1.evaluate(inputStream45, outputStream47);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.ShellException");
    } catch (sg.edu.nus.comp.cs4218.exception.ShellException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.ShellException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.ShellException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "\r\n"+ "'", str5.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\r\n"+ "'", str10.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + ""+ "'", str11.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + ""+ "'", str12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\r\n"+ "'", str16.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "\r\n"+ "'", str21.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str22.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + ""+ "'", str23.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "\r\n"+ "'", str29.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "\r\n"+ "'", str34.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str35.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + ""+ "'", str36.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "Invalid flag provided."+ "'", str37.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "     March 2016     \r\nSu Mo Tu We Th Fr Sa\r\n       1  2  3  4  5\r\n 6  7  8  9 10 11 12\r\n13 14 15 16 17 18 19\r\n20 21 22 23 24 25 26\r\n27 28 29 30 31\r\n"+ "'", str41.equals("     March 2016     \r\nSu Mo Tu We Th Fr Sa\r\n       1  2  3  4  5\r\n 6  7  8  9 10 11 12\r\n13 14 15 16 17 18 19\r\n20 21 22 23 24 25 26\r\n27 28 29 30 31\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + ""+ "'", str42.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + ""+ "'", str43.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(outputStream47);

  }

  @Test
  public void test037() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test037"); }


    sg.edu.nus.comp.cs4218.impl.cmd.PipeCommand pipeCommand1 = new sg.edu.nus.comp.cs4218.impl.cmd.PipeCommand("");

  }

  @Test
  public void test038() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test038"); }


    sg.edu.nus.comp.cs4218.impl.cmd.CallCommand callCommand1 = new sg.edu.nus.comp.cs4218.impl.cmd.CallCommand("||");
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl2 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array4 = new java.lang.String[] { "" };
    java.lang.String str5 = shellImpl2.globFilesDirectories(str_array4);
    java.lang.String[] str_array6 = callCommand1.evaluateGlob(str_array4);
    java.io.InputStream inputStream7 = null;
    java.io.OutputStream outputStream9 = sg.edu.nus.comp.cs4218.impl.ShellImpl.openOutputRedir("File output redirection and pipe operator cannot be used side by side.");
    sg.edu.nus.comp.cs4218.impl.app.EchoApplication echoApplication10 = new sg.edu.nus.comp.cs4218.impl.app.EchoApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication11 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl12 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array14 = new java.lang.String[] { "" };
    java.lang.String str15 = shellImpl12.globFilesDirectories(str_array14);
    java.lang.String str16 = calApplication11.printCalForYear(str_array14);
    java.io.InputStream inputStream17 = null;
    java.io.OutputStream outputStream19 = sg.edu.nus.comp.cs4218.impl.ShellImpl.openOutputRedir("File output redirection and pipe operator cannot be used side by side.");
    echoApplication10.run(str_array14, inputStream17, outputStream19);
    sg.edu.nus.comp.cs4218.impl.ShellImpl.writeToStdout(outputStream9, outputStream19);
    // The following exception was thrown during execution in test generation
    try {
      callCommand1.evaluate(inputStream7, outputStream19);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.ShellException");
    } catch (sg.edu.nus.comp.cs4218.exception.ShellException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.ShellException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.ShellException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "\r\n"+ "'", str5.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(outputStream9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "\r\n"+ "'", str15.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str16.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(outputStream19);

  }

  @Test
  public void test039() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test039"); }


    java.util.Vector vector1 = sg.edu.nus.comp.cs4218.misc.ExpressionEvaluator.splitSeparateStrings("-");
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str2 = sg.edu.nus.comp.cs4218.misc.ExpressionEvaluator.computeResult(vector1);
      org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException");
    } catch (java.util.EmptyStackException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.util.EmptyStackException")) {
        org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(vector1);

  }

  @Test
  public void test040() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test040"); }


    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl0 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array2 = new java.lang.String[] { "" };
    java.lang.String str3 = shellImpl0.globFilesDirectories(str_array2);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl4 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl5 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array7 = new java.lang.String[] { "" };
    java.lang.String str8 = shellImpl5.globFilesDirectories(str_array7);
    java.lang.String str9 = shellImpl4.pipeWithException(str_array7);
    java.lang.String[] str_array10 = sg.edu.nus.comp.cs4218.impl.ShellImpl.processBQ(str_array7);
    java.lang.String str11 = shellImpl0.pipeWithException(str_array10);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl12 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication13 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl14 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array16 = new java.lang.String[] { "" };
    java.lang.String str17 = shellImpl14.globFilesDirectories(str_array16);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication18 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl19 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array21 = new java.lang.String[] { "" };
    java.lang.String str22 = shellImpl19.globFilesDirectories(str_array21);
    java.lang.String str23 = calApplication18.printCalForYear(str_array21);
    java.lang.String str24 = shellImpl14.pipeTwoCommands(str_array21);
    java.lang.String str25 = calApplication13.printCalForYearMondayFirst(str_array21);
    java.nio.file.Path path26 = null;
    java.lang.String[] str_array28 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.getFileContents(str_array21, path26, 10);
    java.lang.String str29 = shellImpl12.globMultiLevel(str_array28);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl30 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array32 = new java.lang.String[] { "" };
    java.lang.String str33 = shellImpl30.globFilesDirectories(str_array32);
    java.lang.String str34 = shellImpl12.pipeTwoCommands(str_array32);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl35 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl36 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array38 = new java.lang.String[] { "" };
    java.lang.String str39 = shellImpl36.globFilesDirectories(str_array38);
    java.lang.String str40 = shellImpl35.pipeWithException(str_array38);
    java.lang.String[] str_array41 = sg.edu.nus.comp.cs4218.impl.ShellImpl.processBQ(str_array38);
    java.lang.String str42 = shellImpl12.globOneFile(str_array41);
    java.nio.file.Path path43 = null;
    java.lang.String[] str_array45 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.getFileContents(str_array41, path43, 5);
    java.lang.String str46 = shellImpl0.globNoPaths(str_array45);
    java.io.OutputStream outputStream48 = null;
    // The following exception was thrown during execution in test generation
    try {
      shellImpl0.parseAndEvaluate("-hi!", outputStream48);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.ShellException");
    } catch (sg.edu.nus.comp.cs4218.exception.ShellException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.ShellException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.ShellException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "\r\n"+ "'", str3.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\r\n"+ "'", str8.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + ""+ "'", str11.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "\r\n"+ "'", str17.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "\r\n"+ "'", str22.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str23.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + ""+ "'", str24.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Invalid flag provided."+ "'", str25.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + ""+ "'", str29.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "\r\n"+ "'", str33.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + ""+ "'", str34.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "\r\n"+ "'", str39.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + ""+ "'", str40.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "\r\n"+ "'", str42.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + ""+ "'", str46.equals(""));

  }

  @Test
  public void test041() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test041"); }


    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl1 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array3 = new java.lang.String[] { "" };
    java.lang.String str4 = shellImpl1.globFilesDirectories(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication5 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl6 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array8 = new java.lang.String[] { "" };
    java.lang.String str9 = shellImpl6.globFilesDirectories(str_array8);
    java.lang.String str10 = calApplication5.printCalForYear(str_array8);
    java.lang.String str11 = shellImpl1.pipeTwoCommands(str_array8);
    java.lang.String str12 = calApplication0.printCalForYearMondayFirst(str_array8);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl13 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array15 = new java.lang.String[] { "" };
    java.lang.String str16 = shellImpl13.globFilesDirectories(str_array15);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication17 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl18 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array20 = new java.lang.String[] { "" };
    java.lang.String str21 = shellImpl18.globFilesDirectories(str_array20);
    java.lang.String str22 = calApplication17.printCalForYear(str_array20);
    java.lang.String str23 = shellImpl13.pipeTwoCommands(str_array20);
    sg.edu.nus.comp.cs4218.impl.cmd.CallCommand callCommand24 = new sg.edu.nus.comp.cs4218.impl.cmd.CallCommand();
    java.lang.String str25 = callCommand24.getInputStreamS();
    callCommand24.terminate();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication27 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl28 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array30 = new java.lang.String[] { "" };
    java.lang.String str31 = shellImpl28.globFilesDirectories(str_array30);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication32 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl33 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array35 = new java.lang.String[] { "" };
    java.lang.String str36 = shellImpl33.globFilesDirectories(str_array35);
    java.lang.String str37 = calApplication32.printCalForYear(str_array35);
    java.lang.String str38 = shellImpl28.pipeTwoCommands(str_array35);
    java.lang.String str39 = calApplication27.printCalForYearMondayFirst(str_array35);
    java.nio.file.Path path40 = null;
    java.lang.String[] str_array42 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.getFileContents(str_array35, path40, 10);
    java.lang.String[] str_array43 = callCommand24.evaluateGlob(str_array35);
    java.lang.String str44 = shellImpl13.globMultiLevel(str_array35);
    java.lang.String str45 = calApplication0.printCal(str_array35);
    java.nio.file.Path path46 = null;
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String[] str_array48 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.getFileContents(str_array35, path46, (-30));
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\r\n"+ "'", str4.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "\r\n"+ "'", str9.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str10.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + ""+ "'", str11.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Invalid flag provided."+ "'", str12.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\r\n"+ "'", str16.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "\r\n"+ "'", str21.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str22.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + ""+ "'", str23.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + ""+ "'", str25.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "\r\n"+ "'", str31.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "\r\n"+ "'", str36.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str37.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + ""+ "'", str38.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "Invalid flag provided."+ "'", str39.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "\r\n"+ "'", str44.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "     March 2016     \r\nSu Mo Tu We Th Fr Sa\r\n       1  2  3  4  5\r\n 6  7  8  9 10 11 12\r\n13 14 15 16 17 18 19\r\n20 21 22 23 24 25 26\r\n27 28 29 30 31\r\n"+ "'", str45.equals("     March 2016     \r\nSu Mo Tu We Th Fr Sa\r\n       1  2  3  4  5\r\n 6  7  8  9 10 11 12\r\n13 14 15 16 17 18 19\r\n20 21 22 23 24 25 26\r\n27 28 29 30 31\r\n"));

  }

  @Test
  public void test042() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test042"); }


    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication0 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.EchoApplication echoApplication1 = new sg.edu.nus.comp.cs4218.impl.app.EchoApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl3 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array5 = new java.lang.String[] { "" };
    java.lang.String str6 = shellImpl3.globFilesDirectories(str_array5);
    java.lang.String str7 = calApplication2.printCalForYear(str_array5);
    java.io.InputStream inputStream8 = null;
    java.io.OutputStream outputStream10 = sg.edu.nus.comp.cs4218.impl.ShellImpl.openOutputRedir("File output redirection and pipe operator cannot be used side by side.");
    echoApplication1.run(str_array5, inputStream8, outputStream10);
    java.lang.String str12 = bcApplication0.number(str_array5);
    sg.edu.nus.comp.cs4218.misc.MergeSort mergeSort14 = new sg.edu.nus.comp.cs4218.misc.MergeSort(false);
    java.lang.String str16 = mergeSort14.extractFirstNumberWordFromLine("");
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl17 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl18 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array20 = new java.lang.String[] { "" };
    java.lang.String str21 = shellImpl18.globFilesDirectories(str_array20);
    java.lang.String str22 = shellImpl17.pipeWithException(str_array20);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl23 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array25 = new java.lang.String[] { "" };
    java.lang.String str26 = shellImpl23.globFilesDirectories(str_array25);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl27 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl28 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array30 = new java.lang.String[] { "" };
    java.lang.String str31 = shellImpl28.globFilesDirectories(str_array30);
    java.lang.String str32 = shellImpl27.pipeWithException(str_array30);
    java.lang.String str33 = shellImpl23.globNoPaths(str_array30);
    java.lang.String str34 = shellImpl17.globNoPaths(str_array30);
    java.lang.String[] str_array37 = mergeSort14.mergeSort(str_array30, 0, (-29));
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str38 = bcApplication0.orMethod(str_array37);
      org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException");
    } catch (java.util.EmptyStackException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.util.EmptyStackException")) {
        org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\r\n"+ "'", str6.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str7.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(outputStream10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "1"+ "'", str12.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + ""+ "'", str16.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "\r\n"+ "'", str21.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + ""+ "'", str22.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "\r\n"+ "'", str26.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "\r\n"+ "'", str31.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + ""+ "'", str32.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + ""+ "'", str33.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + ""+ "'", str34.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array37);

  }

  @Test
  public void test043() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test043"); }


    sg.edu.nus.comp.cs4218.impl.cmd.CallCommand callCommand0 = new sg.edu.nus.comp.cs4218.impl.cmd.CallCommand();
    java.lang.String str1 = callCommand0.getInputStreamS();
    callCommand0.terminate();
    java.util.Vector vector5 = sg.edu.nus.comp.cs4218.misc.ExpressionEvaluator.splitSeparateStrings("|");
    // The following exception was thrown during execution in test generation
    try {
      int i7 = callCommand0.extractOutputRedir("Invalid app.", vector5, 0);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.ShellException");
    } catch (sg.edu.nus.comp.cs4218.exception.ShellException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.ShellException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.ShellException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + ""+ "'", str1.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(vector5);

  }

  @Test
  public void test044() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test044"); }


    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl2 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array4 = new java.lang.String[] { "" };
    java.lang.String str5 = shellImpl2.globFilesDirectories(str_array4);
    java.lang.String str6 = calApplication1.printCalForYear(str_array4);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl8 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array10 = new java.lang.String[] { "" };
    java.lang.String str11 = shellImpl8.globFilesDirectories(str_array10);
    java.lang.String str12 = calApplication7.printCalForYear(str_array10);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl13 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array15 = new java.lang.String[] { "" };
    java.lang.String str16 = shellImpl13.globFilesDirectories(str_array15);
    boolean b17 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.isNumberCommandFormat(str_array15);
    java.lang.String str18 = calApplication7.printCalForMonthYearMondayFirst(str_array15);
    java.nio.file.Path path19 = null;
    java.lang.String[] str_array21 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.getFileContents(str_array15, path19, 4);
    java.lang.String str22 = calApplication1.printCal(str_array15);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication23 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl24 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array26 = new java.lang.String[] { "" };
    java.lang.String str27 = shellImpl24.globFilesDirectories(str_array26);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication28 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl29 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array31 = new java.lang.String[] { "" };
    java.lang.String str32 = shellImpl29.globFilesDirectories(str_array31);
    java.lang.String str33 = calApplication28.printCalForYear(str_array31);
    java.lang.String str34 = shellImpl24.pipeTwoCommands(str_array31);
    java.lang.String str35 = bcApplication23.number(str_array31);
    java.lang.String str36 = calApplication1.printCalForMonthYearMondayFirst(str_array31);
    java.util.List list37 = sg.edu.nus.comp.cs4218.misc.SortHelper.separateBasedOnType(1000000000, str_array31);
    java.util.List list38 = sg.edu.nus.comp.cs4218.misc.SortHelper.sortHelperWithNumFlag(list37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "\r\n"+ "'", str5.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str6.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "\r\n"+ "'", str11.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str12.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\r\n"+ "'", str16.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "Invalid flag provided."+ "'", str18.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "     March 2016     \r\nSu Mo Tu We Th Fr Sa\r\n       1  2  3  4  5\r\n 6  7  8  9 10 11 12\r\n13 14 15 16 17 18 19\r\n20 21 22 23 24 25 26\r\n27 28 29 30 31\r\n"+ "'", str22.equals("     March 2016     \r\nSu Mo Tu We Th Fr Sa\r\n       1  2  3  4  5\r\n 6  7  8  9 10 11 12\r\n13 14 15 16 17 18 19\r\n20 21 22 23 24 25 26\r\n27 28 29 30 31\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "\r\n"+ "'", str27.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "\r\n"+ "'", str32.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str33.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + ""+ "'", str34.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "1"+ "'", str35.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "Invalid flag provided."+ "'", str36.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list38);

  }

  @Test
  public void test045() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test045"); }


    sg.edu.nus.comp.cs4218.impl.cmd.CallCommand callCommand1 = new sg.edu.nus.comp.cs4218.impl.cmd.CallCommand("||");
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl2 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array4 = new java.lang.String[] { "" };
    java.lang.String str5 = shellImpl2.globFilesDirectories(str_array4);
    java.lang.String[] str_array6 = callCommand1.evaluateGlob(str_array4);
    // The following exception was thrown during execution in test generation
    try {
      callCommand1.parse();
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.ShellException");
    } catch (sg.edu.nus.comp.cs4218.exception.ShellException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.ShellException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.ShellException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "\r\n"+ "'", str5.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array6);

  }

  @Test
  public void test046() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test046"); }


    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication0 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.EchoApplication echoApplication1 = new sg.edu.nus.comp.cs4218.impl.app.EchoApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl3 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array5 = new java.lang.String[] { "" };
    java.lang.String str6 = shellImpl3.globFilesDirectories(str_array5);
    java.lang.String str7 = calApplication2.printCalForYear(str_array5);
    java.io.InputStream inputStream8 = null;
    java.io.OutputStream outputStream10 = sg.edu.nus.comp.cs4218.impl.ShellImpl.openOutputRedir("File output redirection and pipe operator cannot be used side by side.");
    echoApplication1.run(str_array5, inputStream8, outputStream10);
    java.lang.String str12 = bcApplication0.number(str_array5);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl13 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl14 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array16 = new java.lang.String[] { "" };
    java.lang.String str17 = shellImpl14.globFilesDirectories(str_array16);
    java.lang.String str18 = shellImpl13.pipeWithException(str_array16);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl19 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array21 = new java.lang.String[] { "" };
    java.lang.String str22 = shellImpl19.globFilesDirectories(str_array21);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl23 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl24 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array26 = new java.lang.String[] { "" };
    java.lang.String str27 = shellImpl24.globFilesDirectories(str_array26);
    java.lang.String str28 = shellImpl23.pipeWithException(str_array26);
    java.lang.String str29 = shellImpl19.globNoPaths(str_array26);
    java.lang.String str30 = shellImpl13.globNoPaths(str_array26);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl31 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array33 = new java.lang.String[] { "" };
    java.lang.String str34 = shellImpl31.globFilesDirectories(str_array33);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl35 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl36 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array38 = new java.lang.String[] { "" };
    java.lang.String str39 = shellImpl36.globFilesDirectories(str_array38);
    java.lang.String str40 = shellImpl35.pipeWithException(str_array38);
    java.lang.String str41 = shellImpl31.globNoPaths(str_array38);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl42 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array44 = new java.lang.String[] { "" };
    java.lang.String str45 = shellImpl42.globFilesDirectories(str_array44);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication46 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl47 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array49 = new java.lang.String[] { "" };
    java.lang.String str50 = shellImpl47.globFilesDirectories(str_array49);
    java.lang.String str51 = calApplication46.printCalForYear(str_array49);
    java.lang.String str52 = shellImpl42.pipeTwoCommands(str_array49);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication53 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication54 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl55 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array57 = new java.lang.String[] { "" };
    java.lang.String str58 = shellImpl55.globFilesDirectories(str_array57);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication59 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl60 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array62 = new java.lang.String[] { "" };
    java.lang.String str63 = shellImpl60.globFilesDirectories(str_array62);
    java.lang.String str64 = calApplication59.printCalForYear(str_array62);
    java.lang.String str65 = shellImpl55.pipeTwoCommands(str_array62);
    java.lang.String str66 = calApplication54.printCalForYearMondayFirst(str_array62);
    java.nio.file.Path path67 = null;
    java.lang.String[] str_array69 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.getFileContents(str_array62, path67, 10);
    java.lang.String str70 = calApplication53.printCal(str_array69);
    java.lang.String str71 = shellImpl42.globOneFile(str_array69);
    java.lang.String str72 = shellImpl31.globNoPaths(str_array69);
    java.lang.String str73 = shellImpl13.pipeWithException(str_array69);
    java.nio.file.Path path74 = null;
    java.lang.String[] str_array76 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.getFileContents(str_array69, path74, 0);
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str77 = bcApplication0.equalEqual(str_array69);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\r\n"+ "'", str6.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str7.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(outputStream10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "1"+ "'", str12.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "\r\n"+ "'", str17.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + ""+ "'", str18.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "\r\n"+ "'", str22.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "\r\n"+ "'", str27.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + ""+ "'", str28.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + ""+ "'", str29.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + ""+ "'", str30.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "\r\n"+ "'", str34.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "\r\n"+ "'", str39.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + ""+ "'", str40.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + ""+ "'", str41.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "\r\n"+ "'", str45.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "\r\n"+ "'", str50.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str51.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + ""+ "'", str52.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "\r\n"+ "'", str58.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + "\r\n"+ "'", str63.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str64 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str64.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + ""+ "'", str65.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "Invalid flag provided."+ "'", str66.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str70 + "' != '" + "     March 2016     \r\nSu Mo Tu We Th Fr Sa\r\n       1  2  3  4  5\r\n 6  7  8  9 10 11 12\r\n13 14 15 16 17 18 19\r\n20 21 22 23 24 25 26\r\n27 28 29 30 31\r\n"+ "'", str70.equals("     March 2016     \r\nSu Mo Tu We Th Fr Sa\r\n       1  2  3  4  5\r\n 6  7  8  9 10 11 12\r\n13 14 15 16 17 18 19\r\n20 21 22 23 24 25 26\r\n27 28 29 30 31\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str71 + "' != '" + ""+ "'", str71.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str72 + "' != '" + ""+ "'", str72.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str73 + "' != '" + ""+ "'", str73.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array76);

  }

  @Test
  public void test047() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test047"); }


    sg.edu.nus.comp.cs4218.impl.app.DateApplication dateApplication0 = new sg.edu.nus.comp.cs4218.impl.app.DateApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl1 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl3 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array5 = new java.lang.String[] { "" };
    java.lang.String str6 = shellImpl3.globFilesDirectories(str_array5);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl8 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array10 = new java.lang.String[] { "" };
    java.lang.String str11 = shellImpl8.globFilesDirectories(str_array10);
    java.lang.String str12 = calApplication7.printCalForYear(str_array10);
    java.lang.String str13 = shellImpl3.pipeTwoCommands(str_array10);
    java.lang.String str14 = calApplication2.printCalForYearMondayFirst(str_array10);
    java.nio.file.Path path15 = null;
    java.lang.String[] str_array17 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.getFileContents(str_array10, path15, 10);
    java.lang.String str18 = shellImpl1.globMultiLevel(str_array17);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl19 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array21 = new java.lang.String[] { "" };
    java.lang.String str22 = shellImpl19.globFilesDirectories(str_array21);
    java.lang.String str23 = shellImpl1.pipeTwoCommands(str_array21);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl24 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl25 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array27 = new java.lang.String[] { "" };
    java.lang.String str28 = shellImpl25.globFilesDirectories(str_array27);
    java.lang.String str29 = shellImpl24.pipeWithException(str_array27);
    java.lang.String[] str_array30 = sg.edu.nus.comp.cs4218.impl.ShellImpl.processBQ(str_array27);
    java.lang.String str31 = shellImpl1.globOneFile(str_array30);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication32 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl33 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array35 = new java.lang.String[] { "" };
    java.lang.String str36 = shellImpl33.globFilesDirectories(str_array35);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication37 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl38 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array40 = new java.lang.String[] { "" };
    java.lang.String str41 = shellImpl38.globFilesDirectories(str_array40);
    java.lang.String str42 = calApplication37.printCalForYear(str_array40);
    java.lang.String str43 = shellImpl33.pipeTwoCommands(str_array40);
    java.lang.String str44 = calApplication32.printCalForYearMondayFirst(str_array40);
    java.nio.file.Path path45 = null;
    java.lang.String[] str_array47 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.getFileContents(str_array40, path45, 10);
    java.lang.String str48 = shellImpl1.globMultiLevel(str_array47);
    java.io.InputStream inputStream49 = null;
    java.io.OutputStream outputStream51 = sg.edu.nus.comp.cs4218.impl.ShellImpl.openOutputRedir("File output redirection and pipe operator cannot be used side by side.");
    sg.edu.nus.comp.cs4218.impl.app.EchoApplication echoApplication52 = new sg.edu.nus.comp.cs4218.impl.app.EchoApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication53 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl54 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array56 = new java.lang.String[] { "" };
    java.lang.String str57 = shellImpl54.globFilesDirectories(str_array56);
    java.lang.String str58 = calApplication53.printCalForYear(str_array56);
    java.io.InputStream inputStream59 = null;
    java.io.OutputStream outputStream61 = sg.edu.nus.comp.cs4218.impl.ShellImpl.openOutputRedir("File output redirection and pipe operator cannot be used side by side.");
    echoApplication52.run(str_array56, inputStream59, outputStream61);
    sg.edu.nus.comp.cs4218.impl.ShellImpl.writeToStdout(outputStream51, outputStream61);
    java.io.OutputStream outputStream65 = sg.edu.nus.comp.cs4218.impl.ShellImpl.openOutputRedir("&&");
    sg.edu.nus.comp.cs4218.impl.ShellImpl.writeToStdout(outputStream51, outputStream65);
    dateApplication0.run(str_array47, inputStream49, outputStream51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\r\n"+ "'", str6.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "\r\n"+ "'", str11.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str12.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + ""+ "'", str13.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Invalid flag provided."+ "'", str14.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + ""+ "'", str18.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "\r\n"+ "'", str22.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + ""+ "'", str23.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "\r\n"+ "'", str28.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + ""+ "'", str29.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "\r\n"+ "'", str31.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "\r\n"+ "'", str36.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "\r\n"+ "'", str41.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str42.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + ""+ "'", str43.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "Invalid flag provided."+ "'", str44.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + ""+ "'", str48.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(outputStream51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "\r\n"+ "'", str57.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str58.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(outputStream61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(outputStream65);

  }

  @Test
  public void test048() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test048"); }


    sg.edu.nus.comp.cs4218.impl.app.CatApplication catApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CatApplication();
    java.lang.String[] str_array1 = null;
    java.io.InputStream inputStream2 = null;
    java.io.OutputStream outputStream4 = sg.edu.nus.comp.cs4218.impl.ShellImpl.openOutputRedir("File output redirection and pipe operator cannot be used side by side.");
    sg.edu.nus.comp.cs4218.impl.app.EchoApplication echoApplication5 = new sg.edu.nus.comp.cs4218.impl.app.EchoApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication6 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl7 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array9 = new java.lang.String[] { "" };
    java.lang.String str10 = shellImpl7.globFilesDirectories(str_array9);
    java.lang.String str11 = calApplication6.printCalForYear(str_array9);
    java.io.InputStream inputStream12 = null;
    java.io.OutputStream outputStream14 = sg.edu.nus.comp.cs4218.impl.ShellImpl.openOutputRedir("File output redirection and pipe operator cannot be used side by side.");
    echoApplication5.run(str_array9, inputStream12, outputStream14);
    sg.edu.nus.comp.cs4218.impl.ShellImpl.writeToStdout(outputStream4, outputStream14);
    // The following exception was thrown during execution in test generation
    try {
      catApplication0.run(str_array1, inputStream2, outputStream4);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.CatException");
    } catch (sg.edu.nus.comp.cs4218.exception.CatException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.CatException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.CatException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(outputStream4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\r\n"+ "'", str10.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str11.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(outputStream14);

  }

  @Test
  public void test049() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test049"); }


    sg.edu.nus.comp.cs4218.impl.cmd.PipeCommand pipeCommand1 = new sg.edu.nus.comp.cs4218.impl.cmd.PipeCommand("+");

  }

  @Test
  public void test050() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test050"); }


    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl1 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl3 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array5 = new java.lang.String[] { "" };
    java.lang.String str6 = shellImpl3.globFilesDirectories(str_array5);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl8 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array10 = new java.lang.String[] { "" };
    java.lang.String str11 = shellImpl8.globFilesDirectories(str_array10);
    java.lang.String str12 = calApplication7.printCalForYear(str_array10);
    java.lang.String str13 = shellImpl3.pipeTwoCommands(str_array10);
    java.lang.String str14 = calApplication2.printCalForYearMondayFirst(str_array10);
    java.nio.file.Path path15 = null;
    java.lang.String[] str_array17 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.getFileContents(str_array10, path15, 10);
    java.lang.String str18 = shellImpl1.globMultiLevel(str_array17);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl19 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl20 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array22 = new java.lang.String[] { "" };
    java.lang.String str23 = shellImpl20.globFilesDirectories(str_array22);
    java.lang.String str24 = shellImpl19.pipeWithException(str_array22);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl25 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array27 = new java.lang.String[] { "" };
    java.lang.String str28 = shellImpl25.globFilesDirectories(str_array27);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl29 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl30 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array32 = new java.lang.String[] { "" };
    java.lang.String str33 = shellImpl30.globFilesDirectories(str_array32);
    java.lang.String str34 = shellImpl29.pipeWithException(str_array32);
    java.lang.String str35 = shellImpl25.globNoPaths(str_array32);
    java.lang.String str36 = shellImpl19.globNoPaths(str_array32);
    java.lang.String str37 = shellImpl1.globFilesDirectories(str_array32);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication38 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl39 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array41 = new java.lang.String[] { "" };
    java.lang.String str42 = shellImpl39.globFilesDirectories(str_array41);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication43 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl44 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array46 = new java.lang.String[] { "" };
    java.lang.String str47 = shellImpl44.globFilesDirectories(str_array46);
    java.lang.String str48 = calApplication43.printCalForYear(str_array46);
    java.lang.String str49 = shellImpl39.pipeTwoCommands(str_array46);
    java.lang.String str50 = calApplication38.printCalForYearMondayFirst(str_array46);
    java.nio.file.Path path51 = null;
    java.lang.String[] str_array53 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.getFileContents(str_array46, path51, 10);
    java.lang.String str54 = shellImpl1.globOneFile(str_array53);
    java.util.List list55 = sortApplication0.sortNumbersSpecialChars(str_array53);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl56 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl57 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array59 = new java.lang.String[] { "" };
    java.lang.String str60 = shellImpl57.globFilesDirectories(str_array59);
    java.lang.String str61 = shellImpl56.pipeWithException(str_array59);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl62 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array64 = new java.lang.String[] { "" };
    java.lang.String str65 = shellImpl62.globFilesDirectories(str_array64);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl66 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl67 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array69 = new java.lang.String[] { "" };
    java.lang.String str70 = shellImpl67.globFilesDirectories(str_array69);
    java.lang.String str71 = shellImpl66.pipeWithException(str_array69);
    java.lang.String str72 = shellImpl62.globNoPaths(str_array69);
    java.lang.String str73 = shellImpl56.globNoPaths(str_array69);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication74 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl75 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl76 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl77 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array79 = new java.lang.String[] { "" };
    java.lang.String str80 = shellImpl77.globFilesDirectories(str_array79);
    java.lang.String str81 = shellImpl76.pipeWithException(str_array79);
    java.lang.String str82 = shellImpl75.globFilesDirectories(str_array79);
    java.lang.String str83 = bcApplication74.number(str_array79);
    java.lang.String str84 = shellImpl56.pipeWithException(str_array79);
    java.util.List list85 = sortApplication0.sortSimpleCapitalNumber(str_array79);
    java.io.InputStream inputStream86 = null;
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String[] str_array87 = sg.edu.nus.comp.cs4218.misc.SortHelper.sortProcess(str_array79, inputStream86);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.SortException");
    } catch (sg.edu.nus.comp.cs4218.exception.SortException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.SortException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.SortException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\r\n"+ "'", str6.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "\r\n"+ "'", str11.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str12.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + ""+ "'", str13.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Invalid flag provided."+ "'", str14.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + ""+ "'", str18.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "\r\n"+ "'", str23.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + ""+ "'", str24.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "\r\n"+ "'", str28.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "\r\n"+ "'", str33.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + ""+ "'", str34.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + ""+ "'", str35.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + ""+ "'", str36.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "\r\n"+ "'", str37.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "\r\n"+ "'", str42.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "\r\n"+ "'", str47.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str48.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + ""+ "'", str49.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "Invalid flag provided."+ "'", str50.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + ""+ "'", str54.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "\r\n"+ "'", str60.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + ""+ "'", str61.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "\r\n"+ "'", str65.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str70 + "' != '" + "\r\n"+ "'", str70.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str71 + "' != '" + ""+ "'", str71.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str72 + "' != '" + ""+ "'", str72.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str73 + "' != '" + ""+ "'", str73.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str80 + "' != '" + "\r\n"+ "'", str80.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str81 + "' != '" + ""+ "'", str81.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str82 + "' != '" + "\r\n"+ "'", str82.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str83 + "' != '" + "1"+ "'", str83.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str84 + "' != '" + ""+ "'", str84.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list85);

  }

  @Test
  public void test051() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test051"); }


    sg.edu.nus.comp.cs4218.misc.MergeSort mergeSort1 = new sg.edu.nus.comp.cs4218.misc.MergeSort(false);
    java.lang.String str3 = mergeSort1.extractFirstNumberWordFromLine("");
    int i6 = mergeSort1.compareIncludeNumOrder("*", "|");
    java.lang.String str8 = mergeSort1.extractFirstNumberWordFromLine("-hi!");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + ""+ "'", str3.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-82));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + ""+ "'", str8.equals(""));

  }

  @Test
  public void test052() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test052"); }


    sg.edu.nus.comp.cs4218.impl.cmd.CallCommand callCommand1 = new sg.edu.nus.comp.cs4218.impl.cmd.CallCommand("");
    java.util.Vector vector4 = sg.edu.nus.comp.cs4218.misc.ExpressionEvaluator.splitSeparateStrings("-");
    int i6 = callCommand1.extractOutputRedir("=", vector4, 1);
    java.io.InputStream inputStream7 = null;
    java.io.OutputStream outputStream9 = sg.edu.nus.comp.cs4218.impl.ShellImpl.openOutputRedir("hi!");
    // The following exception was thrown during execution in test generation
    try {
      callCommand1.evaluate(inputStream7, outputStream9);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.ShellException");
    } catch (sg.edu.nus.comp.cs4218.exception.ShellException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.ShellException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.ShellException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(vector4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(outputStream9);

  }

  @Test
  public void test053() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test053"); }


    boolean b1 = sg.edu.nus.comp.cs4218.misc.SignChecker.isNumeric("!");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);

  }

  @Test
  public void test054() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test054"); }


    sg.edu.nus.comp.cs4218.impl.app.TailApplication tailApplication0 = new sg.edu.nus.comp.cs4218.impl.app.TailApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl2 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array4 = new java.lang.String[] { "" };
    java.lang.String str5 = shellImpl2.globFilesDirectories(str_array4);
    java.lang.String str6 = calApplication1.printCalForYear(str_array4);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl8 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array10 = new java.lang.String[] { "" };
    java.lang.String str11 = shellImpl8.globFilesDirectories(str_array10);
    java.lang.String str12 = calApplication7.printCalForYear(str_array10);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl13 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array15 = new java.lang.String[] { "" };
    java.lang.String str16 = shellImpl13.globFilesDirectories(str_array15);
    boolean b17 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.isNumberCommandFormat(str_array15);
    java.lang.String str18 = calApplication7.printCalForMonthYearMondayFirst(str_array15);
    java.nio.file.Path path19 = null;
    java.lang.String[] str_array21 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.getFileContents(str_array15, path19, 4);
    java.lang.String str22 = calApplication1.printCal(str_array15);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication23 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl24 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array26 = new java.lang.String[] { "" };
    java.lang.String str27 = shellImpl24.globFilesDirectories(str_array26);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication28 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl29 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array31 = new java.lang.String[] { "" };
    java.lang.String str32 = shellImpl29.globFilesDirectories(str_array31);
    java.lang.String str33 = calApplication28.printCalForYear(str_array31);
    java.lang.String str34 = shellImpl24.pipeTwoCommands(str_array31);
    java.lang.String str35 = bcApplication23.number(str_array31);
    java.lang.String str36 = calApplication1.printCalForMonthYearMondayFirst(str_array31);
    java.io.InputStream inputStream37 = null;
    sg.edu.nus.comp.cs4218.impl.app.EchoApplication echoApplication38 = new sg.edu.nus.comp.cs4218.impl.app.EchoApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication39 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl40 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array42 = new java.lang.String[] { "" };
    java.lang.String str43 = shellImpl40.globFilesDirectories(str_array42);
    java.lang.String str44 = calApplication39.printCalForYear(str_array42);
    java.io.InputStream inputStream45 = null;
    java.io.OutputStream outputStream47 = sg.edu.nus.comp.cs4218.impl.ShellImpl.openOutputRedir("File output redirection and pipe operator cannot be used side by side.");
    echoApplication38.run(str_array42, inputStream45, outputStream47);
    // The following exception was thrown during execution in test generation
    try {
      tailApplication0.run(str_array31, inputStream37, outputStream47);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.TailException");
    } catch (sg.edu.nus.comp.cs4218.exception.TailException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.TailException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.TailException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "\r\n"+ "'", str5.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str6.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "\r\n"+ "'", str11.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str12.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\r\n"+ "'", str16.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "Invalid flag provided."+ "'", str18.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "     March 2016     \r\nSu Mo Tu We Th Fr Sa\r\n       1  2  3  4  5\r\n 6  7  8  9 10 11 12\r\n13 14 15 16 17 18 19\r\n20 21 22 23 24 25 26\r\n27 28 29 30 31\r\n"+ "'", str22.equals("     March 2016     \r\nSu Mo Tu We Th Fr Sa\r\n       1  2  3  4  5\r\n 6  7  8  9 10 11 12\r\n13 14 15 16 17 18 19\r\n20 21 22 23 24 25 26\r\n27 28 29 30 31\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "\r\n"+ "'", str27.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "\r\n"+ "'", str32.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str33.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + ""+ "'", str34.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "1"+ "'", str35.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "Invalid flag provided."+ "'", str36.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "\r\n"+ "'", str43.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str44.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(outputStream47);

  }

  @Test
  public void test055() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test055"); }


    sg.edu.nus.comp.cs4218.impl.app.FmtApplication fmtApplication0 = new sg.edu.nus.comp.cs4218.impl.app.FmtApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl2 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array4 = new java.lang.String[] { "" };
    java.lang.String str5 = shellImpl2.globFilesDirectories(str_array4);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication6 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl7 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array9 = new java.lang.String[] { "" };
    java.lang.String str10 = shellImpl7.globFilesDirectories(str_array9);
    java.lang.String str11 = calApplication6.printCalForYear(str_array9);
    java.lang.String str12 = shellImpl2.pipeTwoCommands(str_array9);
    java.lang.String str13 = calApplication1.printCalForYearMondayFirst(str_array9);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl14 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array16 = new java.lang.String[] { "" };
    java.lang.String str17 = shellImpl14.globFilesDirectories(str_array16);
    java.lang.String str18 = calApplication1.printCalForYear(str_array16);
    java.io.InputStream inputStream19 = null;
    java.io.OutputStream outputStream21 = sg.edu.nus.comp.cs4218.impl.ShellImpl.openOutputRedir("File output redirection and pipe operator cannot be used side by side.");
    sg.edu.nus.comp.cs4218.impl.app.EchoApplication echoApplication22 = new sg.edu.nus.comp.cs4218.impl.app.EchoApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication23 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl24 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array26 = new java.lang.String[] { "" };
    java.lang.String str27 = shellImpl24.globFilesDirectories(str_array26);
    java.lang.String str28 = calApplication23.printCalForYear(str_array26);
    java.io.InputStream inputStream29 = null;
    java.io.OutputStream outputStream31 = sg.edu.nus.comp.cs4218.impl.ShellImpl.openOutputRedir("File output redirection and pipe operator cannot be used side by side.");
    echoApplication22.run(str_array26, inputStream29, outputStream31);
    sg.edu.nus.comp.cs4218.impl.ShellImpl.writeToStdout(outputStream21, outputStream31);
    // The following exception was thrown during execution in test generation
    try {
      fmtApplication0.run(str_array16, inputStream19, outputStream31);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.FmtException");
    } catch (sg.edu.nus.comp.cs4218.exception.FmtException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.FmtException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.FmtException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "\r\n"+ "'", str5.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\r\n"+ "'", str10.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str11.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + ""+ "'", str12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Invalid flag provided."+ "'", str13.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "\r\n"+ "'", str17.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str18.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(outputStream21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "\r\n"+ "'", str27.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str28.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(outputStream31);

  }

  @Test
  public void test056() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test056"); }


    sg.edu.nus.comp.cs4218.impl.cmd.CallCommand callCommand0 = new sg.edu.nus.comp.cs4218.impl.cmd.CallCommand();
    java.lang.String str1 = callCommand0.getInputStreamS();
    java.io.InputStream inputStream2 = null;
    java.io.OutputStream outputStream4 = sg.edu.nus.comp.cs4218.impl.ShellImpl.openOutputRedir("&&");
    // The following exception was thrown during execution in test generation
    try {
      callCommand0.evaluate(inputStream2, outputStream4);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.ShellException");
    } catch (sg.edu.nus.comp.cs4218.exception.ShellException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.ShellException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.ShellException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + ""+ "'", str1.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(outputStream4);

  }

  @Test
  public void test057() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test057"); }


    boolean b1 = sg.edu.nus.comp.cs4218.misc.SignChecker.isOperator('a');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);

  }

  @Test
  public void test058() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test058"); }


    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl1 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl3 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array5 = new java.lang.String[] { "" };
    java.lang.String str6 = shellImpl3.globFilesDirectories(str_array5);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl8 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array10 = new java.lang.String[] { "" };
    java.lang.String str11 = shellImpl8.globFilesDirectories(str_array10);
    java.lang.String str12 = calApplication7.printCalForYear(str_array10);
    java.lang.String str13 = shellImpl3.pipeTwoCommands(str_array10);
    java.lang.String str14 = calApplication2.printCalForYearMondayFirst(str_array10);
    java.nio.file.Path path15 = null;
    java.lang.String[] str_array17 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.getFileContents(str_array10, path15, 10);
    java.lang.String str18 = shellImpl1.globMultiLevel(str_array17);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl19 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl20 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array22 = new java.lang.String[] { "" };
    java.lang.String str23 = shellImpl20.globFilesDirectories(str_array22);
    java.lang.String str24 = shellImpl19.pipeWithException(str_array22);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl25 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array27 = new java.lang.String[] { "" };
    java.lang.String str28 = shellImpl25.globFilesDirectories(str_array27);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl29 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl30 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array32 = new java.lang.String[] { "" };
    java.lang.String str33 = shellImpl30.globFilesDirectories(str_array32);
    java.lang.String str34 = shellImpl29.pipeWithException(str_array32);
    java.lang.String str35 = shellImpl25.globNoPaths(str_array32);
    java.lang.String str36 = shellImpl19.globNoPaths(str_array32);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication37 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl38 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl39 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl40 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array42 = new java.lang.String[] { "" };
    java.lang.String str43 = shellImpl40.globFilesDirectories(str_array42);
    java.lang.String str44 = shellImpl39.pipeWithException(str_array42);
    java.lang.String str45 = shellImpl38.globFilesDirectories(str_array42);
    java.lang.String str46 = bcApplication37.number(str_array42);
    java.lang.String str47 = shellImpl19.pipeWithException(str_array42);
    java.lang.String str48 = shellImpl1.globNoPaths(str_array42);
    sg.edu.nus.comp.cs4218.impl.cmd.CallCommand callCommand49 = new sg.edu.nus.comp.cs4218.impl.cmd.CallCommand();
    callCommand49.parse();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl51 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl52 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array54 = new java.lang.String[] { "" };
    java.lang.String str55 = shellImpl52.globFilesDirectories(str_array54);
    java.lang.String str56 = shellImpl51.pipeWithException(str_array54);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl57 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array59 = new java.lang.String[] { "" };
    java.lang.String str60 = shellImpl57.globFilesDirectories(str_array59);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl61 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl62 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array64 = new java.lang.String[] { "" };
    java.lang.String str65 = shellImpl62.globFilesDirectories(str_array64);
    java.lang.String str66 = shellImpl61.pipeWithException(str_array64);
    java.lang.String str67 = shellImpl57.globNoPaths(str_array64);
    java.lang.String str68 = shellImpl51.globNoPaths(str_array64);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication69 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl70 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl71 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl72 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array74 = new java.lang.String[] { "" };
    java.lang.String str75 = shellImpl72.globFilesDirectories(str_array74);
    java.lang.String str76 = shellImpl71.pipeWithException(str_array74);
    java.lang.String str77 = shellImpl70.globFilesDirectories(str_array74);
    java.lang.String str78 = bcApplication69.number(str_array74);
    java.lang.String str79 = shellImpl51.pipeWithException(str_array74);
    java.lang.String[] str_array80 = callCommand49.evaluateGlob(str_array74);
    java.lang.String str81 = shellImpl1.globFilesDirectories(str_array74);
    java.util.List list82 = sg.edu.nus.comp.cs4218.misc.SortHelper.separateBasedOnType(15, str_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\r\n"+ "'", str6.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "\r\n"+ "'", str11.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str12.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + ""+ "'", str13.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Invalid flag provided."+ "'", str14.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + ""+ "'", str18.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "\r\n"+ "'", str23.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + ""+ "'", str24.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "\r\n"+ "'", str28.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "\r\n"+ "'", str33.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + ""+ "'", str34.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + ""+ "'", str35.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + ""+ "'", str36.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "\r\n"+ "'", str43.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + ""+ "'", str44.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "\r\n"+ "'", str45.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "1"+ "'", str46.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + ""+ "'", str47.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + ""+ "'", str48.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "\r\n"+ "'", str55.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + ""+ "'", str56.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "\r\n"+ "'", str60.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "\r\n"+ "'", str65.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + ""+ "'", str66.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + ""+ "'", str67.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str68 + "' != '" + ""+ "'", str68.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str75 + "' != '" + "\r\n"+ "'", str75.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str76 + "' != '" + ""+ "'", str76.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str77 + "' != '" + "\r\n"+ "'", str77.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str78 + "' != '" + "1"+ "'", str78.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str79 + "' != '" + ""+ "'", str79.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str81 + "' != '" + "\r\n"+ "'", str81.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list82);

  }

  @Test
  public void test059() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test059"); }


    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication0 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl1 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl2 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl3 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array5 = new java.lang.String[] { "" };
    java.lang.String str6 = shellImpl3.globFilesDirectories(str_array5);
    java.lang.String str7 = shellImpl2.pipeWithException(str_array5);
    java.lang.String str8 = shellImpl1.globFilesDirectories(str_array5);
    java.lang.String str9 = bcApplication0.number(str_array5);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl10 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array12 = new java.lang.String[] { "" };
    java.lang.String str13 = shellImpl10.globFilesDirectories(str_array12);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication14 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl15 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array17 = new java.lang.String[] { "" };
    java.lang.String str18 = shellImpl15.globFilesDirectories(str_array17);
    java.lang.String str19 = calApplication14.printCalForYear(str_array17);
    java.lang.String str20 = shellImpl10.pipeTwoCommands(str_array17);
    java.lang.String str21 = bcApplication0.number(str_array17);
    java.lang.String[] str_array23 = new java.lang.String[] { "Invalid syntax encountered." };
    boolean b24 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.isNumberCommandFormat(str_array23);
    java.lang.String str25 = bcApplication0.lessThan(str_array23);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication26 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl27 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array29 = new java.lang.String[] { "" };
    java.lang.String str30 = shellImpl27.globFilesDirectories(str_array29);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication31 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl32 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array34 = new java.lang.String[] { "" };
    java.lang.String str35 = shellImpl32.globFilesDirectories(str_array34);
    java.lang.String str36 = calApplication31.printCalForYear(str_array34);
    java.lang.String str37 = shellImpl27.pipeTwoCommands(str_array34);
    java.lang.String str38 = calApplication26.printCalForYearMondayFirst(str_array34);
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str39 = bcApplication0.orMethod(str_array34);
      org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException");
    } catch (java.util.EmptyStackException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.util.EmptyStackException")) {
        org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\r\n"+ "'", str6.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + ""+ "'", str7.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\r\n"+ "'", str8.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "1"+ "'", str9.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "\r\n"+ "'", str13.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "\r\n"+ "'", str18.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str19.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + ""+ "'", str20.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "1"+ "'", str21.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "bc: Unknown character detected I"+ "'", str25.equals("bc: Unknown character detected I"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "\r\n"+ "'", str30.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "\r\n"+ "'", str35.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str36.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + ""+ "'", str37.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "Invalid flag provided."+ "'", str38.equals("Invalid flag provided."));

  }

  @Test
  public void test060() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test060"); }


    java.util.Vector vector1 = sg.edu.nus.comp.cs4218.misc.ExpressionEvaluator.infixToPostfix("=");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(vector1);

  }

  @Test
  public void test061() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test061"); }


    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl2 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array4 = new java.lang.String[] { "" };
    java.lang.String str5 = shellImpl2.globFilesDirectories(str_array4);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication6 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl7 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array9 = new java.lang.String[] { "" };
    java.lang.String str10 = shellImpl7.globFilesDirectories(str_array9);
    java.lang.String str11 = calApplication6.printCalForYear(str_array9);
    java.lang.String str12 = shellImpl2.pipeTwoCommands(str_array9);
    java.lang.String str13 = calApplication1.printCalForYearMondayFirst(str_array9);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl14 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array16 = new java.lang.String[] { "" };
    java.lang.String str17 = shellImpl14.globFilesDirectories(str_array16);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication18 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl19 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array21 = new java.lang.String[] { "" };
    java.lang.String str22 = shellImpl19.globFilesDirectories(str_array21);
    java.lang.String str23 = calApplication18.printCalForYear(str_array21);
    java.lang.String str24 = shellImpl14.pipeTwoCommands(str_array21);
    sg.edu.nus.comp.cs4218.impl.cmd.CallCommand callCommand25 = new sg.edu.nus.comp.cs4218.impl.cmd.CallCommand();
    java.lang.String str26 = callCommand25.getInputStreamS();
    callCommand25.terminate();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication28 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl29 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array31 = new java.lang.String[] { "" };
    java.lang.String str32 = shellImpl29.globFilesDirectories(str_array31);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication33 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl34 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array36 = new java.lang.String[] { "" };
    java.lang.String str37 = shellImpl34.globFilesDirectories(str_array36);
    java.lang.String str38 = calApplication33.printCalForYear(str_array36);
    java.lang.String str39 = shellImpl29.pipeTwoCommands(str_array36);
    java.lang.String str40 = calApplication28.printCalForYearMondayFirst(str_array36);
    java.nio.file.Path path41 = null;
    java.lang.String[] str_array43 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.getFileContents(str_array36, path41, 10);
    java.lang.String[] str_array44 = callCommand25.evaluateGlob(str_array36);
    java.lang.String str45 = shellImpl14.globMultiLevel(str_array36);
    java.lang.String str46 = calApplication1.printCal(str_array36);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl47 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl48 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array50 = new java.lang.String[] { "" };
    java.lang.String str51 = shellImpl48.globFilesDirectories(str_array50);
    java.lang.String str52 = shellImpl47.pipeWithException(str_array50);
    java.lang.String[] str_array53 = sg.edu.nus.comp.cs4218.impl.ShellImpl.processBQ(str_array50);
    java.lang.String str54 = calApplication1.printCalForMonthYearMondayFirst(str_array50);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl55 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array57 = new java.lang.String[] { "" };
    java.lang.String str58 = shellImpl55.globFilesDirectories(str_array57);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl59 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl60 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array62 = new java.lang.String[] { "" };
    java.lang.String str63 = shellImpl60.globFilesDirectories(str_array62);
    java.lang.String str64 = shellImpl59.pipeWithException(str_array62);
    java.lang.String str65 = shellImpl55.globNoPaths(str_array62);
    java.lang.String str66 = calApplication1.printCal(str_array62);
    java.util.List list67 = sortApplication0.sortCapitalNumberswithNumFlagOn(str_array62);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication68 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array70 = new java.lang.String[] { "-0" };
    java.lang.String str71 = calApplication68.printCalForYearMondayFirst(str_array70);
    java.util.List list72 = sortApplication0.sortStringsCapital(str_array70);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication73 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl74 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array76 = new java.lang.String[] { "" };
    java.lang.String str77 = shellImpl74.globFilesDirectories(str_array76);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication78 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl79 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array81 = new java.lang.String[] { "" };
    java.lang.String str82 = shellImpl79.globFilesDirectories(str_array81);
    java.lang.String str83 = calApplication78.printCalForYear(str_array81);
    java.lang.String str84 = shellImpl74.pipeTwoCommands(str_array81);
    java.lang.String str85 = calApplication73.printCalForYearMondayFirst(str_array81);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl86 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array88 = new java.lang.String[] { "" };
    java.lang.String str89 = shellImpl86.globFilesDirectories(str_array88);
    java.lang.String str90 = calApplication73.printCalForYear(str_array88);
    java.lang.String[] str_array93 = new java.lang.String[] { "*" };
    java.util.List list94 = sg.edu.nus.comp.cs4218.misc.SortHelper.separateBasedOnType(5, str_array93);
    java.lang.String str95 = calApplication73.printCalForYearMondayFirst(str_array93);
    java.util.List list96 = sortApplication0.sortSimpleNumbersSpecialChars(str_array93);
    java.lang.String[] str_array97 = null;
    // The following exception was thrown during execution in test generation
    try {
      java.util.List list98 = sortApplication0.sortSimpleSpecialChars(str_array97);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "\r\n"+ "'", str5.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\r\n"+ "'", str10.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str11.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + ""+ "'", str12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Invalid flag provided."+ "'", str13.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "\r\n"+ "'", str17.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "\r\n"+ "'", str22.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str23.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + ""+ "'", str24.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + ""+ "'", str26.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "\r\n"+ "'", str32.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "\r\n"+ "'", str37.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str38.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + ""+ "'", str39.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "Invalid flag provided."+ "'", str40.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "\r\n"+ "'", str45.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "     March 2016     \r\nSu Mo Tu We Th Fr Sa\r\n       1  2  3  4  5\r\n 6  7  8  9 10 11 12\r\n13 14 15 16 17 18 19\r\n20 21 22 23 24 25 26\r\n27 28 29 30 31\r\n"+ "'", str46.equals("     March 2016     \r\nSu Mo Tu We Th Fr Sa\r\n       1  2  3  4  5\r\n 6  7  8  9 10 11 12\r\n13 14 15 16 17 18 19\r\n20 21 22 23 24 25 26\r\n27 28 29 30 31\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "\r\n"+ "'", str51.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + ""+ "'", str52.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "Invalid flag provided."+ "'", str54.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "\r\n"+ "'", str58.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + "\r\n"+ "'", str63.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str64 + "' != '" + ""+ "'", str64.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + ""+ "'", str65.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "     March 2016     \r\nSu Mo Tu We Th Fr Sa\r\n       1  2  3  4  5\r\n 6  7  8  9 10 11 12\r\n13 14 15 16 17 18 19\r\n20 21 22 23 24 25 26\r\n27 28 29 30 31\r\n"+ "'", str66.equals("     March 2016     \r\nSu Mo Tu We Th Fr Sa\r\n       1  2  3  4  5\r\n 6  7  8  9 10 11 12\r\n13 14 15 16 17 18 19\r\n20 21 22 23 24 25 26\r\n27 28 29 30 31\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str71 + "' != '" + "Invalid flag provided."+ "'", str71.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str77 + "' != '" + "\r\n"+ "'", str77.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str82 + "' != '" + "\r\n"+ "'", str82.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str83 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str83.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str84 + "' != '" + ""+ "'", str84.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str85 + "' != '" + "Invalid flag provided."+ "'", str85.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str89 + "' != '" + "\r\n"+ "'", str89.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str90 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str90.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list94);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str95 + "' != '" + "Invalid flag provided."+ "'", str95.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list96);

  }

  @Test
  public void test062() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test062"); }


    // The following exception was thrown during execution in test generation
    try {
      java.util.Vector vector1 = sg.edu.nus.comp.cs4218.misc.ExpressionEvaluator.splitSeparateStrings("-hi!");
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.BcException");
    } catch (sg.edu.nus.comp.cs4218.exception.BcException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.BcException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.BcException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test063() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test063"); }


    boolean b1 = sg.edu.nus.comp.cs4218.misc.ExpressionEvaluator.isParenthesesCountSame("||");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);

  }

  @Test
  public void test064() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test064"); }


    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl1 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array3 = new java.lang.String[] { "" };
    java.lang.String str4 = shellImpl1.globFilesDirectories(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication5 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl6 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array8 = new java.lang.String[] { "" };
    java.lang.String str9 = shellImpl6.globFilesDirectories(str_array8);
    java.lang.String str10 = calApplication5.printCalForYear(str_array8);
    java.lang.String str11 = shellImpl1.pipeTwoCommands(str_array8);
    java.lang.String str12 = calApplication0.printCalForYearMondayFirst(str_array8);
    java.lang.String[] str_array13 = null;
    java.lang.String str14 = calApplication0.printCal(str_array13);
    sg.edu.nus.comp.cs4218.impl.cmd.CallCommand callCommand15 = new sg.edu.nus.comp.cs4218.impl.cmd.CallCommand();
    callCommand15.parse();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl17 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl18 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array20 = new java.lang.String[] { "" };
    java.lang.String str21 = shellImpl18.globFilesDirectories(str_array20);
    java.lang.String str22 = shellImpl17.pipeWithException(str_array20);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl23 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array25 = new java.lang.String[] { "" };
    java.lang.String str26 = shellImpl23.globFilesDirectories(str_array25);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl27 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl28 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array30 = new java.lang.String[] { "" };
    java.lang.String str31 = shellImpl28.globFilesDirectories(str_array30);
    java.lang.String str32 = shellImpl27.pipeWithException(str_array30);
    java.lang.String str33 = shellImpl23.globNoPaths(str_array30);
    java.lang.String str34 = shellImpl17.globNoPaths(str_array30);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication35 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl36 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl37 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl38 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array40 = new java.lang.String[] { "" };
    java.lang.String str41 = shellImpl38.globFilesDirectories(str_array40);
    java.lang.String str42 = shellImpl37.pipeWithException(str_array40);
    java.lang.String str43 = shellImpl36.globFilesDirectories(str_array40);
    java.lang.String str44 = bcApplication35.number(str_array40);
    java.lang.String str45 = shellImpl17.pipeWithException(str_array40);
    java.lang.String[] str_array46 = callCommand15.evaluateGlob(str_array40);
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str47 = calApplication0.printCalForMonthYear(str_array40);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\r\n"+ "'", str4.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "\r\n"+ "'", str9.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str10.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + ""+ "'", str11.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Invalid flag provided."+ "'", str12.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "     March 2016     \r\nSu Mo Tu We Th Fr Sa\r\n       1  2  3  4  5\r\n 6  7  8  9 10 11 12\r\n13 14 15 16 17 18 19\r\n20 21 22 23 24 25 26\r\n27 28 29 30 31\r\n"+ "'", str14.equals("     March 2016     \r\nSu Mo Tu We Th Fr Sa\r\n       1  2  3  4  5\r\n 6  7  8  9 10 11 12\r\n13 14 15 16 17 18 19\r\n20 21 22 23 24 25 26\r\n27 28 29 30 31\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "\r\n"+ "'", str21.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + ""+ "'", str22.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "\r\n"+ "'", str26.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "\r\n"+ "'", str31.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + ""+ "'", str32.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + ""+ "'", str33.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + ""+ "'", str34.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "\r\n"+ "'", str41.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + ""+ "'", str42.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "\r\n"+ "'", str43.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "1"+ "'", str44.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + ""+ "'", str45.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array46);

  }

  @Test
  public void test065() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test065"); }


    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication0 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.EchoApplication echoApplication1 = new sg.edu.nus.comp.cs4218.impl.app.EchoApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl3 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array5 = new java.lang.String[] { "" };
    java.lang.String str6 = shellImpl3.globFilesDirectories(str_array5);
    java.lang.String str7 = calApplication2.printCalForYear(str_array5);
    java.io.InputStream inputStream8 = null;
    java.io.OutputStream outputStream10 = sg.edu.nus.comp.cs4218.impl.ShellImpl.openOutputRedir("File output redirection and pipe operator cannot be used side by side.");
    echoApplication1.run(str_array5, inputStream8, outputStream10);
    java.lang.String str12 = bcApplication0.number(str_array5);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl13 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array15 = new java.lang.String[] { "" };
    java.lang.String str16 = shellImpl13.globFilesDirectories(str_array15);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl17 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl18 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array20 = new java.lang.String[] { "" };
    java.lang.String str21 = shellImpl18.globFilesDirectories(str_array20);
    java.lang.String str22 = shellImpl17.pipeWithException(str_array20);
    java.lang.String str23 = shellImpl13.globNoPaths(str_array20);
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str24 = bcApplication0.equalEqual(str_array20);
      org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException");
    } catch (java.util.EmptyStackException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.util.EmptyStackException")) {
        org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\r\n"+ "'", str6.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str7.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(outputStream10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "1"+ "'", str12.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\r\n"+ "'", str16.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "\r\n"+ "'", str21.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + ""+ "'", str22.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + ""+ "'", str23.equals(""));

  }

  @Test
  public void test066() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test066"); }


    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl1 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl3 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array5 = new java.lang.String[] { "" };
    java.lang.String str6 = shellImpl3.globFilesDirectories(str_array5);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl8 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array10 = new java.lang.String[] { "" };
    java.lang.String str11 = shellImpl8.globFilesDirectories(str_array10);
    java.lang.String str12 = calApplication7.printCalForYear(str_array10);
    java.lang.String str13 = shellImpl3.pipeTwoCommands(str_array10);
    java.lang.String str14 = calApplication2.printCalForYearMondayFirst(str_array10);
    java.nio.file.Path path15 = null;
    java.lang.String[] str_array17 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.getFileContents(str_array10, path15, 10);
    java.lang.String str18 = shellImpl1.globMultiLevel(str_array17);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl19 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl20 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array22 = new java.lang.String[] { "" };
    java.lang.String str23 = shellImpl20.globFilesDirectories(str_array22);
    java.lang.String str24 = shellImpl19.pipeWithException(str_array22);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl25 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array27 = new java.lang.String[] { "" };
    java.lang.String str28 = shellImpl25.globFilesDirectories(str_array27);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl29 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl30 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array32 = new java.lang.String[] { "" };
    java.lang.String str33 = shellImpl30.globFilesDirectories(str_array32);
    java.lang.String str34 = shellImpl29.pipeWithException(str_array32);
    java.lang.String str35 = shellImpl25.globNoPaths(str_array32);
    java.lang.String str36 = shellImpl19.globNoPaths(str_array32);
    java.lang.String str37 = shellImpl1.globFilesDirectories(str_array32);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication38 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl39 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array41 = new java.lang.String[] { "" };
    java.lang.String str42 = shellImpl39.globFilesDirectories(str_array41);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication43 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl44 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array46 = new java.lang.String[] { "" };
    java.lang.String str47 = shellImpl44.globFilesDirectories(str_array46);
    java.lang.String str48 = calApplication43.printCalForYear(str_array46);
    java.lang.String str49 = shellImpl39.pipeTwoCommands(str_array46);
    java.lang.String str50 = calApplication38.printCalForYearMondayFirst(str_array46);
    java.nio.file.Path path51 = null;
    java.lang.String[] str_array53 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.getFileContents(str_array46, path51, 10);
    java.lang.String str54 = shellImpl1.globOneFile(str_array53);
    java.util.List list55 = sortApplication0.sortNumbersSpecialChars(str_array53);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication56 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl57 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array59 = new java.lang.String[] { "" };
    java.lang.String str60 = shellImpl57.globFilesDirectories(str_array59);
    java.lang.String str61 = calApplication56.printCalForYear(str_array59);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl62 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array64 = new java.lang.String[] { "" };
    java.lang.String str65 = shellImpl62.globFilesDirectories(str_array64);
    boolean b66 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.isNumberCommandFormat(str_array64);
    java.lang.String str67 = calApplication56.printCalForMonthYearMondayFirst(str_array64);
    java.util.List list68 = sortApplication0.sortAllWithNumFlagOn(str_array64);
    sg.edu.nus.comp.cs4218.misc.MergeSort mergeSort70 = new sg.edu.nus.comp.cs4218.misc.MergeSort(false);
    java.lang.String str72 = mergeSort70.extractFirstNumberWordFromLine("=");
    int i75 = mergeSort70.customCompare("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n", "");
    int i78 = mergeSort70.compareIncludeNumOrder("0", "||");
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl79 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl80 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array82 = new java.lang.String[] { "" };
    java.lang.String str83 = shellImpl80.globFilesDirectories(str_array82);
    java.lang.String str84 = shellImpl79.pipeWithException(str_array82);
    java.lang.String[] str_array87 = mergeSort70.mergeSort(str_array82, 20, 1);
    java.util.List list88 = sortApplication0.sortSpecialChars(str_array87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\r\n"+ "'", str6.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "\r\n"+ "'", str11.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str12.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + ""+ "'", str13.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Invalid flag provided."+ "'", str14.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + ""+ "'", str18.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "\r\n"+ "'", str23.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + ""+ "'", str24.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "\r\n"+ "'", str28.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "\r\n"+ "'", str33.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + ""+ "'", str34.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + ""+ "'", str35.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + ""+ "'", str36.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "\r\n"+ "'", str37.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "\r\n"+ "'", str42.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "\r\n"+ "'", str47.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str48.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + ""+ "'", str49.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "Invalid flag provided."+ "'", str50.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + ""+ "'", str54.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "\r\n"+ "'", str60.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str61.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "\r\n"+ "'", str65.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "Invalid flag provided."+ "'", str67.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str72 + "' != '" + ""+ "'", str72.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i75 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i78 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str83 + "' != '" + "\r\n"+ "'", str83.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str84 + "' != '" + ""+ "'", str84.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list88);

  }

  @Test
  public void test067() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test067"); }


    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl1 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl3 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array5 = new java.lang.String[] { "" };
    java.lang.String str6 = shellImpl3.globFilesDirectories(str_array5);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl8 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array10 = new java.lang.String[] { "" };
    java.lang.String str11 = shellImpl8.globFilesDirectories(str_array10);
    java.lang.String str12 = calApplication7.printCalForYear(str_array10);
    java.lang.String str13 = shellImpl3.pipeTwoCommands(str_array10);
    java.lang.String str14 = calApplication2.printCalForYearMondayFirst(str_array10);
    java.nio.file.Path path15 = null;
    java.lang.String[] str_array17 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.getFileContents(str_array10, path15, 10);
    java.lang.String str18 = shellImpl1.globMultiLevel(str_array17);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl19 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl20 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array22 = new java.lang.String[] { "" };
    java.lang.String str23 = shellImpl20.globFilesDirectories(str_array22);
    java.lang.String str24 = shellImpl19.pipeWithException(str_array22);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl25 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array27 = new java.lang.String[] { "" };
    java.lang.String str28 = shellImpl25.globFilesDirectories(str_array27);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl29 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl30 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array32 = new java.lang.String[] { "" };
    java.lang.String str33 = shellImpl30.globFilesDirectories(str_array32);
    java.lang.String str34 = shellImpl29.pipeWithException(str_array32);
    java.lang.String str35 = shellImpl25.globNoPaths(str_array32);
    java.lang.String str36 = shellImpl19.globNoPaths(str_array32);
    java.lang.String str37 = shellImpl1.globFilesDirectories(str_array32);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication38 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl39 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array41 = new java.lang.String[] { "" };
    java.lang.String str42 = shellImpl39.globFilesDirectories(str_array41);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication43 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl44 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array46 = new java.lang.String[] { "" };
    java.lang.String str47 = shellImpl44.globFilesDirectories(str_array46);
    java.lang.String str48 = calApplication43.printCalForYear(str_array46);
    java.lang.String str49 = shellImpl39.pipeTwoCommands(str_array46);
    java.lang.String str50 = calApplication38.printCalForYearMondayFirst(str_array46);
    java.nio.file.Path path51 = null;
    java.lang.String[] str_array53 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.getFileContents(str_array46, path51, 10);
    java.lang.String str54 = shellImpl1.globOneFile(str_array53);
    java.util.List list55 = sortApplication0.sortNumbersSpecialChars(str_array53);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl56 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl57 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array59 = new java.lang.String[] { "" };
    java.lang.String str60 = shellImpl57.globFilesDirectories(str_array59);
    java.lang.String str61 = shellImpl56.pipeWithException(str_array59);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl62 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array64 = new java.lang.String[] { "" };
    java.lang.String str65 = shellImpl62.globFilesDirectories(str_array64);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl66 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl67 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array69 = new java.lang.String[] { "" };
    java.lang.String str70 = shellImpl67.globFilesDirectories(str_array69);
    java.lang.String str71 = shellImpl66.pipeWithException(str_array69);
    java.lang.String str72 = shellImpl62.globNoPaths(str_array69);
    java.lang.String str73 = shellImpl56.globNoPaths(str_array69);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication74 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl75 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl76 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl77 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array79 = new java.lang.String[] { "" };
    java.lang.String str80 = shellImpl77.globFilesDirectories(str_array79);
    java.lang.String str81 = shellImpl76.pipeWithException(str_array79);
    java.lang.String str82 = shellImpl75.globFilesDirectories(str_array79);
    java.lang.String str83 = bcApplication74.number(str_array79);
    java.lang.String str84 = shellImpl56.pipeWithException(str_array79);
    java.util.List list85 = sortApplication0.sortSimpleCapitalNumber(str_array79);
    java.lang.String[] str_array87 = new java.lang.String[] { "." };
    java.util.List list88 = sortApplication0.sortCapitalSpecialChars(str_array87);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl89 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl90 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array92 = new java.lang.String[] { "" };
    java.lang.String str93 = shellImpl90.globFilesDirectories(str_array92);
    java.lang.String str94 = shellImpl89.pipeWithException(str_array92);
    java.lang.String[] str_array95 = sg.edu.nus.comp.cs4218.impl.ShellImpl.processBQ(str_array92);
    java.util.List list96 = sortApplication0.sortSpecialChars(str_array95);
    java.lang.String[] str_array98 = new java.lang.String[] { "<" };
    java.util.List list99 = sortApplication0.sortNumbersSpecialCharsWithNumFlagOn(str_array98);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\r\n"+ "'", str6.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "\r\n"+ "'", str11.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str12.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + ""+ "'", str13.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Invalid flag provided."+ "'", str14.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + ""+ "'", str18.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "\r\n"+ "'", str23.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + ""+ "'", str24.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "\r\n"+ "'", str28.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "\r\n"+ "'", str33.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + ""+ "'", str34.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + ""+ "'", str35.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + ""+ "'", str36.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "\r\n"+ "'", str37.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "\r\n"+ "'", str42.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "\r\n"+ "'", str47.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str48.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + ""+ "'", str49.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "Invalid flag provided."+ "'", str50.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + ""+ "'", str54.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "\r\n"+ "'", str60.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + ""+ "'", str61.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "\r\n"+ "'", str65.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str70 + "' != '" + "\r\n"+ "'", str70.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str71 + "' != '" + ""+ "'", str71.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str72 + "' != '" + ""+ "'", str72.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str73 + "' != '" + ""+ "'", str73.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str80 + "' != '" + "\r\n"+ "'", str80.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str81 + "' != '" + ""+ "'", str81.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str82 + "' != '" + "\r\n"+ "'", str82.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str83 + "' != '" + "1"+ "'", str83.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str84 + "' != '" + ""+ "'", str84.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str93 + "' != '" + "\r\n"+ "'", str93.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str94 + "' != '" + ""+ "'", str94.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array95);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list96);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array98);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list99);

  }

  @Test
  public void test068() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test068"); }


    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication0 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    java.lang.String[] str_array2 = new java.lang.String[] { ">" };
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str3 = bcApplication0.orMethod(str_array2);
      org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException");
    } catch (java.util.EmptyStackException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.util.EmptyStackException")) {
        org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array2);

  }

  @Test
  public void test069() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test069"); }


    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication0 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.EchoApplication echoApplication1 = new sg.edu.nus.comp.cs4218.impl.app.EchoApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl3 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array5 = new java.lang.String[] { "" };
    java.lang.String str6 = shellImpl3.globFilesDirectories(str_array5);
    java.lang.String str7 = calApplication2.printCalForYear(str_array5);
    java.io.InputStream inputStream8 = null;
    java.io.OutputStream outputStream10 = sg.edu.nus.comp.cs4218.impl.ShellImpl.openOutputRedir("File output redirection and pipe operator cannot be used side by side.");
    echoApplication1.run(str_array5, inputStream8, outputStream10);
    java.lang.String str12 = bcApplication0.number(str_array5);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication13 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl14 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array16 = new java.lang.String[] { "" };
    java.lang.String str17 = shellImpl14.globFilesDirectories(str_array16);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication18 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl19 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array21 = new java.lang.String[] { "" };
    java.lang.String str22 = shellImpl19.globFilesDirectories(str_array21);
    java.lang.String str23 = calApplication18.printCalForYear(str_array21);
    java.lang.String str24 = shellImpl14.pipeTwoCommands(str_array21);
    java.lang.String str25 = calApplication13.printCalForYearMondayFirst(str_array21);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl26 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array28 = new java.lang.String[] { "" };
    java.lang.String str29 = shellImpl26.globFilesDirectories(str_array28);
    java.lang.String str30 = calApplication13.printCalForYear(str_array28);
    java.io.InputStream inputStream31 = null;
    sg.edu.nus.comp.cs4218.impl.app.EchoApplication echoApplication32 = new sg.edu.nus.comp.cs4218.impl.app.EchoApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication33 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl34 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array36 = new java.lang.String[] { "" };
    java.lang.String str37 = shellImpl34.globFilesDirectories(str_array36);
    java.lang.String str38 = calApplication33.printCalForYear(str_array36);
    java.io.InputStream inputStream39 = null;
    java.io.OutputStream outputStream41 = sg.edu.nus.comp.cs4218.impl.ShellImpl.openOutputRedir("File output redirection and pipe operator cannot be used side by side.");
    echoApplication32.run(str_array36, inputStream39, outputStream41);
    // The following exception was thrown during execution in test generation
    try {
      bcApplication0.run(str_array28, inputStream31, outputStream41);
      org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException");
    } catch (java.util.EmptyStackException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.util.EmptyStackException")) {
        org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\r\n"+ "'", str6.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str7.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(outputStream10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "1"+ "'", str12.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "\r\n"+ "'", str17.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "\r\n"+ "'", str22.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str23.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + ""+ "'", str24.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Invalid flag provided."+ "'", str25.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "\r\n"+ "'", str29.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str30.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "\r\n"+ "'", str37.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str38.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(outputStream41);

  }

  @Test
  public void test070() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test070"); }


    sg.edu.nus.comp.cs4218.misc.MergeSort mergeSort1 = new sg.edu.nus.comp.cs4218.misc.MergeSort(false);
    java.lang.String str3 = mergeSort1.extractFirstNumberWordFromLine("");
    int i5 = mergeSort1.getRank('!');
    int i8 = mergeSort1.compareIncludeNumOrder("||", "Input redirection file same as output redirection file.");
    int i11 = mergeSort1.compareIncludeNumOrder("=", "Invalid flag provided.");
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl12 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication13 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl14 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array16 = new java.lang.String[] { "" };
    java.lang.String str17 = shellImpl14.globFilesDirectories(str_array16);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication18 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl19 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array21 = new java.lang.String[] { "" };
    java.lang.String str22 = shellImpl19.globFilesDirectories(str_array21);
    java.lang.String str23 = calApplication18.printCalForYear(str_array21);
    java.lang.String str24 = shellImpl14.pipeTwoCommands(str_array21);
    java.lang.String str25 = calApplication13.printCalForYearMondayFirst(str_array21);
    java.nio.file.Path path26 = null;
    java.lang.String[] str_array28 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.getFileContents(str_array21, path26, 10);
    java.lang.String str29 = shellImpl12.globMultiLevel(str_array28);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl30 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array32 = new java.lang.String[] { "" };
    java.lang.String str33 = shellImpl30.globFilesDirectories(str_array32);
    java.lang.String str34 = shellImpl12.pipeTwoCommands(str_array32);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl35 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl36 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array38 = new java.lang.String[] { "" };
    java.lang.String str39 = shellImpl36.globFilesDirectories(str_array38);
    java.lang.String str40 = shellImpl35.pipeWithException(str_array38);
    java.lang.String[] str_array41 = sg.edu.nus.comp.cs4218.impl.ShellImpl.processBQ(str_array38);
    java.lang.String str42 = shellImpl12.globOneFile(str_array41);
    java.nio.file.Path path43 = null;
    java.lang.String[] str_array45 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.getFileContents(str_array41, path43, 5);
    // The following exception was thrown during execution in test generation
    try {
      mergeSort1.merge(str_array41, 15, 20, (-29));
      org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException");
    } catch (java.lang.NegativeArraySizeException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NegativeArraySizeException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + ""+ "'", str3.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "\r\n"+ "'", str17.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "\r\n"+ "'", str22.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str23.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + ""+ "'", str24.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Invalid flag provided."+ "'", str25.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + ""+ "'", str29.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "\r\n"+ "'", str33.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + ""+ "'", str34.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "\r\n"+ "'", str39.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + ""+ "'", str40.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "\r\n"+ "'", str42.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array45);

  }

  @Test
  public void test071() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test071"); }


    sg.edu.nus.comp.cs4218.impl.cmd.CallCommand callCommand1 = new sg.edu.nus.comp.cs4218.impl.cmd.CallCommand("Invalid app.");
    callCommand1.parse();
    java.lang.String str3 = callCommand1.getInputStreamS();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + ""+ "'", str3.equals(""));

  }

  @Test
  public void test072() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test072"); }


    java.lang.String str1 = sg.edu.nus.comp.cs4218.misc.SignChecker.negation("==");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "-=="+ "'", str1.equals("-=="));

  }

  @Test
  public void test073() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test073"); }


    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication0 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.EchoApplication echoApplication1 = new sg.edu.nus.comp.cs4218.impl.app.EchoApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl3 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array5 = new java.lang.String[] { "" };
    java.lang.String str6 = shellImpl3.globFilesDirectories(str_array5);
    java.lang.String str7 = calApplication2.printCalForYear(str_array5);
    java.io.InputStream inputStream8 = null;
    java.io.OutputStream outputStream10 = sg.edu.nus.comp.cs4218.impl.ShellImpl.openOutputRedir("File output redirection and pipe operator cannot be used side by side.");
    echoApplication1.run(str_array5, inputStream8, outputStream10);
    java.lang.String str12 = bcApplication0.number(str_array5);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl13 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication14 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl15 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array17 = new java.lang.String[] { "" };
    java.lang.String str18 = shellImpl15.globFilesDirectories(str_array17);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication19 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl20 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array22 = new java.lang.String[] { "" };
    java.lang.String str23 = shellImpl20.globFilesDirectories(str_array22);
    java.lang.String str24 = calApplication19.printCalForYear(str_array22);
    java.lang.String str25 = shellImpl15.pipeTwoCommands(str_array22);
    java.lang.String str26 = calApplication14.printCalForYearMondayFirst(str_array22);
    java.nio.file.Path path27 = null;
    java.lang.String[] str_array29 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.getFileContents(str_array22, path27, 10);
    java.lang.String str30 = shellImpl13.globMultiLevel(str_array29);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl31 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array33 = new java.lang.String[] { "" };
    java.lang.String str34 = shellImpl31.globFilesDirectories(str_array33);
    java.lang.String str35 = shellImpl13.pipeTwoCommands(str_array33);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl36 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl37 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array39 = new java.lang.String[] { "" };
    java.lang.String str40 = shellImpl37.globFilesDirectories(str_array39);
    java.lang.String str41 = shellImpl36.pipeWithException(str_array39);
    java.lang.String[] str_array42 = sg.edu.nus.comp.cs4218.impl.ShellImpl.processBQ(str_array39);
    java.lang.String str43 = shellImpl13.globOneFile(str_array42);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication44 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl45 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array47 = new java.lang.String[] { "" };
    java.lang.String str48 = shellImpl45.globFilesDirectories(str_array47);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication49 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl50 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array52 = new java.lang.String[] { "" };
    java.lang.String str53 = shellImpl50.globFilesDirectories(str_array52);
    java.lang.String str54 = calApplication49.printCalForYear(str_array52);
    java.lang.String str55 = shellImpl45.pipeTwoCommands(str_array52);
    java.lang.String str56 = calApplication44.printCalForYearMondayFirst(str_array52);
    java.nio.file.Path path57 = null;
    java.lang.String[] str_array59 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.getFileContents(str_array52, path57, 10);
    java.lang.String str60 = shellImpl13.globMultiLevel(str_array59);
    java.nio.file.Path path61 = null;
    java.lang.String[] str_array63 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.getFileContents(str_array59, path61, 4);
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str64 = bcApplication0.negate(str_array59);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\r\n"+ "'", str6.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str7.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(outputStream10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "1"+ "'", str12.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "\r\n"+ "'", str18.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "\r\n"+ "'", str23.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str24.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + ""+ "'", str25.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "Invalid flag provided."+ "'", str26.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + ""+ "'", str30.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "\r\n"+ "'", str34.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + ""+ "'", str35.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "\r\n"+ "'", str40.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + ""+ "'", str41.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "\r\n"+ "'", str43.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "\r\n"+ "'", str48.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "\r\n"+ "'", str53.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str54.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + ""+ "'", str55.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "Invalid flag provided."+ "'", str56.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + ""+ "'", str60.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array63);

  }

  @Test
  public void test074() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test074"); }


    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl0 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array2 = new java.lang.String[] { "" };
    java.lang.String str3 = shellImpl0.globFilesDirectories(str_array2);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication4 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl5 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array7 = new java.lang.String[] { "" };
    java.lang.String str8 = shellImpl5.globFilesDirectories(str_array7);
    java.lang.String str9 = calApplication4.printCalForYear(str_array7);
    java.lang.String str10 = shellImpl0.pipeTwoCommands(str_array7);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication11 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl12 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array14 = new java.lang.String[] { "" };
    java.lang.String str15 = shellImpl12.globFilesDirectories(str_array14);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication16 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl17 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array19 = new java.lang.String[] { "" };
    java.lang.String str20 = shellImpl17.globFilesDirectories(str_array19);
    java.lang.String str21 = calApplication16.printCalForYear(str_array19);
    java.lang.String str22 = shellImpl12.pipeTwoCommands(str_array19);
    java.lang.String str23 = calApplication11.printCalForYearMondayFirst(str_array19);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl24 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array26 = new java.lang.String[] { "" };
    java.lang.String str27 = shellImpl24.globFilesDirectories(str_array26);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication28 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl29 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array31 = new java.lang.String[] { "" };
    java.lang.String str32 = shellImpl29.globFilesDirectories(str_array31);
    java.lang.String str33 = calApplication28.printCalForYear(str_array31);
    java.lang.String str34 = shellImpl24.pipeTwoCommands(str_array31);
    sg.edu.nus.comp.cs4218.impl.cmd.CallCommand callCommand35 = new sg.edu.nus.comp.cs4218.impl.cmd.CallCommand();
    java.lang.String str36 = callCommand35.getInputStreamS();
    callCommand35.terminate();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication38 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl39 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array41 = new java.lang.String[] { "" };
    java.lang.String str42 = shellImpl39.globFilesDirectories(str_array41);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication43 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl44 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array46 = new java.lang.String[] { "" };
    java.lang.String str47 = shellImpl44.globFilesDirectories(str_array46);
    java.lang.String str48 = calApplication43.printCalForYear(str_array46);
    java.lang.String str49 = shellImpl39.pipeTwoCommands(str_array46);
    java.lang.String str50 = calApplication38.printCalForYearMondayFirst(str_array46);
    java.nio.file.Path path51 = null;
    java.lang.String[] str_array53 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.getFileContents(str_array46, path51, 10);
    java.lang.String[] str_array54 = callCommand35.evaluateGlob(str_array46);
    java.lang.String str55 = shellImpl24.globMultiLevel(str_array46);
    java.lang.String str56 = calApplication11.printCal(str_array46);
    java.lang.String str57 = shellImpl0.globMultiLevel(str_array46);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl58 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array60 = new java.lang.String[] { "" };
    java.lang.String str61 = shellImpl58.globFilesDirectories(str_array60);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl62 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl63 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array65 = new java.lang.String[] { "" };
    java.lang.String str66 = shellImpl63.globFilesDirectories(str_array65);
    java.lang.String str67 = shellImpl62.pipeWithException(str_array65);
    java.lang.String str68 = shellImpl58.globNoPaths(str_array65);
    java.lang.String str69 = shellImpl0.pipeWithException(str_array65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "\r\n"+ "'", str3.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\r\n"+ "'", str8.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str9.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + ""+ "'", str10.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "\r\n"+ "'", str15.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "\r\n"+ "'", str20.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str21.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + ""+ "'", str22.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "Invalid flag provided."+ "'", str23.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "\r\n"+ "'", str27.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "\r\n"+ "'", str32.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str33.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + ""+ "'", str34.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + ""+ "'", str36.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "\r\n"+ "'", str42.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "\r\n"+ "'", str47.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str48.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + ""+ "'", str49.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "Invalid flag provided."+ "'", str50.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "\r\n"+ "'", str55.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "     March 2016     \r\nSu Mo Tu We Th Fr Sa\r\n       1  2  3  4  5\r\n 6  7  8  9 10 11 12\r\n13 14 15 16 17 18 19\r\n20 21 22 23 24 25 26\r\n27 28 29 30 31\r\n"+ "'", str56.equals("     March 2016     \r\nSu Mo Tu We Th Fr Sa\r\n       1  2  3  4  5\r\n 6  7  8  9 10 11 12\r\n13 14 15 16 17 18 19\r\n20 21 22 23 24 25 26\r\n27 28 29 30 31\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "\r\n"+ "'", str57.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "\r\n"+ "'", str61.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "\r\n"+ "'", str66.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + ""+ "'", str67.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str68 + "' != '" + ""+ "'", str68.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + ""+ "'", str69.equals(""));

  }

  @Test
  public void test075() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test075"); }


    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl0 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array2 = new java.lang.String[] { "" };
    java.lang.String str3 = shellImpl0.globFilesDirectories(str_array2);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl4 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl5 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array7 = new java.lang.String[] { "" };
    java.lang.String str8 = shellImpl5.globFilesDirectories(str_array7);
    java.lang.String str9 = shellImpl4.pipeWithException(str_array7);
    java.lang.String str10 = shellImpl0.globNoPaths(str_array7);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl11 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array13 = new java.lang.String[] { "" };
    java.lang.String str14 = shellImpl11.globFilesDirectories(str_array13);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication15 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl16 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array18 = new java.lang.String[] { "" };
    java.lang.String str19 = shellImpl16.globFilesDirectories(str_array18);
    java.lang.String str20 = calApplication15.printCalForYear(str_array18);
    java.lang.String str21 = shellImpl11.pipeTwoCommands(str_array18);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication22 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication23 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl24 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array26 = new java.lang.String[] { "" };
    java.lang.String str27 = shellImpl24.globFilesDirectories(str_array26);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication28 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl29 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array31 = new java.lang.String[] { "" };
    java.lang.String str32 = shellImpl29.globFilesDirectories(str_array31);
    java.lang.String str33 = calApplication28.printCalForYear(str_array31);
    java.lang.String str34 = shellImpl24.pipeTwoCommands(str_array31);
    java.lang.String str35 = calApplication23.printCalForYearMondayFirst(str_array31);
    java.nio.file.Path path36 = null;
    java.lang.String[] str_array38 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.getFileContents(str_array31, path36, 10);
    java.lang.String str39 = calApplication22.printCal(str_array38);
    java.lang.String str40 = shellImpl11.globOneFile(str_array38);
    java.lang.String str41 = shellImpl0.globNoPaths(str_array38);
    java.lang.String[] str_array42 = null;
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str43 = shellImpl0.pipeMultipleCommands(str_array42);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "\r\n"+ "'", str3.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\r\n"+ "'", str8.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + ""+ "'", str10.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\r\n"+ "'", str14.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "\r\n"+ "'", str19.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str20.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + ""+ "'", str21.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "\r\n"+ "'", str27.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "\r\n"+ "'", str32.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str33.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + ""+ "'", str34.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "Invalid flag provided."+ "'", str35.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "     March 2016     \r\nSu Mo Tu We Th Fr Sa\r\n       1  2  3  4  5\r\n 6  7  8  9 10 11 12\r\n13 14 15 16 17 18 19\r\n20 21 22 23 24 25 26\r\n27 28 29 30 31\r\n"+ "'", str39.equals("     March 2016     \r\nSu Mo Tu We Th Fr Sa\r\n       1  2  3  4  5\r\n 6  7  8  9 10 11 12\r\n13 14 15 16 17 18 19\r\n20 21 22 23 24 25 26\r\n27 28 29 30 31\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + ""+ "'", str40.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + ""+ "'", str41.equals(""));

  }

  @Test
  public void test076() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test076"); }


    sg.edu.nus.comp.cs4218.impl.cmd.SequenceCommand sequenceCommand1 = new sg.edu.nus.comp.cs4218.impl.cmd.SequenceCommand("Missing arg for pipe command.");
    java.io.InputStream inputStream2 = null;
    sg.edu.nus.comp.cs4218.impl.app.EchoApplication echoApplication3 = new sg.edu.nus.comp.cs4218.impl.app.EchoApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication4 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl5 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array7 = new java.lang.String[] { "" };
    java.lang.String str8 = shellImpl5.globFilesDirectories(str_array7);
    java.lang.String str9 = calApplication4.printCalForYear(str_array7);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl10 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array12 = new java.lang.String[] { "" };
    java.lang.String str13 = shellImpl10.globFilesDirectories(str_array12);
    boolean b14 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.isNumberCommandFormat(str_array12);
    java.lang.String str15 = calApplication4.printCalForMonthYearMondayFirst(str_array12);
    java.nio.file.Path path16 = null;
    java.lang.String[] str_array18 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.getFileContents(str_array12, path16, 4);
    java.io.InputStream inputStream19 = null;
    sg.edu.nus.comp.cs4218.impl.app.EchoApplication echoApplication20 = new sg.edu.nus.comp.cs4218.impl.app.EchoApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication21 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl22 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array24 = new java.lang.String[] { "" };
    java.lang.String str25 = shellImpl22.globFilesDirectories(str_array24);
    java.lang.String str26 = calApplication21.printCalForYear(str_array24);
    java.io.InputStream inputStream27 = null;
    java.io.OutputStream outputStream29 = sg.edu.nus.comp.cs4218.impl.ShellImpl.openOutputRedir("File output redirection and pipe operator cannot be used side by side.");
    echoApplication20.run(str_array24, inputStream27, outputStream29);
    echoApplication3.run(str_array18, inputStream19, outputStream29);
    // The following exception was thrown during execution in test generation
    try {
      sequenceCommand1.evaluate(inputStream2, outputStream29);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\r\n"+ "'", str8.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str9.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "\r\n"+ "'", str13.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "Invalid flag provided."+ "'", str15.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "\r\n"+ "'", str25.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str26.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(outputStream29);

  }

  @Test
  public void test077() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test077"); }


    sg.edu.nus.comp.cs4218.impl.cmd.CallCommand callCommand1 = new sg.edu.nus.comp.cs4218.impl.cmd.CallCommand("Invalid app.");
    callCommand1.parse();
    java.util.Vector vector5 = sg.edu.nus.comp.cs4218.misc.ExpressionEvaluator.infixToPostfix("0");
    int i7 = callCommand1.extractOutputRedir(".", vector5, 1);
    callCommand1.parse();
    callCommand1.parse();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(vector5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);

  }

  @Test
  public void test078() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test078"); }


    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication0 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl1 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl2 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl3 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array5 = new java.lang.String[] { "" };
    java.lang.String str6 = shellImpl3.globFilesDirectories(str_array5);
    java.lang.String str7 = shellImpl2.pipeWithException(str_array5);
    java.lang.String str8 = shellImpl1.globFilesDirectories(str_array5);
    java.lang.String str9 = bcApplication0.number(str_array5);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl10 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array12 = new java.lang.String[] { "" };
    java.lang.String str13 = shellImpl10.globFilesDirectories(str_array12);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication14 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl15 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array17 = new java.lang.String[] { "" };
    java.lang.String str18 = shellImpl15.globFilesDirectories(str_array17);
    java.lang.String str19 = calApplication14.printCalForYear(str_array17);
    java.lang.String str20 = shellImpl10.pipeTwoCommands(str_array17);
    java.lang.String str21 = bcApplication0.number(str_array17);
    java.lang.String[] str_array23 = new java.lang.String[] { "Invalid syntax encountered." };
    boolean b24 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.isNumberCommandFormat(str_array23);
    java.lang.String str25 = bcApplication0.lessThan(str_array23);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl26 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl27 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl28 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array30 = new java.lang.String[] { "" };
    java.lang.String str31 = shellImpl28.globFilesDirectories(str_array30);
    java.lang.String str32 = shellImpl27.pipeWithException(str_array30);
    java.lang.String str33 = shellImpl26.globFilesDirectories(str_array30);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication34 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl35 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array37 = new java.lang.String[] { "" };
    java.lang.String str38 = shellImpl35.globFilesDirectories(str_array37);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication39 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl40 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array42 = new java.lang.String[] { "" };
    java.lang.String str43 = shellImpl40.globFilesDirectories(str_array42);
    java.lang.String str44 = calApplication39.printCalForYear(str_array42);
    java.lang.String str45 = shellImpl35.pipeTwoCommands(str_array42);
    java.lang.String str46 = calApplication34.printCalForYearMondayFirst(str_array42);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl47 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array49 = new java.lang.String[] { "" };
    java.lang.String str50 = shellImpl47.globFilesDirectories(str_array49);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication51 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl52 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array54 = new java.lang.String[] { "" };
    java.lang.String str55 = shellImpl52.globFilesDirectories(str_array54);
    java.lang.String str56 = calApplication51.printCalForYear(str_array54);
    java.lang.String str57 = shellImpl47.pipeTwoCommands(str_array54);
    sg.edu.nus.comp.cs4218.impl.cmd.CallCommand callCommand58 = new sg.edu.nus.comp.cs4218.impl.cmd.CallCommand();
    java.lang.String str59 = callCommand58.getInputStreamS();
    callCommand58.terminate();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication61 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl62 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array64 = new java.lang.String[] { "" };
    java.lang.String str65 = shellImpl62.globFilesDirectories(str_array64);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication66 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl67 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array69 = new java.lang.String[] { "" };
    java.lang.String str70 = shellImpl67.globFilesDirectories(str_array69);
    java.lang.String str71 = calApplication66.printCalForYear(str_array69);
    java.lang.String str72 = shellImpl62.pipeTwoCommands(str_array69);
    java.lang.String str73 = calApplication61.printCalForYearMondayFirst(str_array69);
    java.nio.file.Path path74 = null;
    java.lang.String[] str_array76 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.getFileContents(str_array69, path74, 10);
    java.lang.String[] str_array77 = callCommand58.evaluateGlob(str_array69);
    java.lang.String str78 = shellImpl47.globMultiLevel(str_array69);
    java.lang.String str79 = calApplication34.printCal(str_array69);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl80 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl81 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array83 = new java.lang.String[] { "" };
    java.lang.String str84 = shellImpl81.globFilesDirectories(str_array83);
    java.lang.String str85 = shellImpl80.pipeWithException(str_array83);
    java.lang.String[] str_array86 = sg.edu.nus.comp.cs4218.impl.ShellImpl.processBQ(str_array83);
    java.lang.String str87 = calApplication34.printCalForMonthYearMondayFirst(str_array83);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl88 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl89 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array91 = new java.lang.String[] { "" };
    java.lang.String str92 = shellImpl89.globFilesDirectories(str_array91);
    java.lang.String str93 = shellImpl88.pipeWithException(str_array91);
    java.lang.String str94 = calApplication34.printCalForMonthYearMondayFirst(str_array91);
    java.lang.String str95 = shellImpl26.globFilesDirectories(str_array91);
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str96 = bcApplication0.equalEqual(str_array91);
      org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException");
    } catch (java.util.EmptyStackException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.util.EmptyStackException")) {
        org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\r\n"+ "'", str6.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + ""+ "'", str7.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\r\n"+ "'", str8.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "1"+ "'", str9.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "\r\n"+ "'", str13.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "\r\n"+ "'", str18.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str19.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + ""+ "'", str20.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "1"+ "'", str21.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "bc: Unknown character detected I"+ "'", str25.equals("bc: Unknown character detected I"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "\r\n"+ "'", str31.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + ""+ "'", str32.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "\r\n"+ "'", str33.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "\r\n"+ "'", str38.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "\r\n"+ "'", str43.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str44.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + ""+ "'", str45.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "Invalid flag provided."+ "'", str46.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "\r\n"+ "'", str50.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "\r\n"+ "'", str55.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str56.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + ""+ "'", str57.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + ""+ "'", str59.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "\r\n"+ "'", str65.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str70 + "' != '" + "\r\n"+ "'", str70.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str71 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str71.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str72 + "' != '" + ""+ "'", str72.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str73 + "' != '" + "Invalid flag provided."+ "'", str73.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str78 + "' != '" + "\r\n"+ "'", str78.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str79 + "' != '" + "     March 2016     \r\nSu Mo Tu We Th Fr Sa\r\n       1  2  3  4  5\r\n 6  7  8  9 10 11 12\r\n13 14 15 16 17 18 19\r\n20 21 22 23 24 25 26\r\n27 28 29 30 31\r\n"+ "'", str79.equals("     March 2016     \r\nSu Mo Tu We Th Fr Sa\r\n       1  2  3  4  5\r\n 6  7  8  9 10 11 12\r\n13 14 15 16 17 18 19\r\n20 21 22 23 24 25 26\r\n27 28 29 30 31\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str84 + "' != '" + "\r\n"+ "'", str84.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str85 + "' != '" + ""+ "'", str85.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str87 + "' != '" + "Invalid flag provided."+ "'", str87.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str92 + "' != '" + "\r\n"+ "'", str92.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str93 + "' != '" + ""+ "'", str93.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str94 + "' != '" + "Invalid flag provided."+ "'", str94.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str95 + "' != '" + "\r\n"+ "'", str95.equals("\r\n"));

  }

  @Test
  public void test079() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test079"); }


    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication0 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl1 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl2 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl3 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array5 = new java.lang.String[] { "" };
    java.lang.String str6 = shellImpl3.globFilesDirectories(str_array5);
    java.lang.String str7 = shellImpl2.pipeWithException(str_array5);
    java.lang.String str8 = shellImpl1.globFilesDirectories(str_array5);
    java.lang.String str9 = bcApplication0.number(str_array5);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl10 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array12 = new java.lang.String[] { "" };
    java.lang.String str13 = shellImpl10.globFilesDirectories(str_array12);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication14 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl15 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array17 = new java.lang.String[] { "" };
    java.lang.String str18 = shellImpl15.globFilesDirectories(str_array17);
    java.lang.String str19 = calApplication14.printCalForYear(str_array17);
    java.lang.String str20 = shellImpl10.pipeTwoCommands(str_array17);
    java.lang.String str21 = bcApplication0.number(str_array17);
    java.lang.String[] str_array23 = new java.lang.String[] { "Invalid syntax encountered." };
    boolean b24 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.isNumberCommandFormat(str_array23);
    java.lang.String str25 = bcApplication0.lessThan(str_array23);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication26 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl27 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array29 = new java.lang.String[] { "" };
    java.lang.String str30 = shellImpl27.globFilesDirectories(str_array29);
    java.lang.String str31 = calApplication26.printCalForYear(str_array29);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl32 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array34 = new java.lang.String[] { "" };
    java.lang.String str35 = shellImpl32.globFilesDirectories(str_array34);
    boolean b36 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.isNumberCommandFormat(str_array34);
    java.lang.String str37 = calApplication26.printCalForMonthYearMondayFirst(str_array34);
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str38 = bcApplication0.notEqual(str_array34);
      org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException");
    } catch (java.util.EmptyStackException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.util.EmptyStackException")) {
        org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\r\n"+ "'", str6.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + ""+ "'", str7.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\r\n"+ "'", str8.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "1"+ "'", str9.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "\r\n"+ "'", str13.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "\r\n"+ "'", str18.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str19.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + ""+ "'", str20.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "1"+ "'", str21.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "bc: Unknown character detected I"+ "'", str25.equals("bc: Unknown character detected I"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "\r\n"+ "'", str30.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str31.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "\r\n"+ "'", str35.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "Invalid flag provided."+ "'", str37.equals("Invalid flag provided."));

  }

  @Test
  public void test080() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test080"); }


    sg.edu.nus.comp.cs4218.impl.app.EchoApplication echoApplication0 = new sg.edu.nus.comp.cs4218.impl.app.EchoApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "-0" };
    java.lang.String str4 = calApplication1.printCalForYearMondayFirst(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication5 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl6 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl8 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array10 = new java.lang.String[] { "" };
    java.lang.String str11 = shellImpl8.globFilesDirectories(str_array10);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication12 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl13 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array15 = new java.lang.String[] { "" };
    java.lang.String str16 = shellImpl13.globFilesDirectories(str_array15);
    java.lang.String str17 = calApplication12.printCalForYear(str_array15);
    java.lang.String str18 = shellImpl8.pipeTwoCommands(str_array15);
    java.lang.String str19 = calApplication7.printCalForYearMondayFirst(str_array15);
    java.nio.file.Path path20 = null;
    java.lang.String[] str_array22 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.getFileContents(str_array15, path20, 10);
    java.lang.String str23 = shellImpl6.globMultiLevel(str_array22);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl24 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl25 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array27 = new java.lang.String[] { "" };
    java.lang.String str28 = shellImpl25.globFilesDirectories(str_array27);
    java.lang.String str29 = shellImpl24.pipeWithException(str_array27);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl30 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array32 = new java.lang.String[] { "" };
    java.lang.String str33 = shellImpl30.globFilesDirectories(str_array32);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl34 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl35 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array37 = new java.lang.String[] { "" };
    java.lang.String str38 = shellImpl35.globFilesDirectories(str_array37);
    java.lang.String str39 = shellImpl34.pipeWithException(str_array37);
    java.lang.String str40 = shellImpl30.globNoPaths(str_array37);
    java.lang.String str41 = shellImpl24.globNoPaths(str_array37);
    java.lang.String str42 = shellImpl6.globFilesDirectories(str_array37);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication43 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl44 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array46 = new java.lang.String[] { "" };
    java.lang.String str47 = shellImpl44.globFilesDirectories(str_array46);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication48 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl49 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array51 = new java.lang.String[] { "" };
    java.lang.String str52 = shellImpl49.globFilesDirectories(str_array51);
    java.lang.String str53 = calApplication48.printCalForYear(str_array51);
    java.lang.String str54 = shellImpl44.pipeTwoCommands(str_array51);
    java.lang.String str55 = calApplication43.printCalForYearMondayFirst(str_array51);
    java.nio.file.Path path56 = null;
    java.lang.String[] str_array58 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.getFileContents(str_array51, path56, 10);
    java.lang.String str59 = shellImpl6.globOneFile(str_array58);
    java.util.List list60 = sortApplication5.sortNumbersSpecialChars(str_array58);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication61 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl62 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array64 = new java.lang.String[] { "" };
    java.lang.String str65 = shellImpl62.globFilesDirectories(str_array64);
    java.lang.String str66 = calApplication61.printCalForYear(str_array64);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl67 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array69 = new java.lang.String[] { "" };
    java.lang.String str70 = shellImpl67.globFilesDirectories(str_array69);
    boolean b71 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.isNumberCommandFormat(str_array69);
    java.lang.String str72 = calApplication61.printCalForMonthYearMondayFirst(str_array69);
    java.util.List list73 = sortApplication5.sortAllWithNumFlagOn(str_array69);
    java.lang.String[] str_array74 = sg.edu.nus.comp.cs4218.impl.ShellImpl.processBQ(str_array69);
    java.lang.String str75 = calApplication1.printCalForMonthYearMondayFirst(str_array69);
    java.io.InputStream inputStream76 = null;
    java.io.OutputStream outputStream77 = null;
    // The following exception was thrown during execution in test generation
    try {
      echoApplication0.run(str_array69, inputStream76, outputStream77);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.EchoException");
    } catch (sg.edu.nus.comp.cs4218.exception.EchoException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.EchoException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.EchoException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Invalid flag provided."+ "'", str4.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "\r\n"+ "'", str11.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\r\n"+ "'", str16.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str17.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + ""+ "'", str18.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "Invalid flag provided."+ "'", str19.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + ""+ "'", str23.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "\r\n"+ "'", str28.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + ""+ "'", str29.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "\r\n"+ "'", str33.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "\r\n"+ "'", str38.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + ""+ "'", str39.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + ""+ "'", str40.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + ""+ "'", str41.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "\r\n"+ "'", str42.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "\r\n"+ "'", str47.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "\r\n"+ "'", str52.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str53.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + ""+ "'", str54.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "Invalid flag provided."+ "'", str55.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + ""+ "'", str59.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "\r\n"+ "'", str65.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str66.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str70 + "' != '" + "\r\n"+ "'", str70.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str72 + "' != '" + "Invalid flag provided."+ "'", str72.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str75 + "' != '" + "Invalid flag provided."+ "'", str75.equals("Invalid flag provided."));

  }

  @Test
  public void test081() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test081"); }


    boolean b1 = sg.edu.nus.comp.cs4218.misc.ExpressionEvaluator.isParenthesesCountSame("File output redirection and pipe operator cannot be used side by side.");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);

  }

  @Test
  public void test082() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test082"); }


    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl1 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl3 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array5 = new java.lang.String[] { "" };
    java.lang.String str6 = shellImpl3.globFilesDirectories(str_array5);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl8 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array10 = new java.lang.String[] { "" };
    java.lang.String str11 = shellImpl8.globFilesDirectories(str_array10);
    java.lang.String str12 = calApplication7.printCalForYear(str_array10);
    java.lang.String str13 = shellImpl3.pipeTwoCommands(str_array10);
    java.lang.String str14 = calApplication2.printCalForYearMondayFirst(str_array10);
    java.nio.file.Path path15 = null;
    java.lang.String[] str_array17 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.getFileContents(str_array10, path15, 10);
    java.lang.String str18 = shellImpl1.globMultiLevel(str_array17);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl19 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl20 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array22 = new java.lang.String[] { "" };
    java.lang.String str23 = shellImpl20.globFilesDirectories(str_array22);
    java.lang.String str24 = shellImpl19.pipeWithException(str_array22);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl25 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array27 = new java.lang.String[] { "" };
    java.lang.String str28 = shellImpl25.globFilesDirectories(str_array27);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl29 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl30 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array32 = new java.lang.String[] { "" };
    java.lang.String str33 = shellImpl30.globFilesDirectories(str_array32);
    java.lang.String str34 = shellImpl29.pipeWithException(str_array32);
    java.lang.String str35 = shellImpl25.globNoPaths(str_array32);
    java.lang.String str36 = shellImpl19.globNoPaths(str_array32);
    java.lang.String str37 = shellImpl1.globFilesDirectories(str_array32);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication38 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl39 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array41 = new java.lang.String[] { "" };
    java.lang.String str42 = shellImpl39.globFilesDirectories(str_array41);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication43 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl44 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array46 = new java.lang.String[] { "" };
    java.lang.String str47 = shellImpl44.globFilesDirectories(str_array46);
    java.lang.String str48 = calApplication43.printCalForYear(str_array46);
    java.lang.String str49 = shellImpl39.pipeTwoCommands(str_array46);
    java.lang.String str50 = calApplication38.printCalForYearMondayFirst(str_array46);
    java.nio.file.Path path51 = null;
    java.lang.String[] str_array53 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.getFileContents(str_array46, path51, 10);
    java.lang.String str54 = shellImpl1.globOneFile(str_array53);
    java.util.List list55 = sortApplication0.sortNumbersSpecialChars(str_array53);
    sg.edu.nus.comp.cs4218.misc.MergeSort mergeSort57 = new sg.edu.nus.comp.cs4218.misc.MergeSort(false);
    java.lang.String str59 = mergeSort57.extractFirstNumberWordFromLine("");
    int i61 = mergeSort57.getRank('!');
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication62 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl63 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array65 = new java.lang.String[] { "" };
    java.lang.String str66 = shellImpl63.globFilesDirectories(str_array65);
    java.lang.String str67 = calApplication62.printCalForYear(str_array65);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication68 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl69 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array71 = new java.lang.String[] { "" };
    java.lang.String str72 = shellImpl69.globFilesDirectories(str_array71);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication73 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl74 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array76 = new java.lang.String[] { "" };
    java.lang.String str77 = shellImpl74.globFilesDirectories(str_array76);
    java.lang.String str78 = calApplication73.printCalForYear(str_array76);
    java.lang.String str79 = shellImpl69.pipeTwoCommands(str_array76);
    java.lang.String str80 = calApplication68.printCalForYearMondayFirst(str_array76);
    java.nio.file.Path path81 = null;
    java.lang.String[] str_array83 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.getFileContents(str_array76, path81, 10);
    java.lang.String str84 = calApplication62.printCalForYearMondayFirst(str_array83);
    java.lang.String[] str_array87 = mergeSort57.mergeSort(str_array83, 4, (-1));
    java.util.List list88 = sortApplication0.sortSimpleCapital(str_array83);
    java.nio.file.Path path89 = null;
    java.lang.String[] str_array91 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.getFileContents(str_array83, path89, 20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\r\n"+ "'", str6.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "\r\n"+ "'", str11.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str12.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + ""+ "'", str13.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Invalid flag provided."+ "'", str14.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + ""+ "'", str18.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "\r\n"+ "'", str23.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + ""+ "'", str24.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "\r\n"+ "'", str28.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "\r\n"+ "'", str33.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + ""+ "'", str34.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + ""+ "'", str35.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + ""+ "'", str36.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "\r\n"+ "'", str37.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "\r\n"+ "'", str42.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "\r\n"+ "'", str47.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str48.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + ""+ "'", str49.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "Invalid flag provided."+ "'", str50.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + ""+ "'", str54.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + ""+ "'", str59.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "\r\n"+ "'", str66.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str67.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str72 + "' != '" + "\r\n"+ "'", str72.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str77 + "' != '" + "\r\n"+ "'", str77.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str78 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str78.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str79 + "' != '" + ""+ "'", str79.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str80 + "' != '" + "Invalid flag provided."+ "'", str80.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str84 + "' != '" + "Invalid flag provided."+ "'", str84.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array91);

  }

  @Test
  public void test083() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test083"); }


    // The following exception was thrown during execution in test generation
    try {
      java.io.InputStream inputStream1 = sg.edu.nus.comp.cs4218.impl.ShellImpl.openInputRedir("+");
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.ShellException");
    } catch (sg.edu.nus.comp.cs4218.exception.ShellException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.ShellException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.ShellException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test084() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test084"); }


    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl1 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl2 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array4 = new java.lang.String[] { "" };
    java.lang.String str5 = shellImpl2.globFilesDirectories(str_array4);
    java.lang.String str6 = shellImpl1.pipeWithException(str_array4);
    java.util.List list7 = sg.edu.nus.comp.cs4218.misc.SortHelper.separateBasedOnType(1000000000, str_array4);
    java.util.List list8 = sg.edu.nus.comp.cs4218.misc.SortHelper.sortHelperWithNumFlag(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "\r\n"+ "'", str5.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);

  }

  @Test
  public void test085() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test085"); }


    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl0 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl1 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array3 = new java.lang.String[] { "" };
    java.lang.String str4 = shellImpl1.globFilesDirectories(str_array3);
    java.lang.String str5 = shellImpl0.pipeWithException(str_array3);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl6 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array8 = new java.lang.String[] { "" };
    java.lang.String str9 = shellImpl6.globFilesDirectories(str_array8);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl10 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl11 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array13 = new java.lang.String[] { "" };
    java.lang.String str14 = shellImpl11.globFilesDirectories(str_array13);
    java.lang.String str15 = shellImpl10.pipeWithException(str_array13);
    java.lang.String str16 = shellImpl6.globNoPaths(str_array13);
    java.lang.String str17 = shellImpl0.globNoPaths(str_array13);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl18 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl19 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl20 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array22 = new java.lang.String[] { "" };
    java.lang.String str23 = shellImpl20.globFilesDirectories(str_array22);
    java.lang.String str24 = shellImpl19.pipeWithException(str_array22);
    java.lang.String str25 = shellImpl18.globFilesDirectories(str_array22);
    java.lang.String str26 = shellImpl0.globNoPaths(str_array22);
    boolean b27 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.isNumberCommandFormat(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\r\n"+ "'", str4.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "\r\n"+ "'", str9.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\r\n"+ "'", str14.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + ""+ "'", str15.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + ""+ "'", str16.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + ""+ "'", str17.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "\r\n"+ "'", str23.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + ""+ "'", str24.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "\r\n"+ "'", str25.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + ""+ "'", str26.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);

  }

  @Test
  public void test086() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test086"); }


    sg.edu.nus.comp.cs4218.misc.MergeSort mergeSort1 = new sg.edu.nus.comp.cs4218.misc.MergeSort(false);
    java.lang.String str3 = mergeSort1.extractFirstNumberWordFromLine("");
    int i5 = mergeSort1.getRank('!');
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication6 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl7 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array9 = new java.lang.String[] { "" };
    java.lang.String str10 = shellImpl7.globFilesDirectories(str_array9);
    java.lang.String str11 = calApplication6.printCalForYear(str_array9);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication12 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl13 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array15 = new java.lang.String[] { "" };
    java.lang.String str16 = shellImpl13.globFilesDirectories(str_array15);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication17 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl18 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array20 = new java.lang.String[] { "" };
    java.lang.String str21 = shellImpl18.globFilesDirectories(str_array20);
    java.lang.String str22 = calApplication17.printCalForYear(str_array20);
    java.lang.String str23 = shellImpl13.pipeTwoCommands(str_array20);
    java.lang.String str24 = calApplication12.printCalForYearMondayFirst(str_array20);
    java.nio.file.Path path25 = null;
    java.lang.String[] str_array27 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.getFileContents(str_array20, path25, 10);
    java.lang.String str28 = calApplication6.printCalForYearMondayFirst(str_array27);
    java.lang.String[] str_array31 = mergeSort1.mergeSort(str_array27, 4, (-1));
    int i34 = mergeSort1.customCompare("!", "1");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + ""+ "'", str3.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\r\n"+ "'", str10.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str11.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\r\n"+ "'", str16.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "\r\n"+ "'", str21.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str22.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + ""+ "'", str23.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "Invalid flag provided."+ "'", str24.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "Invalid flag provided."+ "'", str28.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == (-1));

  }

  @Test
  public void test087() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test087"); }


    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication0 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl1 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array3 = new java.lang.String[] { "" };
    java.lang.String str4 = shellImpl1.globFilesDirectories(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication5 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl6 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array8 = new java.lang.String[] { "" };
    java.lang.String str9 = shellImpl6.globFilesDirectories(str_array8);
    java.lang.String str10 = calApplication5.printCalForYear(str_array8);
    java.lang.String str11 = shellImpl1.pipeTwoCommands(str_array8);
    java.lang.String str12 = bcApplication0.number(str_array8);
    sg.edu.nus.comp.cs4218.impl.cmd.CallCommand callCommand13 = new sg.edu.nus.comp.cs4218.impl.cmd.CallCommand();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl14 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl15 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array17 = new java.lang.String[] { "" };
    java.lang.String str18 = shellImpl15.globFilesDirectories(str_array17);
    java.lang.String str19 = shellImpl14.pipeWithException(str_array17);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl20 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array22 = new java.lang.String[] { "" };
    java.lang.String str23 = shellImpl20.globFilesDirectories(str_array22);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl24 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl25 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array27 = new java.lang.String[] { "" };
    java.lang.String str28 = shellImpl25.globFilesDirectories(str_array27);
    java.lang.String str29 = shellImpl24.pipeWithException(str_array27);
    java.lang.String str30 = shellImpl20.globNoPaths(str_array27);
    java.lang.String str31 = shellImpl14.globNoPaths(str_array27);
    java.lang.String[] str_array32 = callCommand13.evaluateGlob(str_array27);
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str33 = bcApplication0.greaterThanOrEqual(str_array27);
      org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException");
    } catch (java.util.EmptyStackException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.util.EmptyStackException")) {
        org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\r\n"+ "'", str4.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "\r\n"+ "'", str9.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str10.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + ""+ "'", str11.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "1"+ "'", str12.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "\r\n"+ "'", str18.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + ""+ "'", str19.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "\r\n"+ "'", str23.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "\r\n"+ "'", str28.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + ""+ "'", str29.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + ""+ "'", str30.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + ""+ "'", str31.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array32);

  }

  @Test
  public void test088() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test088"); }


    sg.edu.nus.comp.cs4218.impl.GlobFinder globFinder2 = new sg.edu.nus.comp.cs4218.impl.GlobFinder("0", "&&");
    java.nio.file.Path path3 = null;
    java.nio.file.attribute.BasicFileAttributes basicFileAttributes4 = null;
    java.nio.file.FileVisitResult fileVisitResult5 = globFinder2.preVisitDirectory(path3, basicFileAttributes4);
    java.util.List list6 = globFinder2.getResults();
    java.util.List list7 = globFinder2.getResults();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fileVisitResult5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);

  }

  @Test
  public void test089() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test089"); }


    sg.edu.nus.comp.cs4218.impl.GlobFinder globFinder2 = new sg.edu.nus.comp.cs4218.impl.GlobFinder("0", "&&");
    java.nio.file.Path path3 = null;
    java.nio.file.attribute.BasicFileAttributes basicFileAttributes4 = null;
    java.nio.file.FileVisitResult fileVisitResult5 = globFinder2.visitFile(path3, basicFileAttributes4);
    java.nio.file.Path path6 = null;
    java.nio.file.attribute.BasicFileAttributes basicFileAttributes7 = null;
    java.nio.file.FileVisitResult fileVisitResult8 = globFinder2.preVisitDirectory(path6, basicFileAttributes7);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication9 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl10 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication11 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl12 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array14 = new java.lang.String[] { "" };
    java.lang.String str15 = shellImpl12.globFilesDirectories(str_array14);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication16 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl17 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array19 = new java.lang.String[] { "" };
    java.lang.String str20 = shellImpl17.globFilesDirectories(str_array19);
    java.lang.String str21 = calApplication16.printCalForYear(str_array19);
    java.lang.String str22 = shellImpl12.pipeTwoCommands(str_array19);
    java.lang.String str23 = calApplication11.printCalForYearMondayFirst(str_array19);
    java.nio.file.Path path24 = null;
    java.lang.String[] str_array26 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.getFileContents(str_array19, path24, 10);
    java.lang.String str27 = shellImpl10.globMultiLevel(str_array26);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl28 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl29 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array31 = new java.lang.String[] { "" };
    java.lang.String str32 = shellImpl29.globFilesDirectories(str_array31);
    java.lang.String str33 = shellImpl28.pipeWithException(str_array31);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl34 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array36 = new java.lang.String[] { "" };
    java.lang.String str37 = shellImpl34.globFilesDirectories(str_array36);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl38 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl39 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array41 = new java.lang.String[] { "" };
    java.lang.String str42 = shellImpl39.globFilesDirectories(str_array41);
    java.lang.String str43 = shellImpl38.pipeWithException(str_array41);
    java.lang.String str44 = shellImpl34.globNoPaths(str_array41);
    java.lang.String str45 = shellImpl28.globNoPaths(str_array41);
    java.lang.String str46 = shellImpl10.globFilesDirectories(str_array41);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication47 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl48 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array50 = new java.lang.String[] { "" };
    java.lang.String str51 = shellImpl48.globFilesDirectories(str_array50);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication52 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl53 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array55 = new java.lang.String[] { "" };
    java.lang.String str56 = shellImpl53.globFilesDirectories(str_array55);
    java.lang.String str57 = calApplication52.printCalForYear(str_array55);
    java.lang.String str58 = shellImpl48.pipeTwoCommands(str_array55);
    java.lang.String str59 = calApplication47.printCalForYearMondayFirst(str_array55);
    java.nio.file.Path path60 = null;
    java.lang.String[] str_array62 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.getFileContents(str_array55, path60, 10);
    java.lang.String str63 = shellImpl10.globOneFile(str_array62);
    java.util.List list64 = sortApplication9.sortNumbersSpecialChars(str_array62);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication65 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl66 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array68 = new java.lang.String[] { "" };
    java.lang.String str69 = shellImpl66.globFilesDirectories(str_array68);
    java.lang.String str70 = calApplication65.printCalForYear(str_array68);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl71 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array73 = new java.lang.String[] { "" };
    java.lang.String str74 = shellImpl71.globFilesDirectories(str_array73);
    boolean b75 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.isNumberCommandFormat(str_array73);
    java.lang.String str76 = calApplication65.printCalForMonthYearMondayFirst(str_array73);
    java.util.List list77 = sortApplication9.sortAllWithNumFlagOn(str_array73);
    java.lang.String[] str_array78 = sg.edu.nus.comp.cs4218.impl.ShellImpl.processBQ(str_array73);
    boolean b79 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.isNumberCommandFormat(str_array78);
    java.io.IOException iOException80 = null;
    java.nio.file.FileVisitResult fileVisitResult81 = globFinder2.postVisitDirectory((java.lang.Object)b79, iOException80);
    java.nio.file.Path path82 = null;
    java.nio.file.attribute.BasicFileAttributes basicFileAttributes83 = null;
    java.nio.file.FileVisitResult fileVisitResult84 = globFinder2.preVisitDirectory(path82, basicFileAttributes83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fileVisitResult5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fileVisitResult8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "\r\n"+ "'", str15.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "\r\n"+ "'", str20.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str21.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + ""+ "'", str22.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "Invalid flag provided."+ "'", str23.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + ""+ "'", str27.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "\r\n"+ "'", str32.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + ""+ "'", str33.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "\r\n"+ "'", str37.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "\r\n"+ "'", str42.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + ""+ "'", str43.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + ""+ "'", str44.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + ""+ "'", str45.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "\r\n"+ "'", str46.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "\r\n"+ "'", str51.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "\r\n"+ "'", str56.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str57.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + ""+ "'", str58.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "Invalid flag provided."+ "'", str59.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + ""+ "'", str63.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + "\r\n"+ "'", str69.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str70 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str70.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str74 + "' != '" + "\r\n"+ "'", str74.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str76 + "' != '" + "Invalid flag provided."+ "'", str76.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fileVisitResult81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fileVisitResult84);

  }

  @Test
  public void test090() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test090"); }


    sg.edu.nus.comp.cs4218.impl.cmd.PipeCommand pipeCommand1 = new sg.edu.nus.comp.cs4218.impl.cmd.PipeCommand("!");

  }

  @Test
  public void test091() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test091"); }


    sg.edu.nus.comp.cs4218.impl.cmd.CallCommand callCommand0 = new sg.edu.nus.comp.cs4218.impl.cmd.CallCommand();
    java.lang.String str1 = callCommand0.getInputStreamS();
    callCommand0.terminate();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication3 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl4 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array6 = new java.lang.String[] { "" };
    java.lang.String str7 = shellImpl4.globFilesDirectories(str_array6);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication8 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl9 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array11 = new java.lang.String[] { "" };
    java.lang.String str12 = shellImpl9.globFilesDirectories(str_array11);
    java.lang.String str13 = calApplication8.printCalForYear(str_array11);
    java.lang.String str14 = shellImpl4.pipeTwoCommands(str_array11);
    java.lang.String str15 = calApplication3.printCalForYearMondayFirst(str_array11);
    java.nio.file.Path path16 = null;
    java.lang.String[] str_array18 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.getFileContents(str_array11, path16, 10);
    java.lang.String[] str_array19 = callCommand0.evaluateGlob(str_array11);
    java.lang.String str20 = callCommand0.getInputStreamS();
    java.lang.String str21 = callCommand0.getInputStreamS();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + ""+ "'", str1.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "\r\n"+ "'", str7.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\r\n"+ "'", str12.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str13.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + ""+ "'", str14.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "Invalid flag provided."+ "'", str15.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + ""+ "'", str20.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + ""+ "'", str21.equals(""));

  }

  @Test
  public void test092() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test092"); }


    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication0 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl1 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl2 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl3 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array5 = new java.lang.String[] { "" };
    java.lang.String str6 = shellImpl3.globFilesDirectories(str_array5);
    java.lang.String str7 = shellImpl2.pipeWithException(str_array5);
    java.lang.String str8 = shellImpl1.globFilesDirectories(str_array5);
    java.lang.String str9 = bcApplication0.number(str_array5);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl10 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array12 = new java.lang.String[] { "" };
    java.lang.String str13 = shellImpl10.globFilesDirectories(str_array12);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication14 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl15 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array17 = new java.lang.String[] { "" };
    java.lang.String str18 = shellImpl15.globFilesDirectories(str_array17);
    java.lang.String str19 = calApplication14.printCalForYear(str_array17);
    java.lang.String str20 = shellImpl10.pipeTwoCommands(str_array17);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication21 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication22 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl23 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array25 = new java.lang.String[] { "" };
    java.lang.String str26 = shellImpl23.globFilesDirectories(str_array25);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication27 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl28 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array30 = new java.lang.String[] { "" };
    java.lang.String str31 = shellImpl28.globFilesDirectories(str_array30);
    java.lang.String str32 = calApplication27.printCalForYear(str_array30);
    java.lang.String str33 = shellImpl23.pipeTwoCommands(str_array30);
    java.lang.String str34 = calApplication22.printCalForYearMondayFirst(str_array30);
    java.nio.file.Path path35 = null;
    java.lang.String[] str_array37 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.getFileContents(str_array30, path35, 10);
    java.lang.String str38 = calApplication21.printCal(str_array37);
    java.lang.String str39 = shellImpl10.globOneFile(str_array37);
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str40 = bcApplication0.add(str_array37);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\r\n"+ "'", str6.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + ""+ "'", str7.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\r\n"+ "'", str8.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "1"+ "'", str9.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "\r\n"+ "'", str13.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "\r\n"+ "'", str18.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str19.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + ""+ "'", str20.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "\r\n"+ "'", str26.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "\r\n"+ "'", str31.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str32.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + ""+ "'", str33.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "Invalid flag provided."+ "'", str34.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "     March 2016     \r\nSu Mo Tu We Th Fr Sa\r\n       1  2  3  4  5\r\n 6  7  8  9 10 11 12\r\n13 14 15 16 17 18 19\r\n20 21 22 23 24 25 26\r\n27 28 29 30 31\r\n"+ "'", str38.equals("     March 2016     \r\nSu Mo Tu We Th Fr Sa\r\n       1  2  3  4  5\r\n 6  7  8  9 10 11 12\r\n13 14 15 16 17 18 19\r\n20 21 22 23 24 25 26\r\n27 28 29 30 31\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + ""+ "'", str39.equals(""));

  }

  @Test
  public void test093() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test093"); }


    sg.edu.nus.comp.cs4218.impl.cmd.CallCommand callCommand0 = new sg.edu.nus.comp.cs4218.impl.cmd.CallCommand();
    java.lang.String str1 = callCommand0.getInputStreamS();
    callCommand0.parse();
    java.util.Vector vector5 = sg.edu.nus.comp.cs4218.misc.ExpressionEvaluator.infixToPostfix("^");
    // The following exception was thrown during execution in test generation
    try {
      int i7 = callCommand0.extractInputRedir("<=", vector5, (-30));
      org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException");
    } catch (java.lang.StringIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.StringIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + ""+ "'", str1.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(vector5);

  }

  @Test
  public void test094() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test094"); }


    java.lang.String str1 = sg.edu.nus.comp.cs4218.misc.SignChecker.negation(".");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "-."+ "'", str1.equals("-."));

  }

  @Test
  public void test095() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test095"); }


    java.util.Vector vector1 = sg.edu.nus.comp.cs4218.misc.ExpressionEvaluator.infixToPostfix("!");
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str2 = sg.edu.nus.comp.cs4218.misc.ExpressionEvaluator.computeResult(vector1);
      org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException");
    } catch (java.util.EmptyStackException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.util.EmptyStackException")) {
        org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(vector1);

  }

  @Test
  public void test096() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test096"); }


    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl0 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl1 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array3 = new java.lang.String[] { "" };
    java.lang.String str4 = shellImpl1.globFilesDirectories(str_array3);
    java.lang.String str5 = shellImpl0.pipeWithException(str_array3);
    java.lang.String[] str_array6 = sg.edu.nus.comp.cs4218.impl.ShellImpl.processBQ(str_array3);
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str7 = sg.edu.nus.comp.cs4218.impl.app.BcApplication.evaluateHelper(str_array6);
      org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException");
    } catch (java.util.EmptyStackException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.util.EmptyStackException")) {
        org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\r\n"+ "'", str4.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array6);

  }

  @Test
  public void test097() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test097"); }


    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl0 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl1 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array3 = new java.lang.String[] { "" };
    java.lang.String str4 = shellImpl1.globFilesDirectories(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication5 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl6 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array8 = new java.lang.String[] { "" };
    java.lang.String str9 = shellImpl6.globFilesDirectories(str_array8);
    java.lang.String str10 = calApplication5.printCalForYear(str_array8);
    java.lang.String str11 = shellImpl1.pipeTwoCommands(str_array8);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication12 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl13 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array15 = new java.lang.String[] { "" };
    java.lang.String str16 = shellImpl13.globFilesDirectories(str_array15);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication17 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl18 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array20 = new java.lang.String[] { "" };
    java.lang.String str21 = shellImpl18.globFilesDirectories(str_array20);
    java.lang.String str22 = calApplication17.printCalForYear(str_array20);
    java.lang.String str23 = shellImpl13.pipeTwoCommands(str_array20);
    java.lang.String str24 = calApplication12.printCalForYearMondayFirst(str_array20);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl25 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array27 = new java.lang.String[] { "" };
    java.lang.String str28 = shellImpl25.globFilesDirectories(str_array27);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication29 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl30 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array32 = new java.lang.String[] { "" };
    java.lang.String str33 = shellImpl30.globFilesDirectories(str_array32);
    java.lang.String str34 = calApplication29.printCalForYear(str_array32);
    java.lang.String str35 = shellImpl25.pipeTwoCommands(str_array32);
    sg.edu.nus.comp.cs4218.impl.cmd.CallCommand callCommand36 = new sg.edu.nus.comp.cs4218.impl.cmd.CallCommand();
    java.lang.String str37 = callCommand36.getInputStreamS();
    callCommand36.terminate();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication39 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl40 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array42 = new java.lang.String[] { "" };
    java.lang.String str43 = shellImpl40.globFilesDirectories(str_array42);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication44 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl45 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array47 = new java.lang.String[] { "" };
    java.lang.String str48 = shellImpl45.globFilesDirectories(str_array47);
    java.lang.String str49 = calApplication44.printCalForYear(str_array47);
    java.lang.String str50 = shellImpl40.pipeTwoCommands(str_array47);
    java.lang.String str51 = calApplication39.printCalForYearMondayFirst(str_array47);
    java.nio.file.Path path52 = null;
    java.lang.String[] str_array54 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.getFileContents(str_array47, path52, 10);
    java.lang.String[] str_array55 = callCommand36.evaluateGlob(str_array47);
    java.lang.String str56 = shellImpl25.globMultiLevel(str_array47);
    java.lang.String str57 = calApplication12.printCal(str_array47);
    java.lang.String str58 = shellImpl1.globMultiLevel(str_array47);
    java.lang.String str59 = shellImpl0.globMultiLevel(str_array47);
    sg.edu.nus.comp.cs4218.impl.app.EchoApplication echoApplication60 = new sg.edu.nus.comp.cs4218.impl.app.EchoApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication61 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl62 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array64 = new java.lang.String[] { "" };
    java.lang.String str65 = shellImpl62.globFilesDirectories(str_array64);
    java.lang.String str66 = calApplication61.printCalForYear(str_array64);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl67 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array69 = new java.lang.String[] { "" };
    java.lang.String str70 = shellImpl67.globFilesDirectories(str_array69);
    boolean b71 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.isNumberCommandFormat(str_array69);
    java.lang.String str72 = calApplication61.printCalForMonthYearMondayFirst(str_array69);
    java.nio.file.Path path73 = null;
    java.lang.String[] str_array75 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.getFileContents(str_array69, path73, 4);
    java.io.InputStream inputStream76 = null;
    sg.edu.nus.comp.cs4218.impl.app.EchoApplication echoApplication77 = new sg.edu.nus.comp.cs4218.impl.app.EchoApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication78 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl79 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array81 = new java.lang.String[] { "" };
    java.lang.String str82 = shellImpl79.globFilesDirectories(str_array81);
    java.lang.String str83 = calApplication78.printCalForYear(str_array81);
    java.io.InputStream inputStream84 = null;
    java.io.OutputStream outputStream86 = sg.edu.nus.comp.cs4218.impl.ShellImpl.openOutputRedir("File output redirection and pipe operator cannot be used side by side.");
    echoApplication77.run(str_array81, inputStream84, outputStream86);
    echoApplication60.run(str_array75, inputStream76, outputStream86);
    java.lang.String str89 = shellImpl0.globOneFile(str_array75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\r\n"+ "'", str4.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "\r\n"+ "'", str9.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str10.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + ""+ "'", str11.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\r\n"+ "'", str16.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "\r\n"+ "'", str21.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str22.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + ""+ "'", str23.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "Invalid flag provided."+ "'", str24.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "\r\n"+ "'", str28.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "\r\n"+ "'", str33.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str34.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + ""+ "'", str35.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + ""+ "'", str37.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "\r\n"+ "'", str43.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "\r\n"+ "'", str48.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str49.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + ""+ "'", str50.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "Invalid flag provided."+ "'", str51.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "\r\n"+ "'", str56.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "     March 2016     \r\nSu Mo Tu We Th Fr Sa\r\n       1  2  3  4  5\r\n 6  7  8  9 10 11 12\r\n13 14 15 16 17 18 19\r\n20 21 22 23 24 25 26\r\n27 28 29 30 31\r\n"+ "'", str57.equals("     March 2016     \r\nSu Mo Tu We Th Fr Sa\r\n       1  2  3  4  5\r\n 6  7  8  9 10 11 12\r\n13 14 15 16 17 18 19\r\n20 21 22 23 24 25 26\r\n27 28 29 30 31\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "\r\n"+ "'", str58.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "\r\n"+ "'", str59.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "\r\n"+ "'", str65.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str66.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str70 + "' != '" + "\r\n"+ "'", str70.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str72 + "' != '" + "Invalid flag provided."+ "'", str72.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str82 + "' != '" + "\r\n"+ "'", str82.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str83 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str83.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(outputStream86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str89 + "' != '" + ""+ "'", str89.equals(""));

  }

  @Test
  public void test098() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test098"); }


    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl0 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl1 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array3 = new java.lang.String[] { "" };
    java.lang.String str4 = shellImpl1.globFilesDirectories(str_array3);
    java.lang.String str5 = shellImpl0.pipeWithException(str_array3);
    sg.edu.nus.comp.cs4218.impl.cmd.CallCommand callCommand6 = new sg.edu.nus.comp.cs4218.impl.cmd.CallCommand();
    java.lang.String str7 = callCommand6.getInputStreamS();
    callCommand6.terminate();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication9 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl10 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array12 = new java.lang.String[] { "" };
    java.lang.String str13 = shellImpl10.globFilesDirectories(str_array12);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication14 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl15 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array17 = new java.lang.String[] { "" };
    java.lang.String str18 = shellImpl15.globFilesDirectories(str_array17);
    java.lang.String str19 = calApplication14.printCalForYear(str_array17);
    java.lang.String str20 = shellImpl10.pipeTwoCommands(str_array17);
    java.lang.String str21 = calApplication9.printCalForYearMondayFirst(str_array17);
    java.nio.file.Path path22 = null;
    java.lang.String[] str_array24 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.getFileContents(str_array17, path22, 10);
    java.lang.String[] str_array25 = callCommand6.evaluateGlob(str_array24);
    java.lang.String str26 = shellImpl0.pipeTwoCommands(str_array24);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl27 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array29 = new java.lang.String[] { "" };
    java.lang.String str30 = shellImpl27.globFilesDirectories(str_array29);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication31 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl32 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl33 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl34 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array36 = new java.lang.String[] { "" };
    java.lang.String str37 = shellImpl34.globFilesDirectories(str_array36);
    java.lang.String str38 = shellImpl33.pipeWithException(str_array36);
    java.lang.String str39 = shellImpl32.globFilesDirectories(str_array36);
    java.lang.String str40 = bcApplication31.number(str_array36);
    java.lang.String str41 = shellImpl27.pipeWithException(str_array36);
    java.lang.String str42 = shellImpl0.pipeMultipleCommands(str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\r\n"+ "'", str4.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + ""+ "'", str7.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "\r\n"+ "'", str13.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "\r\n"+ "'", str18.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str19.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + ""+ "'", str20.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Invalid flag provided."+ "'", str21.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + ""+ "'", str26.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "\r\n"+ "'", str30.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "\r\n"+ "'", str37.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + ""+ "'", str38.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "\r\n"+ "'", str39.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "1"+ "'", str40.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + ""+ "'", str41.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + ""+ "'", str42.equals(""));

  }

  @Test
  public void test099() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test099"); }


    sg.edu.nus.comp.cs4218.impl.cmd.PipeCommand pipeCommand1 = new sg.edu.nus.comp.cs4218.impl.cmd.PipeCommand("|");
    java.io.InputStream inputStream2 = null;
    java.io.OutputStream outputStream3 = null;
    pipeCommand1.evaluate(inputStream2, outputStream3);
    pipeCommand1.terminate();
    pipeCommand1.parse();
    pipeCommand1.parse();
    pipeCommand1.terminate();
    pipeCommand1.parse();

  }

  @Test
  public void test100() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test100"); }


    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl0 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl1 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl2 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array4 = new java.lang.String[] { "" };
    java.lang.String str5 = shellImpl2.globFilesDirectories(str_array4);
    java.lang.String str6 = shellImpl1.pipeWithException(str_array4);
    java.lang.String str7 = shellImpl0.globFilesDirectories(str_array4);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication8 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl9 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array11 = new java.lang.String[] { "" };
    java.lang.String str12 = shellImpl9.globFilesDirectories(str_array11);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication13 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl14 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array16 = new java.lang.String[] { "" };
    java.lang.String str17 = shellImpl14.globFilesDirectories(str_array16);
    java.lang.String str18 = calApplication13.printCalForYear(str_array16);
    java.lang.String str19 = shellImpl9.pipeTwoCommands(str_array16);
    java.lang.String str20 = calApplication8.printCalForYearMondayFirst(str_array16);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl21 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array23 = new java.lang.String[] { "" };
    java.lang.String str24 = shellImpl21.globFilesDirectories(str_array23);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication25 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl26 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array28 = new java.lang.String[] { "" };
    java.lang.String str29 = shellImpl26.globFilesDirectories(str_array28);
    java.lang.String str30 = calApplication25.printCalForYear(str_array28);
    java.lang.String str31 = shellImpl21.pipeTwoCommands(str_array28);
    sg.edu.nus.comp.cs4218.impl.cmd.CallCommand callCommand32 = new sg.edu.nus.comp.cs4218.impl.cmd.CallCommand();
    java.lang.String str33 = callCommand32.getInputStreamS();
    callCommand32.terminate();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication35 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl36 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array38 = new java.lang.String[] { "" };
    java.lang.String str39 = shellImpl36.globFilesDirectories(str_array38);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication40 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl41 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array43 = new java.lang.String[] { "" };
    java.lang.String str44 = shellImpl41.globFilesDirectories(str_array43);
    java.lang.String str45 = calApplication40.printCalForYear(str_array43);
    java.lang.String str46 = shellImpl36.pipeTwoCommands(str_array43);
    java.lang.String str47 = calApplication35.printCalForYearMondayFirst(str_array43);
    java.nio.file.Path path48 = null;
    java.lang.String[] str_array50 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.getFileContents(str_array43, path48, 10);
    java.lang.String[] str_array51 = callCommand32.evaluateGlob(str_array43);
    java.lang.String str52 = shellImpl21.globMultiLevel(str_array43);
    java.lang.String str53 = calApplication8.printCal(str_array43);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl54 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl55 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array57 = new java.lang.String[] { "" };
    java.lang.String str58 = shellImpl55.globFilesDirectories(str_array57);
    java.lang.String str59 = shellImpl54.pipeWithException(str_array57);
    java.lang.String[] str_array60 = sg.edu.nus.comp.cs4218.impl.ShellImpl.processBQ(str_array57);
    java.lang.String str61 = calApplication8.printCalForMonthYearMondayFirst(str_array57);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl62 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl63 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array65 = new java.lang.String[] { "" };
    java.lang.String str66 = shellImpl63.globFilesDirectories(str_array65);
    java.lang.String str67 = shellImpl62.pipeWithException(str_array65);
    java.lang.String str68 = calApplication8.printCalForMonthYearMondayFirst(str_array65);
    java.lang.String str69 = shellImpl0.globFilesDirectories(str_array65);
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str70 = sg.edu.nus.comp.cs4218.impl.app.BcApplication.evaluateHelper(str_array65);
      org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException");
    } catch (java.util.EmptyStackException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.util.EmptyStackException")) {
        org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "\r\n"+ "'", str5.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "\r\n"+ "'", str7.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\r\n"+ "'", str12.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "\r\n"+ "'", str17.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str18.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + ""+ "'", str19.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "Invalid flag provided."+ "'", str20.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "\r\n"+ "'", str24.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "\r\n"+ "'", str29.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str30.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + ""+ "'", str31.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + ""+ "'", str33.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "\r\n"+ "'", str39.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "\r\n"+ "'", str44.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str45.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + ""+ "'", str46.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "Invalid flag provided."+ "'", str47.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "\r\n"+ "'", str52.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "     March 2016     \r\nSu Mo Tu We Th Fr Sa\r\n       1  2  3  4  5\r\n 6  7  8  9 10 11 12\r\n13 14 15 16 17 18 19\r\n20 21 22 23 24 25 26\r\n27 28 29 30 31\r\n"+ "'", str53.equals("     March 2016     \r\nSu Mo Tu We Th Fr Sa\r\n       1  2  3  4  5\r\n 6  7  8  9 10 11 12\r\n13 14 15 16 17 18 19\r\n20 21 22 23 24 25 26\r\n27 28 29 30 31\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "\r\n"+ "'", str58.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + ""+ "'", str59.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "Invalid flag provided."+ "'", str61.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "\r\n"+ "'", str66.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + ""+ "'", str67.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str68 + "' != '" + "Invalid flag provided."+ "'", str68.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + "\r\n"+ "'", str69.equals("\r\n"));

  }

  @Test
  public void test101() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test101"); }


    sg.edu.nus.comp.cs4218.impl.app.HeadApplication headApplication0 = new sg.edu.nus.comp.cs4218.impl.app.HeadApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication1 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl2 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication3 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl4 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array6 = new java.lang.String[] { "" };
    java.lang.String str7 = shellImpl4.globFilesDirectories(str_array6);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication8 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl9 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array11 = new java.lang.String[] { "" };
    java.lang.String str12 = shellImpl9.globFilesDirectories(str_array11);
    java.lang.String str13 = calApplication8.printCalForYear(str_array11);
    java.lang.String str14 = shellImpl4.pipeTwoCommands(str_array11);
    java.lang.String str15 = calApplication3.printCalForYearMondayFirst(str_array11);
    java.nio.file.Path path16 = null;
    java.lang.String[] str_array18 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.getFileContents(str_array11, path16, 10);
    java.lang.String str19 = shellImpl2.globMultiLevel(str_array18);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl20 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl21 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array23 = new java.lang.String[] { "" };
    java.lang.String str24 = shellImpl21.globFilesDirectories(str_array23);
    java.lang.String str25 = shellImpl20.pipeWithException(str_array23);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl26 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array28 = new java.lang.String[] { "" };
    java.lang.String str29 = shellImpl26.globFilesDirectories(str_array28);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl30 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl31 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array33 = new java.lang.String[] { "" };
    java.lang.String str34 = shellImpl31.globFilesDirectories(str_array33);
    java.lang.String str35 = shellImpl30.pipeWithException(str_array33);
    java.lang.String str36 = shellImpl26.globNoPaths(str_array33);
    java.lang.String str37 = shellImpl20.globNoPaths(str_array33);
    java.lang.String str38 = shellImpl2.globFilesDirectories(str_array33);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication39 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl40 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array42 = new java.lang.String[] { "" };
    java.lang.String str43 = shellImpl40.globFilesDirectories(str_array42);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication44 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl45 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array47 = new java.lang.String[] { "" };
    java.lang.String str48 = shellImpl45.globFilesDirectories(str_array47);
    java.lang.String str49 = calApplication44.printCalForYear(str_array47);
    java.lang.String str50 = shellImpl40.pipeTwoCommands(str_array47);
    java.lang.String str51 = calApplication39.printCalForYearMondayFirst(str_array47);
    java.nio.file.Path path52 = null;
    java.lang.String[] str_array54 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.getFileContents(str_array47, path52, 10);
    java.lang.String str55 = shellImpl2.globOneFile(str_array54);
    java.util.List list56 = sortApplication1.sortNumbersSpecialChars(str_array54);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication57 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl58 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array60 = new java.lang.String[] { "" };
    java.lang.String str61 = shellImpl58.globFilesDirectories(str_array60);
    java.lang.String str62 = calApplication57.printCalForYear(str_array60);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl63 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array65 = new java.lang.String[] { "" };
    java.lang.String str66 = shellImpl63.globFilesDirectories(str_array65);
    boolean b67 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.isNumberCommandFormat(str_array65);
    java.lang.String str68 = calApplication57.printCalForMonthYearMondayFirst(str_array65);
    java.util.List list69 = sortApplication1.sortAllWithNumFlagOn(str_array65);
    java.lang.String[] str_array70 = sg.edu.nus.comp.cs4218.impl.ShellImpl.processBQ(str_array65);
    java.io.InputStream inputStream71 = null;
    java.io.OutputStream outputStream73 = sg.edu.nus.comp.cs4218.impl.ShellImpl.openOutputRedir("File output redirection and pipe operator cannot be used side by side.");
    sg.edu.nus.comp.cs4218.impl.app.EchoApplication echoApplication74 = new sg.edu.nus.comp.cs4218.impl.app.EchoApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication75 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl76 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array78 = new java.lang.String[] { "" };
    java.lang.String str79 = shellImpl76.globFilesDirectories(str_array78);
    java.lang.String str80 = calApplication75.printCalForYear(str_array78);
    java.io.InputStream inputStream81 = null;
    java.io.OutputStream outputStream83 = sg.edu.nus.comp.cs4218.impl.ShellImpl.openOutputRedir("File output redirection and pipe operator cannot be used side by side.");
    echoApplication74.run(str_array78, inputStream81, outputStream83);
    sg.edu.nus.comp.cs4218.impl.ShellImpl.writeToStdout(outputStream73, outputStream83);
    // The following exception was thrown during execution in test generation
    try {
      headApplication0.run(str_array70, inputStream71, outputStream73);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.HeadException");
    } catch (sg.edu.nus.comp.cs4218.exception.HeadException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.HeadException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.HeadException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "\r\n"+ "'", str7.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\r\n"+ "'", str12.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str13.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + ""+ "'", str14.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "Invalid flag provided."+ "'", str15.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + ""+ "'", str19.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "\r\n"+ "'", str24.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + ""+ "'", str25.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "\r\n"+ "'", str29.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "\r\n"+ "'", str34.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + ""+ "'", str35.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + ""+ "'", str36.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + ""+ "'", str37.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "\r\n"+ "'", str38.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "\r\n"+ "'", str43.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "\r\n"+ "'", str48.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str49.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + ""+ "'", str50.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "Invalid flag provided."+ "'", str51.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + ""+ "'", str55.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "\r\n"+ "'", str61.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str62.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "\r\n"+ "'", str66.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str68 + "' != '" + "Invalid flag provided."+ "'", str68.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(outputStream73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str79 + "' != '" + "\r\n"+ "'", str79.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str80 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str80.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(outputStream83);

  }

  @Test
  public void test102() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test102"); }


    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl1 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array3 = new java.lang.String[] { "" };
    java.lang.String str4 = shellImpl1.globFilesDirectories(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication5 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl6 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array8 = new java.lang.String[] { "" };
    java.lang.String str9 = shellImpl6.globFilesDirectories(str_array8);
    java.lang.String str10 = calApplication5.printCalForYear(str_array8);
    java.lang.String str11 = shellImpl1.pipeTwoCommands(str_array8);
    java.lang.String str12 = calApplication0.printCalForYearMondayFirst(str_array8);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl13 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array15 = new java.lang.String[] { "" };
    java.lang.String str16 = shellImpl13.globFilesDirectories(str_array15);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication17 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl18 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array20 = new java.lang.String[] { "" };
    java.lang.String str21 = shellImpl18.globFilesDirectories(str_array20);
    java.lang.String str22 = calApplication17.printCalForYear(str_array20);
    java.lang.String str23 = shellImpl13.pipeTwoCommands(str_array20);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication24 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl25 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array27 = new java.lang.String[] { "" };
    java.lang.String str28 = shellImpl25.globFilesDirectories(str_array27);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication29 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl30 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array32 = new java.lang.String[] { "" };
    java.lang.String str33 = shellImpl30.globFilesDirectories(str_array32);
    java.lang.String str34 = calApplication29.printCalForYear(str_array32);
    java.lang.String str35 = shellImpl25.pipeTwoCommands(str_array32);
    java.lang.String str36 = calApplication24.printCalForYearMondayFirst(str_array32);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl37 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array39 = new java.lang.String[] { "" };
    java.lang.String str40 = shellImpl37.globFilesDirectories(str_array39);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication41 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl42 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array44 = new java.lang.String[] { "" };
    java.lang.String str45 = shellImpl42.globFilesDirectories(str_array44);
    java.lang.String str46 = calApplication41.printCalForYear(str_array44);
    java.lang.String str47 = shellImpl37.pipeTwoCommands(str_array44);
    sg.edu.nus.comp.cs4218.impl.cmd.CallCommand callCommand48 = new sg.edu.nus.comp.cs4218.impl.cmd.CallCommand();
    java.lang.String str49 = callCommand48.getInputStreamS();
    callCommand48.terminate();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication51 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl52 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array54 = new java.lang.String[] { "" };
    java.lang.String str55 = shellImpl52.globFilesDirectories(str_array54);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication56 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl57 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array59 = new java.lang.String[] { "" };
    java.lang.String str60 = shellImpl57.globFilesDirectories(str_array59);
    java.lang.String str61 = calApplication56.printCalForYear(str_array59);
    java.lang.String str62 = shellImpl52.pipeTwoCommands(str_array59);
    java.lang.String str63 = calApplication51.printCalForYearMondayFirst(str_array59);
    java.nio.file.Path path64 = null;
    java.lang.String[] str_array66 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.getFileContents(str_array59, path64, 10);
    java.lang.String[] str_array67 = callCommand48.evaluateGlob(str_array59);
    java.lang.String str68 = shellImpl37.globMultiLevel(str_array59);
    java.lang.String str69 = calApplication24.printCal(str_array59);
    java.lang.String str70 = shellImpl13.globMultiLevel(str_array59);
    java.lang.String str71 = calApplication0.printCalWithMondayFirst(str_array59);
    java.io.InputStream inputStream72 = null;
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String[] str_array73 = sg.edu.nus.comp.cs4218.misc.SortHelper.sortProcess(str_array59, inputStream72);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.SortException");
    } catch (sg.edu.nus.comp.cs4218.exception.SortException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.SortException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.SortException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\r\n"+ "'", str4.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "\r\n"+ "'", str9.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str10.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + ""+ "'", str11.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Invalid flag provided."+ "'", str12.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\r\n"+ "'", str16.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "\r\n"+ "'", str21.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str22.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + ""+ "'", str23.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "\r\n"+ "'", str28.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "\r\n"+ "'", str33.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str34.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + ""+ "'", str35.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "Invalid flag provided."+ "'", str36.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "\r\n"+ "'", str40.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "\r\n"+ "'", str45.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str46.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + ""+ "'", str47.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + ""+ "'", str49.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "\r\n"+ "'", str55.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "\r\n"+ "'", str60.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str61.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + ""+ "'", str62.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + "Invalid flag provided."+ "'", str63.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str68 + "' != '" + "\r\n"+ "'", str68.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + "     March 2016     \r\nSu Mo Tu We Th Fr Sa\r\n       1  2  3  4  5\r\n 6  7  8  9 10 11 12\r\n13 14 15 16 17 18 19\r\n20 21 22 23 24 25 26\r\n27 28 29 30 31\r\n"+ "'", str69.equals("     March 2016     \r\nSu Mo Tu We Th Fr Sa\r\n       1  2  3  4  5\r\n 6  7  8  9 10 11 12\r\n13 14 15 16 17 18 19\r\n20 21 22 23 24 25 26\r\n27 28 29 30 31\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str70 + "' != '" + "\r\n"+ "'", str70.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str71 + "' != '" + "Invalid flag provided."+ "'", str71.equals("Invalid flag provided."));

  }

  @Test
  public void test103() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test103"); }


    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str3 = sg.edu.nus.comp.cs4218.misc.ExpressionEvaluator.calculateRelation(".", "+", "\r\n");
      org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
    } catch (java.lang.NumberFormatException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NumberFormatException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test104() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test104"); }


    sg.edu.nus.comp.cs4218.impl.app.DateApplication dateApplication0 = new sg.edu.nus.comp.cs4218.impl.app.DateApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    java.lang.String[] str_array3 = new java.lang.String[] { "-0" };
    java.lang.String str4 = calApplication1.printCalForYearMondayFirst(str_array3);
    java.io.InputStream inputStream5 = null;
    java.io.OutputStream outputStream7 = sg.edu.nus.comp.cs4218.impl.ShellImpl.openOutputRedir("File output redirection and pipe operator cannot be used side by side.");
    sg.edu.nus.comp.cs4218.impl.app.EchoApplication echoApplication8 = new sg.edu.nus.comp.cs4218.impl.app.EchoApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication9 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl10 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array12 = new java.lang.String[] { "" };
    java.lang.String str13 = shellImpl10.globFilesDirectories(str_array12);
    java.lang.String str14 = calApplication9.printCalForYear(str_array12);
    java.io.InputStream inputStream15 = null;
    java.io.OutputStream outputStream17 = sg.edu.nus.comp.cs4218.impl.ShellImpl.openOutputRedir("File output redirection and pipe operator cannot be used side by side.");
    echoApplication8.run(str_array12, inputStream15, outputStream17);
    sg.edu.nus.comp.cs4218.impl.ShellImpl.writeToStdout(outputStream7, outputStream17);
    java.io.OutputStream outputStream21 = sg.edu.nus.comp.cs4218.impl.ShellImpl.openOutputRedir("&&");
    sg.edu.nus.comp.cs4218.impl.ShellImpl.writeToStdout(outputStream7, outputStream21);
    java.io.OutputStream outputStream24 = sg.edu.nus.comp.cs4218.impl.ShellImpl.openOutputRedir("File output redirection and pipe operator cannot be used side by side.");
    sg.edu.nus.comp.cs4218.impl.app.EchoApplication echoApplication25 = new sg.edu.nus.comp.cs4218.impl.app.EchoApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication26 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl27 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array29 = new java.lang.String[] { "" };
    java.lang.String str30 = shellImpl27.globFilesDirectories(str_array29);
    java.lang.String str31 = calApplication26.printCalForYear(str_array29);
    java.io.InputStream inputStream32 = null;
    java.io.OutputStream outputStream34 = sg.edu.nus.comp.cs4218.impl.ShellImpl.openOutputRedir("File output redirection and pipe operator cannot be used side by side.");
    echoApplication25.run(str_array29, inputStream32, outputStream34);
    sg.edu.nus.comp.cs4218.impl.ShellImpl.writeToStdout(outputStream24, outputStream34);
    sg.edu.nus.comp.cs4218.impl.app.EchoApplication echoApplication37 = new sg.edu.nus.comp.cs4218.impl.app.EchoApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl38 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl39 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array41 = new java.lang.String[] { "" };
    java.lang.String str42 = shellImpl39.globFilesDirectories(str_array41);
    java.lang.String str43 = shellImpl38.pipeWithException(str_array41);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl44 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array46 = new java.lang.String[] { "" };
    java.lang.String str47 = shellImpl44.globFilesDirectories(str_array46);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl48 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl49 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array51 = new java.lang.String[] { "" };
    java.lang.String str52 = shellImpl49.globFilesDirectories(str_array51);
    java.lang.String str53 = shellImpl48.pipeWithException(str_array51);
    java.lang.String str54 = shellImpl44.globNoPaths(str_array51);
    java.lang.String str55 = shellImpl38.globNoPaths(str_array51);
    java.io.InputStream inputStream56 = null;
    java.io.OutputStream outputStream58 = sg.edu.nus.comp.cs4218.impl.ShellImpl.openOutputRedir("File output redirection and pipe operator cannot be used side by side.");
    sg.edu.nus.comp.cs4218.impl.app.EchoApplication echoApplication59 = new sg.edu.nus.comp.cs4218.impl.app.EchoApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication60 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl61 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array63 = new java.lang.String[] { "" };
    java.lang.String str64 = shellImpl61.globFilesDirectories(str_array63);
    java.lang.String str65 = calApplication60.printCalForYear(str_array63);
    java.io.InputStream inputStream66 = null;
    java.io.OutputStream outputStream68 = sg.edu.nus.comp.cs4218.impl.ShellImpl.openOutputRedir("File output redirection and pipe operator cannot be used side by side.");
    echoApplication59.run(str_array63, inputStream66, outputStream68);
    sg.edu.nus.comp.cs4218.impl.ShellImpl.writeToStdout(outputStream58, outputStream68);
    echoApplication37.run(str_array51, inputStream56, outputStream68);
    sg.edu.nus.comp.cs4218.impl.ShellImpl.writeToStdout(outputStream34, outputStream68);
    sg.edu.nus.comp.cs4218.impl.ShellImpl.closeOutputStream(outputStream34);
    sg.edu.nus.comp.cs4218.impl.ShellImpl.writeToStdout(outputStream21, outputStream34);
    // The following exception was thrown during execution in test generation
    try {
      dateApplication0.run(str_array3, inputStream5, outputStream21);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.DateException");
    } catch (sg.edu.nus.comp.cs4218.exception.DateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.DateException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.DateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Invalid flag provided."+ "'", str4.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(outputStream7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "\r\n"+ "'", str13.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str14.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(outputStream17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(outputStream21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(outputStream24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "\r\n"+ "'", str30.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str31.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(outputStream34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "\r\n"+ "'", str42.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + ""+ "'", str43.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "\r\n"+ "'", str47.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "\r\n"+ "'", str52.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + ""+ "'", str53.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + ""+ "'", str54.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + ""+ "'", str55.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(outputStream58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str64 + "' != '" + "\r\n"+ "'", str64.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str65.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(outputStream68);

  }

  @Test
  public void test105() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test105"); }


    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str3 = sg.edu.nus.comp.cs4218.misc.ExpressionEvaluator.calculateArithmetic("*", "-==", "*\r\n");
      org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
    } catch (java.lang.NumberFormatException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NumberFormatException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test106() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test106"); }


    sg.edu.nus.comp.cs4218.impl.cmd.CallCommand callCommand1 = new sg.edu.nus.comp.cs4218.impl.cmd.CallCommand("1");
    callCommand1.parse();

  }

  @Test
  public void test107() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test107"); }


    sg.edu.nus.comp.cs4218.impl.cmd.CallCommand callCommand0 = new sg.edu.nus.comp.cs4218.impl.cmd.CallCommand();
    java.lang.String str1 = callCommand0.getInputStreamS();
    callCommand0.terminate();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication3 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl4 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array6 = new java.lang.String[] { "" };
    java.lang.String str7 = shellImpl4.globFilesDirectories(str_array6);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication8 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl9 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array11 = new java.lang.String[] { "" };
    java.lang.String str12 = shellImpl9.globFilesDirectories(str_array11);
    java.lang.String str13 = calApplication8.printCalForYear(str_array11);
    java.lang.String str14 = shellImpl4.pipeTwoCommands(str_array11);
    java.lang.String str15 = calApplication3.printCalForYearMondayFirst(str_array11);
    java.nio.file.Path path16 = null;
    java.lang.String[] str_array18 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.getFileContents(str_array11, path16, 10);
    java.lang.String[] str_array19 = callCommand0.evaluateGlob(str_array11);
    java.util.Vector vector22 = sg.edu.nus.comp.cs4218.misc.ExpressionEvaluator.splitSeparateStrings("-1");
    java.util.List list23 = sg.edu.nus.comp.cs4218.misc.SortHelper.sortHelper((java.util.List)vector22);
    // The following exception was thrown during execution in test generation
    try {
      int i25 = callCommand0.extractInputRedir("^", vector22, 0);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.ShellException");
    } catch (sg.edu.nus.comp.cs4218.exception.ShellException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.ShellException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.ShellException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + ""+ "'", str1.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "\r\n"+ "'", str7.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\r\n"+ "'", str12.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str13.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + ""+ "'", str14.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "Invalid flag provided."+ "'", str15.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(vector22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);

  }

  @Test
  public void test108() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test108"); }


    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication0 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl1 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array3 = new java.lang.String[] { "" };
    java.lang.String str4 = shellImpl1.globFilesDirectories(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication5 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl6 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array8 = new java.lang.String[] { "" };
    java.lang.String str9 = shellImpl6.globFilesDirectories(str_array8);
    java.lang.String str10 = calApplication5.printCalForYear(str_array8);
    java.lang.String str11 = shellImpl1.pipeTwoCommands(str_array8);
    java.lang.String str12 = bcApplication0.number(str_array8);
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication13 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication14 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl15 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array17 = new java.lang.String[] { "" };
    java.lang.String str18 = shellImpl15.globFilesDirectories(str_array17);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication19 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl20 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array22 = new java.lang.String[] { "" };
    java.lang.String str23 = shellImpl20.globFilesDirectories(str_array22);
    java.lang.String str24 = calApplication19.printCalForYear(str_array22);
    java.lang.String str25 = shellImpl15.pipeTwoCommands(str_array22);
    java.lang.String str26 = calApplication14.printCalForYearMondayFirst(str_array22);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl27 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array29 = new java.lang.String[] { "" };
    java.lang.String str30 = shellImpl27.globFilesDirectories(str_array29);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication31 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl32 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array34 = new java.lang.String[] { "" };
    java.lang.String str35 = shellImpl32.globFilesDirectories(str_array34);
    java.lang.String str36 = calApplication31.printCalForYear(str_array34);
    java.lang.String str37 = shellImpl27.pipeTwoCommands(str_array34);
    sg.edu.nus.comp.cs4218.impl.cmd.CallCommand callCommand38 = new sg.edu.nus.comp.cs4218.impl.cmd.CallCommand();
    java.lang.String str39 = callCommand38.getInputStreamS();
    callCommand38.terminate();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication41 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl42 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array44 = new java.lang.String[] { "" };
    java.lang.String str45 = shellImpl42.globFilesDirectories(str_array44);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication46 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl47 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array49 = new java.lang.String[] { "" };
    java.lang.String str50 = shellImpl47.globFilesDirectories(str_array49);
    java.lang.String str51 = calApplication46.printCalForYear(str_array49);
    java.lang.String str52 = shellImpl42.pipeTwoCommands(str_array49);
    java.lang.String str53 = calApplication41.printCalForYearMondayFirst(str_array49);
    java.nio.file.Path path54 = null;
    java.lang.String[] str_array56 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.getFileContents(str_array49, path54, 10);
    java.lang.String[] str_array57 = callCommand38.evaluateGlob(str_array49);
    java.lang.String str58 = shellImpl27.globMultiLevel(str_array49);
    java.lang.String str59 = calApplication14.printCal(str_array49);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl60 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl61 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array63 = new java.lang.String[] { "" };
    java.lang.String str64 = shellImpl61.globFilesDirectories(str_array63);
    java.lang.String str65 = shellImpl60.pipeWithException(str_array63);
    java.lang.String[] str_array66 = sg.edu.nus.comp.cs4218.impl.ShellImpl.processBQ(str_array63);
    java.lang.String str67 = calApplication14.printCalForMonthYearMondayFirst(str_array63);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl68 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array70 = new java.lang.String[] { "" };
    java.lang.String str71 = shellImpl68.globFilesDirectories(str_array70);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl72 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl73 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array75 = new java.lang.String[] { "" };
    java.lang.String str76 = shellImpl73.globFilesDirectories(str_array75);
    java.lang.String str77 = shellImpl72.pipeWithException(str_array75);
    java.lang.String str78 = shellImpl68.globNoPaths(str_array75);
    java.lang.String str79 = calApplication14.printCal(str_array75);
    java.util.List list80 = sortApplication13.sortCapitalNumberswithNumFlagOn(str_array75);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication81 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl82 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array84 = new java.lang.String[] { "" };
    java.lang.String str85 = shellImpl82.globFilesDirectories(str_array84);
    java.lang.String str86 = calApplication81.printCalForYear(str_array84);
    java.util.List list87 = sortApplication13.sortStringsSimple(str_array84);
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str88 = bcApplication0.greaterThanOrEqual(str_array84);
      org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException");
    } catch (java.util.EmptyStackException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.util.EmptyStackException")) {
        org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\r\n"+ "'", str4.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "\r\n"+ "'", str9.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str10.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + ""+ "'", str11.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "1"+ "'", str12.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "\r\n"+ "'", str18.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "\r\n"+ "'", str23.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str24.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + ""+ "'", str25.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "Invalid flag provided."+ "'", str26.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "\r\n"+ "'", str30.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "\r\n"+ "'", str35.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str36.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + ""+ "'", str37.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + ""+ "'", str39.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "\r\n"+ "'", str45.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "\r\n"+ "'", str50.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str51.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + ""+ "'", str52.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "Invalid flag provided."+ "'", str53.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "\r\n"+ "'", str58.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "     March 2016     \r\nSu Mo Tu We Th Fr Sa\r\n       1  2  3  4  5\r\n 6  7  8  9 10 11 12\r\n13 14 15 16 17 18 19\r\n20 21 22 23 24 25 26\r\n27 28 29 30 31\r\n"+ "'", str59.equals("     March 2016     \r\nSu Mo Tu We Th Fr Sa\r\n       1  2  3  4  5\r\n 6  7  8  9 10 11 12\r\n13 14 15 16 17 18 19\r\n20 21 22 23 24 25 26\r\n27 28 29 30 31\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str64 + "' != '" + "\r\n"+ "'", str64.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + ""+ "'", str65.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "Invalid flag provided."+ "'", str67.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str71 + "' != '" + "\r\n"+ "'", str71.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str76 + "' != '" + "\r\n"+ "'", str76.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str77 + "' != '" + ""+ "'", str77.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str78 + "' != '" + ""+ "'", str78.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str79 + "' != '" + "     March 2016     \r\nSu Mo Tu We Th Fr Sa\r\n       1  2  3  4  5\r\n 6  7  8  9 10 11 12\r\n13 14 15 16 17 18 19\r\n20 21 22 23 24 25 26\r\n27 28 29 30 31\r\n"+ "'", str79.equals("     March 2016     \r\nSu Mo Tu We Th Fr Sa\r\n       1  2  3  4  5\r\n 6  7  8  9 10 11 12\r\n13 14 15 16 17 18 19\r\n20 21 22 23 24 25 26\r\n27 28 29 30 31\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str85 + "' != '" + "\r\n"+ "'", str85.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str86 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str86.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list87);

  }

  @Test
  public void test109() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test109"); }


    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication0 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl3 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array5 = new java.lang.String[] { "" };
    java.lang.String str6 = shellImpl3.globFilesDirectories(str_array5);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl8 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array10 = new java.lang.String[] { "" };
    java.lang.String str11 = shellImpl8.globFilesDirectories(str_array10);
    java.lang.String str12 = calApplication7.printCalForYear(str_array10);
    java.lang.String str13 = shellImpl3.pipeTwoCommands(str_array10);
    java.lang.String str14 = calApplication2.printCalForYearMondayFirst(str_array10);
    java.nio.file.Path path15 = null;
    java.lang.String[] str_array17 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.getFileContents(str_array10, path15, 10);
    java.lang.String str18 = calApplication1.printCal(str_array17);
    java.nio.file.Path path19 = null;
    java.lang.String[] str_array21 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.getFileContents(str_array17, path19, 1);
    java.lang.String[] str_array22 = sg.edu.nus.comp.cs4218.impl.ShellImpl.processBQ(str_array17);
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str23 = bcApplication0.equalEqual(str_array22);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\r\n"+ "'", str6.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "\r\n"+ "'", str11.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str12.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + ""+ "'", str13.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Invalid flag provided."+ "'", str14.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "     March 2016     \r\nSu Mo Tu We Th Fr Sa\r\n       1  2  3  4  5\r\n 6  7  8  9 10 11 12\r\n13 14 15 16 17 18 19\r\n20 21 22 23 24 25 26\r\n27 28 29 30 31\r\n"+ "'", str18.equals("     March 2016     \r\nSu Mo Tu We Th Fr Sa\r\n       1  2  3  4  5\r\n 6  7  8  9 10 11 12\r\n13 14 15 16 17 18 19\r\n20 21 22 23 24 25 26\r\n27 28 29 30 31\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);

  }

  @Test
  public void test110() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test110"); }


    sg.edu.nus.comp.cs4218.misc.MergeSort mergeSort1 = new sg.edu.nus.comp.cs4218.misc.MergeSort(false);
    java.lang.String str3 = mergeSort1.extractFirstNumberWordFromLine("=");
    int i6 = mergeSort1.customCompare("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n", "");
    int i9 = mergeSort1.compareIncludeNumOrder("0", "||");
    java.lang.String str11 = mergeSort1.extractFirstNumberWordFromLine("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n");
    int i13 = mergeSort1.getRank('&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + ""+ "'", str3.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + ""+ "'", str11.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 4);

  }

  @Test
  public void test111() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test111"); }


    sg.edu.nus.comp.cs4218.misc.MergeSort mergeSort1 = new sg.edu.nus.comp.cs4218.misc.MergeSort(false);
    int i4 = mergeSort1.customCompare("", "*");
    int i7 = mergeSort1.customCompare("!", "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n");
    int i10 = mergeSort1.compareIncludeNumOrder("-0", ".");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));

  }

  @Test
  public void test112() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test112"); }


    sg.edu.nus.comp.cs4218.impl.GlobFinder globFinder2 = new sg.edu.nus.comp.cs4218.impl.GlobFinder("Missing arg for pipe command.", "Missing arg for pipe command.");
    java.nio.file.Path path3 = null;
    java.nio.file.attribute.BasicFileAttributes basicFileAttributes4 = null;
    java.nio.file.FileVisitResult fileVisitResult5 = globFinder2.preVisitDirectory(path3, basicFileAttributes4);
    java.nio.file.Path path6 = null;
    java.nio.file.attribute.BasicFileAttributes basicFileAttributes7 = null;
    java.nio.file.FileVisitResult fileVisitResult8 = globFinder2.preVisitDirectory(path6, basicFileAttributes7);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl9 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl10 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array12 = new java.lang.String[] { "" };
    java.lang.String str13 = shellImpl10.globFilesDirectories(str_array12);
    java.lang.String str14 = shellImpl9.pipeWithException(str_array12);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl15 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array17 = new java.lang.String[] { "" };
    java.lang.String str18 = shellImpl15.globFilesDirectories(str_array17);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl19 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl20 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array22 = new java.lang.String[] { "" };
    java.lang.String str23 = shellImpl20.globFilesDirectories(str_array22);
    java.lang.String str24 = shellImpl19.pipeWithException(str_array22);
    java.lang.String str25 = shellImpl15.globNoPaths(str_array22);
    java.lang.String str26 = shellImpl9.globNoPaths(str_array22);
    java.io.IOException iOException27 = null;
    java.nio.file.FileVisitResult fileVisitResult28 = globFinder2.postVisitDirectory((java.lang.Object)str26, iOException27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fileVisitResult5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fileVisitResult8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "\r\n"+ "'", str13.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + ""+ "'", str14.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "\r\n"+ "'", str18.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "\r\n"+ "'", str23.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + ""+ "'", str24.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + ""+ "'", str25.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + ""+ "'", str26.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fileVisitResult28);

  }

  @Test
  public void test113() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test113"); }


    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl1 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl3 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array5 = new java.lang.String[] { "" };
    java.lang.String str6 = shellImpl3.globFilesDirectories(str_array5);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl8 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array10 = new java.lang.String[] { "" };
    java.lang.String str11 = shellImpl8.globFilesDirectories(str_array10);
    java.lang.String str12 = calApplication7.printCalForYear(str_array10);
    java.lang.String str13 = shellImpl3.pipeTwoCommands(str_array10);
    java.lang.String str14 = calApplication2.printCalForYearMondayFirst(str_array10);
    java.nio.file.Path path15 = null;
    java.lang.String[] str_array17 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.getFileContents(str_array10, path15, 10);
    java.lang.String str18 = shellImpl1.globMultiLevel(str_array17);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl19 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl20 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array22 = new java.lang.String[] { "" };
    java.lang.String str23 = shellImpl20.globFilesDirectories(str_array22);
    java.lang.String str24 = shellImpl19.pipeWithException(str_array22);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl25 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array27 = new java.lang.String[] { "" };
    java.lang.String str28 = shellImpl25.globFilesDirectories(str_array27);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl29 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl30 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array32 = new java.lang.String[] { "" };
    java.lang.String str33 = shellImpl30.globFilesDirectories(str_array32);
    java.lang.String str34 = shellImpl29.pipeWithException(str_array32);
    java.lang.String str35 = shellImpl25.globNoPaths(str_array32);
    java.lang.String str36 = shellImpl19.globNoPaths(str_array32);
    java.lang.String str37 = shellImpl1.globFilesDirectories(str_array32);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication38 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl39 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array41 = new java.lang.String[] { "" };
    java.lang.String str42 = shellImpl39.globFilesDirectories(str_array41);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication43 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl44 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array46 = new java.lang.String[] { "" };
    java.lang.String str47 = shellImpl44.globFilesDirectories(str_array46);
    java.lang.String str48 = calApplication43.printCalForYear(str_array46);
    java.lang.String str49 = shellImpl39.pipeTwoCommands(str_array46);
    java.lang.String str50 = calApplication38.printCalForYearMondayFirst(str_array46);
    java.nio.file.Path path51 = null;
    java.lang.String[] str_array53 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.getFileContents(str_array46, path51, 10);
    java.lang.String str54 = shellImpl1.globOneFile(str_array53);
    java.util.List list55 = sortApplication0.sortNumbersSpecialChars(str_array53);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication56 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl57 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array59 = new java.lang.String[] { "" };
    java.lang.String str60 = shellImpl57.globFilesDirectories(str_array59);
    java.lang.String str61 = calApplication56.printCalForYear(str_array59);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication62 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl63 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array65 = new java.lang.String[] { "" };
    java.lang.String str66 = shellImpl63.globFilesDirectories(str_array65);
    java.lang.String str67 = calApplication62.printCalForYear(str_array65);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl68 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array70 = new java.lang.String[] { "" };
    java.lang.String str71 = shellImpl68.globFilesDirectories(str_array70);
    boolean b72 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.isNumberCommandFormat(str_array70);
    java.lang.String str73 = calApplication62.printCalForMonthYearMondayFirst(str_array70);
    java.nio.file.Path path74 = null;
    java.lang.String[] str_array76 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.getFileContents(str_array70, path74, 4);
    java.lang.String str77 = calApplication56.printCal(str_array70);
    java.util.List list78 = sortApplication0.sortCapitalSpecialChars(str_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\r\n"+ "'", str6.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "\r\n"+ "'", str11.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str12.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + ""+ "'", str13.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Invalid flag provided."+ "'", str14.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + ""+ "'", str18.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "\r\n"+ "'", str23.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + ""+ "'", str24.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "\r\n"+ "'", str28.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "\r\n"+ "'", str33.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + ""+ "'", str34.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + ""+ "'", str35.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + ""+ "'", str36.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "\r\n"+ "'", str37.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "\r\n"+ "'", str42.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "\r\n"+ "'", str47.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str48.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + ""+ "'", str49.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "Invalid flag provided."+ "'", str50.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + ""+ "'", str54.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "\r\n"+ "'", str60.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str61.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "\r\n"+ "'", str66.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str67.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str71 + "' != '" + "\r\n"+ "'", str71.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str73 + "' != '" + "Invalid flag provided."+ "'", str73.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str77 + "' != '" + "     March 2016     \r\nSu Mo Tu We Th Fr Sa\r\n       1  2  3  4  5\r\n 6  7  8  9 10 11 12\r\n13 14 15 16 17 18 19\r\n20 21 22 23 24 25 26\r\n27 28 29 30 31\r\n"+ "'", str77.equals("     March 2016     \r\nSu Mo Tu We Th Fr Sa\r\n       1  2  3  4  5\r\n 6  7  8  9 10 11 12\r\n13 14 15 16 17 18 19\r\n20 21 22 23 24 25 26\r\n27 28 29 30 31\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list78);

  }

  @Test
  public void test114() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test114"); }


    sg.edu.nus.comp.cs4218.impl.cmd.CallCommand callCommand1 = new sg.edu.nus.comp.cs4218.impl.cmd.CallCommand("-");
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl2 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array4 = new java.lang.String[] { "" };
    java.lang.String str5 = shellImpl2.globFilesDirectories(str_array4);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication6 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl7 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array9 = new java.lang.String[] { "" };
    java.lang.String str10 = shellImpl7.globFilesDirectories(str_array9);
    java.lang.String str11 = calApplication6.printCalForYear(str_array9);
    java.lang.String str12 = shellImpl2.pipeTwoCommands(str_array9);
    sg.edu.nus.comp.cs4218.impl.cmd.CallCommand callCommand13 = new sg.edu.nus.comp.cs4218.impl.cmd.CallCommand();
    java.lang.String str14 = callCommand13.getInputStreamS();
    callCommand13.terminate();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication16 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl17 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array19 = new java.lang.String[] { "" };
    java.lang.String str20 = shellImpl17.globFilesDirectories(str_array19);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication21 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl22 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array24 = new java.lang.String[] { "" };
    java.lang.String str25 = shellImpl22.globFilesDirectories(str_array24);
    java.lang.String str26 = calApplication21.printCalForYear(str_array24);
    java.lang.String str27 = shellImpl17.pipeTwoCommands(str_array24);
    java.lang.String str28 = calApplication16.printCalForYearMondayFirst(str_array24);
    java.nio.file.Path path29 = null;
    java.lang.String[] str_array31 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.getFileContents(str_array24, path29, 10);
    java.lang.String[] str_array32 = callCommand13.evaluateGlob(str_array24);
    java.lang.String str33 = shellImpl2.globMultiLevel(str_array24);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl34 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication35 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl36 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array38 = new java.lang.String[] { "" };
    java.lang.String str39 = shellImpl36.globFilesDirectories(str_array38);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication40 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl41 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array43 = new java.lang.String[] { "" };
    java.lang.String str44 = shellImpl41.globFilesDirectories(str_array43);
    java.lang.String str45 = calApplication40.printCalForYear(str_array43);
    java.lang.String str46 = shellImpl36.pipeTwoCommands(str_array43);
    java.lang.String str47 = calApplication35.printCalForYearMondayFirst(str_array43);
    java.nio.file.Path path48 = null;
    java.lang.String[] str_array50 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.getFileContents(str_array43, path48, 10);
    java.lang.String str51 = shellImpl34.globMultiLevel(str_array50);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl52 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array54 = new java.lang.String[] { "" };
    java.lang.String str55 = shellImpl52.globFilesDirectories(str_array54);
    java.lang.String str56 = shellImpl34.pipeTwoCommands(str_array54);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl57 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl58 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array60 = new java.lang.String[] { "" };
    java.lang.String str61 = shellImpl58.globFilesDirectories(str_array60);
    java.lang.String str62 = shellImpl57.pipeWithException(str_array60);
    java.lang.String[] str_array63 = sg.edu.nus.comp.cs4218.impl.ShellImpl.processBQ(str_array60);
    java.lang.String str64 = shellImpl34.globOneFile(str_array63);
    java.lang.String str65 = shellImpl2.globNoPaths(str_array63);
    java.lang.String[] str_array66 = callCommand1.evaluateGlob(str_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "\r\n"+ "'", str5.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\r\n"+ "'", str10.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str11.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + ""+ "'", str12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + ""+ "'", str14.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "\r\n"+ "'", str20.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "\r\n"+ "'", str25.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str26.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + ""+ "'", str27.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "Invalid flag provided."+ "'", str28.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "\r\n"+ "'", str33.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "\r\n"+ "'", str39.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "\r\n"+ "'", str44.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str45.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + ""+ "'", str46.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "Invalid flag provided."+ "'", str47.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + ""+ "'", str51.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "\r\n"+ "'", str55.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + ""+ "'", str56.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "\r\n"+ "'", str61.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + ""+ "'", str62.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str64 + "' != '" + "\r\n"+ "'", str64.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + ""+ "'", str65.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array66);

  }

  @Test
  public void test115() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test115"); }


    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl2 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array4 = new java.lang.String[] { "" };
    java.lang.String str5 = shellImpl2.globFilesDirectories(str_array4);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication6 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl7 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array9 = new java.lang.String[] { "" };
    java.lang.String str10 = shellImpl7.globFilesDirectories(str_array9);
    java.lang.String str11 = calApplication6.printCalForYear(str_array9);
    java.lang.String str12 = shellImpl2.pipeTwoCommands(str_array9);
    java.lang.String str13 = calApplication1.printCalForYearMondayFirst(str_array9);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl14 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array16 = new java.lang.String[] { "" };
    java.lang.String str17 = shellImpl14.globFilesDirectories(str_array16);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication18 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl19 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array21 = new java.lang.String[] { "" };
    java.lang.String str22 = shellImpl19.globFilesDirectories(str_array21);
    java.lang.String str23 = calApplication18.printCalForYear(str_array21);
    java.lang.String str24 = shellImpl14.pipeTwoCommands(str_array21);
    sg.edu.nus.comp.cs4218.impl.cmd.CallCommand callCommand25 = new sg.edu.nus.comp.cs4218.impl.cmd.CallCommand();
    java.lang.String str26 = callCommand25.getInputStreamS();
    callCommand25.terminate();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication28 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl29 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array31 = new java.lang.String[] { "" };
    java.lang.String str32 = shellImpl29.globFilesDirectories(str_array31);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication33 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl34 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array36 = new java.lang.String[] { "" };
    java.lang.String str37 = shellImpl34.globFilesDirectories(str_array36);
    java.lang.String str38 = calApplication33.printCalForYear(str_array36);
    java.lang.String str39 = shellImpl29.pipeTwoCommands(str_array36);
    java.lang.String str40 = calApplication28.printCalForYearMondayFirst(str_array36);
    java.nio.file.Path path41 = null;
    java.lang.String[] str_array43 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.getFileContents(str_array36, path41, 10);
    java.lang.String[] str_array44 = callCommand25.evaluateGlob(str_array36);
    java.lang.String str45 = shellImpl14.globMultiLevel(str_array36);
    java.lang.String str46 = calApplication1.printCal(str_array36);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl47 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl48 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array50 = new java.lang.String[] { "" };
    java.lang.String str51 = shellImpl48.globFilesDirectories(str_array50);
    java.lang.String str52 = shellImpl47.pipeWithException(str_array50);
    java.lang.String[] str_array53 = sg.edu.nus.comp.cs4218.impl.ShellImpl.processBQ(str_array50);
    java.lang.String str54 = calApplication1.printCalForMonthYearMondayFirst(str_array50);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl55 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array57 = new java.lang.String[] { "" };
    java.lang.String str58 = shellImpl55.globFilesDirectories(str_array57);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl59 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl60 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array62 = new java.lang.String[] { "" };
    java.lang.String str63 = shellImpl60.globFilesDirectories(str_array62);
    java.lang.String str64 = shellImpl59.pipeWithException(str_array62);
    java.lang.String str65 = shellImpl55.globNoPaths(str_array62);
    java.lang.String str66 = calApplication1.printCal(str_array62);
    java.util.List list67 = sortApplication0.sortCapitalNumberswithNumFlagOn(str_array62);
    java.lang.String[] str_array69 = new java.lang.String[] { "/" };
    java.util.List list70 = sortApplication0.sortNumbersSpecialChars(str_array69);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication71 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl72 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array74 = new java.lang.String[] { "" };
    java.lang.String str75 = shellImpl72.globFilesDirectories(str_array74);
    java.lang.String str76 = calApplication71.printCalForYear(str_array74);
    java.util.List list77 = sortApplication0.sortNumbersWithNumFlagOn(str_array74);
    java.lang.String[] str_array78 = null;
    // The following exception was thrown during execution in test generation
    try {
      java.util.List list79 = sortApplication0.sortSimpleCapitalSpecialChars(str_array78);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "\r\n"+ "'", str5.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\r\n"+ "'", str10.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str11.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + ""+ "'", str12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Invalid flag provided."+ "'", str13.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "\r\n"+ "'", str17.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "\r\n"+ "'", str22.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str23.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + ""+ "'", str24.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + ""+ "'", str26.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "\r\n"+ "'", str32.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "\r\n"+ "'", str37.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str38.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + ""+ "'", str39.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "Invalid flag provided."+ "'", str40.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "\r\n"+ "'", str45.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "     March 2016     \r\nSu Mo Tu We Th Fr Sa\r\n       1  2  3  4  5\r\n 6  7  8  9 10 11 12\r\n13 14 15 16 17 18 19\r\n20 21 22 23 24 25 26\r\n27 28 29 30 31\r\n"+ "'", str46.equals("     March 2016     \r\nSu Mo Tu We Th Fr Sa\r\n       1  2  3  4  5\r\n 6  7  8  9 10 11 12\r\n13 14 15 16 17 18 19\r\n20 21 22 23 24 25 26\r\n27 28 29 30 31\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "\r\n"+ "'", str51.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + ""+ "'", str52.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "Invalid flag provided."+ "'", str54.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "\r\n"+ "'", str58.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + "\r\n"+ "'", str63.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str64 + "' != '" + ""+ "'", str64.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + ""+ "'", str65.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "     March 2016     \r\nSu Mo Tu We Th Fr Sa\r\n       1  2  3  4  5\r\n 6  7  8  9 10 11 12\r\n13 14 15 16 17 18 19\r\n20 21 22 23 24 25 26\r\n27 28 29 30 31\r\n"+ "'", str66.equals("     March 2016     \r\nSu Mo Tu We Th Fr Sa\r\n       1  2  3  4  5\r\n 6  7  8  9 10 11 12\r\n13 14 15 16 17 18 19\r\n20 21 22 23 24 25 26\r\n27 28 29 30 31\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str75 + "' != '" + "\r\n"+ "'", str75.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str76 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str76.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list77);

  }

  @Test
  public void test116() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test116"); }


    sg.edu.nus.comp.cs4218.impl.cmd.SequenceCommand sequenceCommand1 = new sg.edu.nus.comp.cs4218.impl.cmd.SequenceCommand("-");
    sequenceCommand1.terminate();
    sequenceCommand1.terminate();
    sequenceCommand1.terminate();
    sequenceCommand1.terminate();

  }

  @Test
  public void test117() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test117"); }


    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication0 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.EchoApplication echoApplication1 = new sg.edu.nus.comp.cs4218.impl.app.EchoApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl3 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array5 = new java.lang.String[] { "" };
    java.lang.String str6 = shellImpl3.globFilesDirectories(str_array5);
    java.lang.String str7 = calApplication2.printCalForYear(str_array5);
    java.io.InputStream inputStream8 = null;
    java.io.OutputStream outputStream10 = sg.edu.nus.comp.cs4218.impl.ShellImpl.openOutputRedir("File output redirection and pipe operator cannot be used side by side.");
    echoApplication1.run(str_array5, inputStream8, outputStream10);
    java.lang.String str12 = bcApplication0.number(str_array5);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication13 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication14 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl15 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array17 = new java.lang.String[] { "" };
    java.lang.String str18 = shellImpl15.globFilesDirectories(str_array17);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication19 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl20 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array22 = new java.lang.String[] { "" };
    java.lang.String str23 = shellImpl20.globFilesDirectories(str_array22);
    java.lang.String str24 = calApplication19.printCalForYear(str_array22);
    java.lang.String str25 = shellImpl15.pipeTwoCommands(str_array22);
    java.lang.String str26 = calApplication14.printCalForYearMondayFirst(str_array22);
    java.nio.file.Path path27 = null;
    java.lang.String[] str_array29 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.getFileContents(str_array22, path27, 10);
    java.lang.String str30 = calApplication13.printCal(str_array29);
    java.nio.file.Path path31 = null;
    java.lang.String[] str_array33 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.getFileContents(str_array29, path31, 1);
    java.lang.String[] str_array34 = sg.edu.nus.comp.cs4218.impl.ShellImpl.processBQ(str_array29);
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str35 = bcApplication0.number(str_array29);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\r\n"+ "'", str6.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str7.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(outputStream10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "1"+ "'", str12.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "\r\n"+ "'", str18.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "\r\n"+ "'", str23.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str24.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + ""+ "'", str25.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "Invalid flag provided."+ "'", str26.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "     March 2016     \r\nSu Mo Tu We Th Fr Sa\r\n       1  2  3  4  5\r\n 6  7  8  9 10 11 12\r\n13 14 15 16 17 18 19\r\n20 21 22 23 24 25 26\r\n27 28 29 30 31\r\n"+ "'", str30.equals("     March 2016     \r\nSu Mo Tu We Th Fr Sa\r\n       1  2  3  4  5\r\n 6  7  8  9 10 11 12\r\n13 14 15 16 17 18 19\r\n20 21 22 23 24 25 26\r\n27 28 29 30 31\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array34);

  }

  @Test
  public void test118() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test118"); }


    sg.edu.nus.comp.cs4218.impl.app.TailApplication tailApplication0 = new sg.edu.nus.comp.cs4218.impl.app.TailApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl1 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl3 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array5 = new java.lang.String[] { "" };
    java.lang.String str6 = shellImpl3.globFilesDirectories(str_array5);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl8 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array10 = new java.lang.String[] { "" };
    java.lang.String str11 = shellImpl8.globFilesDirectories(str_array10);
    java.lang.String str12 = calApplication7.printCalForYear(str_array10);
    java.lang.String str13 = shellImpl3.pipeTwoCommands(str_array10);
    java.lang.String str14 = calApplication2.printCalForYearMondayFirst(str_array10);
    java.nio.file.Path path15 = null;
    java.lang.String[] str_array17 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.getFileContents(str_array10, path15, 10);
    java.lang.String str18 = shellImpl1.globMultiLevel(str_array17);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl19 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array21 = new java.lang.String[] { "" };
    java.lang.String str22 = shellImpl19.globFilesDirectories(str_array21);
    java.lang.String str23 = shellImpl1.pipeTwoCommands(str_array21);
    java.io.InputStream inputStream24 = null;
    java.io.OutputStream outputStream26 = sg.edu.nus.comp.cs4218.impl.ShellImpl.openOutputRedir("File output redirection and pipe operator cannot be used side by side.");
    sg.edu.nus.comp.cs4218.impl.app.EchoApplication echoApplication27 = new sg.edu.nus.comp.cs4218.impl.app.EchoApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication28 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl29 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array31 = new java.lang.String[] { "" };
    java.lang.String str32 = shellImpl29.globFilesDirectories(str_array31);
    java.lang.String str33 = calApplication28.printCalForYear(str_array31);
    java.io.InputStream inputStream34 = null;
    java.io.OutputStream outputStream36 = sg.edu.nus.comp.cs4218.impl.ShellImpl.openOutputRedir("File output redirection and pipe operator cannot be used side by side.");
    echoApplication27.run(str_array31, inputStream34, outputStream36);
    sg.edu.nus.comp.cs4218.impl.ShellImpl.writeToStdout(outputStream26, outputStream36);
    sg.edu.nus.comp.cs4218.impl.app.EchoApplication echoApplication39 = new sg.edu.nus.comp.cs4218.impl.app.EchoApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl40 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl41 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array43 = new java.lang.String[] { "" };
    java.lang.String str44 = shellImpl41.globFilesDirectories(str_array43);
    java.lang.String str45 = shellImpl40.pipeWithException(str_array43);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl46 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array48 = new java.lang.String[] { "" };
    java.lang.String str49 = shellImpl46.globFilesDirectories(str_array48);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl50 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl51 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array53 = new java.lang.String[] { "" };
    java.lang.String str54 = shellImpl51.globFilesDirectories(str_array53);
    java.lang.String str55 = shellImpl50.pipeWithException(str_array53);
    java.lang.String str56 = shellImpl46.globNoPaths(str_array53);
    java.lang.String str57 = shellImpl40.globNoPaths(str_array53);
    java.io.InputStream inputStream58 = null;
    java.io.OutputStream outputStream60 = sg.edu.nus.comp.cs4218.impl.ShellImpl.openOutputRedir("File output redirection and pipe operator cannot be used side by side.");
    sg.edu.nus.comp.cs4218.impl.app.EchoApplication echoApplication61 = new sg.edu.nus.comp.cs4218.impl.app.EchoApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication62 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl63 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array65 = new java.lang.String[] { "" };
    java.lang.String str66 = shellImpl63.globFilesDirectories(str_array65);
    java.lang.String str67 = calApplication62.printCalForYear(str_array65);
    java.io.InputStream inputStream68 = null;
    java.io.OutputStream outputStream70 = sg.edu.nus.comp.cs4218.impl.ShellImpl.openOutputRedir("File output redirection and pipe operator cannot be used side by side.");
    echoApplication61.run(str_array65, inputStream68, outputStream70);
    sg.edu.nus.comp.cs4218.impl.ShellImpl.writeToStdout(outputStream60, outputStream70);
    echoApplication39.run(str_array53, inputStream58, outputStream70);
    sg.edu.nus.comp.cs4218.impl.ShellImpl.writeToStdout(outputStream36, outputStream70);
    // The following exception was thrown during execution in test generation
    try {
      tailApplication0.run(str_array21, inputStream24, outputStream70);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.TailException");
    } catch (sg.edu.nus.comp.cs4218.exception.TailException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.TailException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.TailException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\r\n"+ "'", str6.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "\r\n"+ "'", str11.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str12.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + ""+ "'", str13.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Invalid flag provided."+ "'", str14.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + ""+ "'", str18.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "\r\n"+ "'", str22.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + ""+ "'", str23.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(outputStream26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "\r\n"+ "'", str32.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str33.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(outputStream36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "\r\n"+ "'", str44.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + ""+ "'", str45.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "\r\n"+ "'", str49.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "\r\n"+ "'", str54.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + ""+ "'", str55.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + ""+ "'", str56.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + ""+ "'", str57.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(outputStream60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "\r\n"+ "'", str66.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str67.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(outputStream70);

  }

  @Test
  public void test119() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test119"); }


    sg.edu.nus.comp.cs4218.impl.cmd.PipeCommand pipeCommand1 = new sg.edu.nus.comp.cs4218.impl.cmd.PipeCommand("Input redirection file same as output redirection file.");

  }

  @Test
  public void test120() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test120"); }


    sg.edu.nus.comp.cs4218.misc.MergeSort mergeSort1 = new sg.edu.nus.comp.cs4218.misc.MergeSort(false);
    int i4 = mergeSort1.compareIncludeNumOrder("/", "<");
    int i7 = mergeSort1.compareIncludeNumOrder(" not supported yet", "=");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-13));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-29));

  }

  @Test
  public void test121() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test121"); }


    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl2 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array4 = new java.lang.String[] { "" };
    java.lang.String str5 = shellImpl2.globFilesDirectories(str_array4);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication6 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl7 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array9 = new java.lang.String[] { "" };
    java.lang.String str10 = shellImpl7.globFilesDirectories(str_array9);
    java.lang.String str11 = calApplication6.printCalForYear(str_array9);
    java.lang.String str12 = shellImpl2.pipeTwoCommands(str_array9);
    java.lang.String str13 = calApplication1.printCalForYearMondayFirst(str_array9);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl14 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array16 = new java.lang.String[] { "" };
    java.lang.String str17 = shellImpl14.globFilesDirectories(str_array16);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication18 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl19 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array21 = new java.lang.String[] { "" };
    java.lang.String str22 = shellImpl19.globFilesDirectories(str_array21);
    java.lang.String str23 = calApplication18.printCalForYear(str_array21);
    java.lang.String str24 = shellImpl14.pipeTwoCommands(str_array21);
    sg.edu.nus.comp.cs4218.impl.cmd.CallCommand callCommand25 = new sg.edu.nus.comp.cs4218.impl.cmd.CallCommand();
    java.lang.String str26 = callCommand25.getInputStreamS();
    callCommand25.terminate();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication28 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl29 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array31 = new java.lang.String[] { "" };
    java.lang.String str32 = shellImpl29.globFilesDirectories(str_array31);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication33 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl34 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array36 = new java.lang.String[] { "" };
    java.lang.String str37 = shellImpl34.globFilesDirectories(str_array36);
    java.lang.String str38 = calApplication33.printCalForYear(str_array36);
    java.lang.String str39 = shellImpl29.pipeTwoCommands(str_array36);
    java.lang.String str40 = calApplication28.printCalForYearMondayFirst(str_array36);
    java.nio.file.Path path41 = null;
    java.lang.String[] str_array43 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.getFileContents(str_array36, path41, 10);
    java.lang.String[] str_array44 = callCommand25.evaluateGlob(str_array36);
    java.lang.String str45 = shellImpl14.globMultiLevel(str_array36);
    java.lang.String str46 = calApplication1.printCal(str_array36);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl47 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl48 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array50 = new java.lang.String[] { "" };
    java.lang.String str51 = shellImpl48.globFilesDirectories(str_array50);
    java.lang.String str52 = shellImpl47.pipeWithException(str_array50);
    java.lang.String[] str_array53 = sg.edu.nus.comp.cs4218.impl.ShellImpl.processBQ(str_array50);
    java.lang.String str54 = calApplication1.printCalForMonthYearMondayFirst(str_array50);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl55 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array57 = new java.lang.String[] { "" };
    java.lang.String str58 = shellImpl55.globFilesDirectories(str_array57);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl59 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl60 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array62 = new java.lang.String[] { "" };
    java.lang.String str63 = shellImpl60.globFilesDirectories(str_array62);
    java.lang.String str64 = shellImpl59.pipeWithException(str_array62);
    java.lang.String str65 = shellImpl55.globNoPaths(str_array62);
    java.lang.String str66 = calApplication1.printCal(str_array62);
    java.util.List list67 = sortApplication0.sortCapitalNumberswithNumFlagOn(str_array62);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication68 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl69 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array71 = new java.lang.String[] { "" };
    java.lang.String str72 = shellImpl69.globFilesDirectories(str_array71);
    java.lang.String str73 = calApplication68.printCalForYear(str_array71);
    java.util.List list74 = sortApplication0.sortStringsSimple(str_array71);
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str75 = sg.edu.nus.comp.cs4218.impl.app.BcApplication.evaluateHelper(str_array71);
      org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException");
    } catch (java.util.EmptyStackException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.util.EmptyStackException")) {
        org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "\r\n"+ "'", str5.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\r\n"+ "'", str10.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str11.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + ""+ "'", str12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Invalid flag provided."+ "'", str13.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "\r\n"+ "'", str17.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "\r\n"+ "'", str22.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str23.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + ""+ "'", str24.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + ""+ "'", str26.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "\r\n"+ "'", str32.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "\r\n"+ "'", str37.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str38.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + ""+ "'", str39.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "Invalid flag provided."+ "'", str40.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "\r\n"+ "'", str45.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "     March 2016     \r\nSu Mo Tu We Th Fr Sa\r\n       1  2  3  4  5\r\n 6  7  8  9 10 11 12\r\n13 14 15 16 17 18 19\r\n20 21 22 23 24 25 26\r\n27 28 29 30 31\r\n"+ "'", str46.equals("     March 2016     \r\nSu Mo Tu We Th Fr Sa\r\n       1  2  3  4  5\r\n 6  7  8  9 10 11 12\r\n13 14 15 16 17 18 19\r\n20 21 22 23 24 25 26\r\n27 28 29 30 31\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "\r\n"+ "'", str51.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + ""+ "'", str52.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "Invalid flag provided."+ "'", str54.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "\r\n"+ "'", str58.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + "\r\n"+ "'", str63.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str64 + "' != '" + ""+ "'", str64.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + ""+ "'", str65.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "     March 2016     \r\nSu Mo Tu We Th Fr Sa\r\n       1  2  3  4  5\r\n 6  7  8  9 10 11 12\r\n13 14 15 16 17 18 19\r\n20 21 22 23 24 25 26\r\n27 28 29 30 31\r\n"+ "'", str66.equals("     March 2016     \r\nSu Mo Tu We Th Fr Sa\r\n       1  2  3  4  5\r\n 6  7  8  9 10 11 12\r\n13 14 15 16 17 18 19\r\n20 21 22 23 24 25 26\r\n27 28 29 30 31\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str72 + "' != '" + "\r\n"+ "'", str72.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str73 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str73.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list74);

  }

  @Test
  public void test122() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test122"); }


    sg.edu.nus.comp.cs4218.impl.app.DateApplication dateApplication0 = new sg.edu.nus.comp.cs4218.impl.app.DateApplication();
    java.lang.String[] str_array1 = null;
    java.io.InputStream inputStream2 = null;
    sg.edu.nus.comp.cs4218.impl.app.EchoApplication echoApplication3 = new sg.edu.nus.comp.cs4218.impl.app.EchoApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl4 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl5 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array7 = new java.lang.String[] { "" };
    java.lang.String str8 = shellImpl5.globFilesDirectories(str_array7);
    java.lang.String str9 = shellImpl4.pipeWithException(str_array7);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl10 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array12 = new java.lang.String[] { "" };
    java.lang.String str13 = shellImpl10.globFilesDirectories(str_array12);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl14 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl15 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array17 = new java.lang.String[] { "" };
    java.lang.String str18 = shellImpl15.globFilesDirectories(str_array17);
    java.lang.String str19 = shellImpl14.pipeWithException(str_array17);
    java.lang.String str20 = shellImpl10.globNoPaths(str_array17);
    java.lang.String str21 = shellImpl4.globNoPaths(str_array17);
    java.io.InputStream inputStream22 = null;
    java.io.OutputStream outputStream24 = sg.edu.nus.comp.cs4218.impl.ShellImpl.openOutputRedir("File output redirection and pipe operator cannot be used side by side.");
    sg.edu.nus.comp.cs4218.impl.app.EchoApplication echoApplication25 = new sg.edu.nus.comp.cs4218.impl.app.EchoApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication26 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl27 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array29 = new java.lang.String[] { "" };
    java.lang.String str30 = shellImpl27.globFilesDirectories(str_array29);
    java.lang.String str31 = calApplication26.printCalForYear(str_array29);
    java.io.InputStream inputStream32 = null;
    java.io.OutputStream outputStream34 = sg.edu.nus.comp.cs4218.impl.ShellImpl.openOutputRedir("File output redirection and pipe operator cannot be used side by side.");
    echoApplication25.run(str_array29, inputStream32, outputStream34);
    sg.edu.nus.comp.cs4218.impl.ShellImpl.writeToStdout(outputStream24, outputStream34);
    echoApplication3.run(str_array17, inputStream22, outputStream34);
    dateApplication0.run(str_array1, inputStream2, outputStream34);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication40 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication41 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl42 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array44 = new java.lang.String[] { "" };
    java.lang.String str45 = shellImpl42.globFilesDirectories(str_array44);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication46 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl47 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array49 = new java.lang.String[] { "" };
    java.lang.String str50 = shellImpl47.globFilesDirectories(str_array49);
    java.lang.String str51 = calApplication46.printCalForYear(str_array49);
    java.lang.String str52 = shellImpl42.pipeTwoCommands(str_array49);
    java.lang.String str53 = calApplication41.printCalForYearMondayFirst(str_array49);
    java.nio.file.Path path54 = null;
    java.lang.String[] str_array56 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.getFileContents(str_array49, path54, 10);
    java.lang.String str57 = calApplication40.printCal(str_array56);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication58 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication59 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl60 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array62 = new java.lang.String[] { "" };
    java.lang.String str63 = shellImpl60.globFilesDirectories(str_array62);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication64 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl65 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array67 = new java.lang.String[] { "" };
    java.lang.String str68 = shellImpl65.globFilesDirectories(str_array67);
    java.lang.String str69 = calApplication64.printCalForYear(str_array67);
    java.lang.String str70 = shellImpl60.pipeTwoCommands(str_array67);
    java.lang.String str71 = calApplication59.printCalForYearMondayFirst(str_array67);
    java.nio.file.Path path72 = null;
    java.lang.String[] str_array74 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.getFileContents(str_array67, path72, 10);
    java.lang.String str75 = calApplication58.printCal(str_array74);
    java.lang.String str76 = calApplication40.printCal(str_array74);
    java.util.List list77 = sg.edu.nus.comp.cs4218.misc.SortHelper.separateBasedOnType((-13), str_array74);
    java.io.InputStream inputStream78 = null;
    java.io.OutputStream outputStream80 = sg.edu.nus.comp.cs4218.impl.ShellImpl.openOutputRedir("File output redirection and pipe operator cannot be used side by side.");
    sg.edu.nus.comp.cs4218.impl.app.EchoApplication echoApplication81 = new sg.edu.nus.comp.cs4218.impl.app.EchoApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication82 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl83 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array85 = new java.lang.String[] { "" };
    java.lang.String str86 = shellImpl83.globFilesDirectories(str_array85);
    java.lang.String str87 = calApplication82.printCalForYear(str_array85);
    java.io.InputStream inputStream88 = null;
    java.io.OutputStream outputStream90 = sg.edu.nus.comp.cs4218.impl.ShellImpl.openOutputRedir("File output redirection and pipe operator cannot be used side by side.");
    echoApplication81.run(str_array85, inputStream88, outputStream90);
    sg.edu.nus.comp.cs4218.impl.ShellImpl.writeToStdout(outputStream80, outputStream90);
    dateApplication0.run(str_array74, inputStream78, outputStream90);
    sg.edu.nus.comp.cs4218.impl.ShellImpl.closeOutputStream(outputStream90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\r\n"+ "'", str8.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "\r\n"+ "'", str13.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "\r\n"+ "'", str18.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + ""+ "'", str19.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + ""+ "'", str20.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + ""+ "'", str21.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(outputStream24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "\r\n"+ "'", str30.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str31.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(outputStream34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "\r\n"+ "'", str45.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "\r\n"+ "'", str50.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str51.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + ""+ "'", str52.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "Invalid flag provided."+ "'", str53.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "     March 2016     \r\nSu Mo Tu We Th Fr Sa\r\n       1  2  3  4  5\r\n 6  7  8  9 10 11 12\r\n13 14 15 16 17 18 19\r\n20 21 22 23 24 25 26\r\n27 28 29 30 31\r\n"+ "'", str57.equals("     March 2016     \r\nSu Mo Tu We Th Fr Sa\r\n       1  2  3  4  5\r\n 6  7  8  9 10 11 12\r\n13 14 15 16 17 18 19\r\n20 21 22 23 24 25 26\r\n27 28 29 30 31\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + "\r\n"+ "'", str63.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str68 + "' != '" + "\r\n"+ "'", str68.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str69.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str70 + "' != '" + ""+ "'", str70.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str71 + "' != '" + "Invalid flag provided."+ "'", str71.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str75 + "' != '" + "     March 2016     \r\nSu Mo Tu We Th Fr Sa\r\n       1  2  3  4  5\r\n 6  7  8  9 10 11 12\r\n13 14 15 16 17 18 19\r\n20 21 22 23 24 25 26\r\n27 28 29 30 31\r\n"+ "'", str75.equals("     March 2016     \r\nSu Mo Tu We Th Fr Sa\r\n       1  2  3  4  5\r\n 6  7  8  9 10 11 12\r\n13 14 15 16 17 18 19\r\n20 21 22 23 24 25 26\r\n27 28 29 30 31\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str76 + "' != '" + "     March 2016     \r\nSu Mo Tu We Th Fr Sa\r\n       1  2  3  4  5\r\n 6  7  8  9 10 11 12\r\n13 14 15 16 17 18 19\r\n20 21 22 23 24 25 26\r\n27 28 29 30 31\r\n"+ "'", str76.equals("     March 2016     \r\nSu Mo Tu We Th Fr Sa\r\n       1  2  3  4  5\r\n 6  7  8  9 10 11 12\r\n13 14 15 16 17 18 19\r\n20 21 22 23 24 25 26\r\n27 28 29 30 31\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(outputStream80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str86 + "' != '" + "\r\n"+ "'", str86.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str87 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str87.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(outputStream90);

  }

  @Test
  public void test123() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test123"); }


    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl0 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl2 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array4 = new java.lang.String[] { "" };
    java.lang.String str5 = shellImpl2.globFilesDirectories(str_array4);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication6 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl7 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array9 = new java.lang.String[] { "" };
    java.lang.String str10 = shellImpl7.globFilesDirectories(str_array9);
    java.lang.String str11 = calApplication6.printCalForYear(str_array9);
    java.lang.String str12 = shellImpl2.pipeTwoCommands(str_array9);
    java.lang.String str13 = calApplication1.printCalForYearMondayFirst(str_array9);
    java.nio.file.Path path14 = null;
    java.lang.String[] str_array16 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.getFileContents(str_array9, path14, 10);
    java.lang.String str17 = shellImpl0.globMultiLevel(str_array16);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl18 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl19 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array21 = new java.lang.String[] { "" };
    java.lang.String str22 = shellImpl19.globFilesDirectories(str_array21);
    java.lang.String str23 = shellImpl18.pipeWithException(str_array21);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl24 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array26 = new java.lang.String[] { "" };
    java.lang.String str27 = shellImpl24.globFilesDirectories(str_array26);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl28 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl29 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array31 = new java.lang.String[] { "" };
    java.lang.String str32 = shellImpl29.globFilesDirectories(str_array31);
    java.lang.String str33 = shellImpl28.pipeWithException(str_array31);
    java.lang.String str34 = shellImpl24.globNoPaths(str_array31);
    java.lang.String str35 = shellImpl18.globNoPaths(str_array31);
    java.lang.String str36 = shellImpl0.globFilesDirectories(str_array31);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication37 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl38 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array40 = new java.lang.String[] { "" };
    java.lang.String str41 = shellImpl38.globFilesDirectories(str_array40);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication42 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl43 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array45 = new java.lang.String[] { "" };
    java.lang.String str46 = shellImpl43.globFilesDirectories(str_array45);
    java.lang.String str47 = calApplication42.printCalForYear(str_array45);
    java.lang.String str48 = shellImpl38.pipeTwoCommands(str_array45);
    java.lang.String str49 = calApplication37.printCalForYearMondayFirst(str_array45);
    java.nio.file.Path path50 = null;
    java.lang.String[] str_array52 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.getFileContents(str_array45, path50, 10);
    java.lang.String str53 = shellImpl0.globOneFile(str_array52);
    sg.edu.nus.comp.cs4218.impl.cmd.CallCommand callCommand54 = new sg.edu.nus.comp.cs4218.impl.cmd.CallCommand();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl55 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl56 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array58 = new java.lang.String[] { "" };
    java.lang.String str59 = shellImpl56.globFilesDirectories(str_array58);
    java.lang.String str60 = shellImpl55.pipeWithException(str_array58);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl61 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array63 = new java.lang.String[] { "" };
    java.lang.String str64 = shellImpl61.globFilesDirectories(str_array63);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl65 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl66 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array68 = new java.lang.String[] { "" };
    java.lang.String str69 = shellImpl66.globFilesDirectories(str_array68);
    java.lang.String str70 = shellImpl65.pipeWithException(str_array68);
    java.lang.String str71 = shellImpl61.globNoPaths(str_array68);
    java.lang.String str72 = shellImpl55.globNoPaths(str_array68);
    java.lang.String[] str_array73 = callCommand54.evaluateGlob(str_array68);
    java.lang.String str74 = shellImpl0.pipeWithException(str_array68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "\r\n"+ "'", str5.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\r\n"+ "'", str10.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str11.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + ""+ "'", str12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Invalid flag provided."+ "'", str13.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + ""+ "'", str17.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "\r\n"+ "'", str22.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + ""+ "'", str23.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "\r\n"+ "'", str27.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "\r\n"+ "'", str32.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + ""+ "'", str33.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + ""+ "'", str34.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + ""+ "'", str35.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "\r\n"+ "'", str36.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "\r\n"+ "'", str41.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "\r\n"+ "'", str46.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str47.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + ""+ "'", str48.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "Invalid flag provided."+ "'", str49.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + ""+ "'", str53.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "\r\n"+ "'", str59.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + ""+ "'", str60.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str64 + "' != '" + "\r\n"+ "'", str64.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + "\r\n"+ "'", str69.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str70 + "' != '" + ""+ "'", str70.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str71 + "' != '" + ""+ "'", str71.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str72 + "' != '" + ""+ "'", str72.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str74 + "' != '" + ""+ "'", str74.equals(""));

  }

  @Test
  public void test124() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test124"); }


    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl0 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array2 = new java.lang.String[] { "" };
    java.lang.String str3 = shellImpl0.globFilesDirectories(str_array2);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl4 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl5 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array7 = new java.lang.String[] { "" };
    java.lang.String str8 = shellImpl5.globFilesDirectories(str_array7);
    java.lang.String str9 = shellImpl4.pipeWithException(str_array7);
    java.lang.String str10 = shellImpl0.globNoPaths(str_array7);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl11 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication12 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl13 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array15 = new java.lang.String[] { "" };
    java.lang.String str16 = shellImpl13.globFilesDirectories(str_array15);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication17 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl18 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array20 = new java.lang.String[] { "" };
    java.lang.String str21 = shellImpl18.globFilesDirectories(str_array20);
    java.lang.String str22 = calApplication17.printCalForYear(str_array20);
    java.lang.String str23 = shellImpl13.pipeTwoCommands(str_array20);
    java.lang.String str24 = calApplication12.printCalForYearMondayFirst(str_array20);
    java.nio.file.Path path25 = null;
    java.lang.String[] str_array27 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.getFileContents(str_array20, path25, 10);
    java.lang.String str28 = shellImpl11.globMultiLevel(str_array27);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl29 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array31 = new java.lang.String[] { "" };
    java.lang.String str32 = shellImpl29.globFilesDirectories(str_array31);
    java.lang.String str33 = shellImpl11.pipeTwoCommands(str_array31);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl34 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl35 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array37 = new java.lang.String[] { "" };
    java.lang.String str38 = shellImpl35.globFilesDirectories(str_array37);
    java.lang.String str39 = shellImpl34.pipeWithException(str_array37);
    java.lang.String[] str_array40 = sg.edu.nus.comp.cs4218.impl.ShellImpl.processBQ(str_array37);
    java.lang.String str41 = shellImpl11.globOneFile(str_array40);
    java.nio.file.Path path42 = null;
    java.lang.String[] str_array44 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.getFileContents(str_array40, path42, 5);
    java.lang.String str45 = shellImpl0.globNoPaths(str_array44);
    sg.edu.nus.comp.cs4218.impl.app.EchoApplication echoApplication46 = new sg.edu.nus.comp.cs4218.impl.app.EchoApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication47 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl48 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array50 = new java.lang.String[] { "" };
    java.lang.String str51 = shellImpl48.globFilesDirectories(str_array50);
    java.lang.String str52 = calApplication47.printCalForYear(str_array50);
    java.io.InputStream inputStream53 = null;
    java.io.OutputStream outputStream55 = sg.edu.nus.comp.cs4218.impl.ShellImpl.openOutputRedir("File output redirection and pipe operator cannot be used side by side.");
    echoApplication46.run(str_array50, inputStream53, outputStream55);
    boolean b57 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.isNumberCommandFormat(str_array50);
    java.lang.String str58 = shellImpl0.pipeWithException(str_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "\r\n"+ "'", str3.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\r\n"+ "'", str8.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + ""+ "'", str10.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\r\n"+ "'", str16.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "\r\n"+ "'", str21.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str22.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + ""+ "'", str23.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "Invalid flag provided."+ "'", str24.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + ""+ "'", str28.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "\r\n"+ "'", str32.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + ""+ "'", str33.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "\r\n"+ "'", str38.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + ""+ "'", str39.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "\r\n"+ "'", str41.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + ""+ "'", str45.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "\r\n"+ "'", str51.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str52.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(outputStream55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + ""+ "'", str58.equals(""));

  }

  @Test
  public void test125() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test125"); }


    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication0 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl1 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl2 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl3 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array5 = new java.lang.String[] { "" };
    java.lang.String str6 = shellImpl3.globFilesDirectories(str_array5);
    java.lang.String str7 = shellImpl2.pipeWithException(str_array5);
    java.lang.String str8 = shellImpl1.globFilesDirectories(str_array5);
    java.lang.String str9 = bcApplication0.number(str_array5);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication10 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl11 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array13 = new java.lang.String[] { "" };
    java.lang.String str14 = shellImpl11.globFilesDirectories(str_array13);
    java.lang.String str15 = calApplication10.printCalForYear(str_array13);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl16 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array18 = new java.lang.String[] { "" };
    java.lang.String str19 = shellImpl16.globFilesDirectories(str_array18);
    boolean b20 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.isNumberCommandFormat(str_array18);
    java.lang.String str21 = calApplication10.printCalForMonthYearMondayFirst(str_array18);
    java.lang.String str22 = bcApplication0.number(str_array18);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl23 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl24 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array26 = new java.lang.String[] { "" };
    java.lang.String str27 = shellImpl24.globFilesDirectories(str_array26);
    java.lang.String str28 = shellImpl23.pipeWithException(str_array26);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl29 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array31 = new java.lang.String[] { "" };
    java.lang.String str32 = shellImpl29.globFilesDirectories(str_array31);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl33 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl34 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array36 = new java.lang.String[] { "" };
    java.lang.String str37 = shellImpl34.globFilesDirectories(str_array36);
    java.lang.String str38 = shellImpl33.pipeWithException(str_array36);
    java.lang.String str39 = shellImpl29.globNoPaths(str_array36);
    java.lang.String str40 = shellImpl23.globNoPaths(str_array36);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication41 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl42 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl43 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl44 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array46 = new java.lang.String[] { "" };
    java.lang.String str47 = shellImpl44.globFilesDirectories(str_array46);
    java.lang.String str48 = shellImpl43.pipeWithException(str_array46);
    java.lang.String str49 = shellImpl42.globFilesDirectories(str_array46);
    java.lang.String str50 = bcApplication41.number(str_array46);
    java.lang.String str51 = shellImpl23.pipeWithException(str_array46);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl53 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl54 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array56 = new java.lang.String[] { "" };
    java.lang.String str57 = shellImpl54.globFilesDirectories(str_array56);
    java.lang.String str58 = shellImpl53.pipeWithException(str_array56);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl59 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array61 = new java.lang.String[] { "" };
    java.lang.String str62 = shellImpl59.globFilesDirectories(str_array61);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl63 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl64 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array66 = new java.lang.String[] { "" };
    java.lang.String str67 = shellImpl64.globFilesDirectories(str_array66);
    java.lang.String str68 = shellImpl63.pipeWithException(str_array66);
    java.lang.String str69 = shellImpl59.globNoPaths(str_array66);
    java.lang.String str70 = shellImpl53.globNoPaths(str_array66);
    java.util.List list71 = sg.edu.nus.comp.cs4218.misc.SortHelper.separateBasedOnType(10, str_array66);
    java.lang.String str72 = shellImpl23.pipeTwoCommands(str_array66);
    java.lang.String str73 = bcApplication0.number(str_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\r\n"+ "'", str6.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + ""+ "'", str7.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\r\n"+ "'", str8.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "1"+ "'", str9.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\r\n"+ "'", str14.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str15.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "\r\n"+ "'", str19.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Invalid flag provided."+ "'", str21.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "1"+ "'", str22.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "\r\n"+ "'", str27.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + ""+ "'", str28.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "\r\n"+ "'", str32.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "\r\n"+ "'", str37.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + ""+ "'", str38.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + ""+ "'", str39.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + ""+ "'", str40.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "\r\n"+ "'", str47.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + ""+ "'", str48.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "\r\n"+ "'", str49.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "1"+ "'", str50.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + ""+ "'", str51.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "\r\n"+ "'", str57.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + ""+ "'", str58.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "\r\n"+ "'", str62.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "\r\n"+ "'", str67.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str68 + "' != '" + ""+ "'", str68.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + ""+ "'", str69.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str70 + "' != '" + ""+ "'", str70.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str72 + "' != '" + ""+ "'", str72.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str73 + "' != '" + "1"+ "'", str73.equals("1"));

  }

  @Test
  public void test126() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test126"); }


    sg.edu.nus.comp.cs4218.impl.app.DateApplication dateApplication0 = new sg.edu.nus.comp.cs4218.impl.app.DateApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl1 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl3 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array5 = new java.lang.String[] { "" };
    java.lang.String str6 = shellImpl3.globFilesDirectories(str_array5);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl8 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array10 = new java.lang.String[] { "" };
    java.lang.String str11 = shellImpl8.globFilesDirectories(str_array10);
    java.lang.String str12 = calApplication7.printCalForYear(str_array10);
    java.lang.String str13 = shellImpl3.pipeTwoCommands(str_array10);
    java.lang.String str14 = calApplication2.printCalForYearMondayFirst(str_array10);
    java.nio.file.Path path15 = null;
    java.lang.String[] str_array17 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.getFileContents(str_array10, path15, 10);
    java.lang.String str18 = shellImpl1.globMultiLevel(str_array17);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl19 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array21 = new java.lang.String[] { "" };
    java.lang.String str22 = shellImpl19.globFilesDirectories(str_array21);
    java.lang.String str23 = shellImpl1.pipeTwoCommands(str_array21);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl24 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl25 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array27 = new java.lang.String[] { "" };
    java.lang.String str28 = shellImpl25.globFilesDirectories(str_array27);
    java.lang.String str29 = shellImpl24.pipeWithException(str_array27);
    java.lang.String[] str_array30 = sg.edu.nus.comp.cs4218.impl.ShellImpl.processBQ(str_array27);
    java.lang.String str31 = shellImpl1.globOneFile(str_array30);
    java.io.InputStream inputStream32 = null;
    java.io.OutputStream outputStream33 = null;
    // The following exception was thrown during execution in test generation
    try {
      dateApplication0.run(str_array30, inputStream32, outputStream33);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.DateException");
    } catch (sg.edu.nus.comp.cs4218.exception.DateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.DateException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.DateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\r\n"+ "'", str6.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "\r\n"+ "'", str11.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str12.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + ""+ "'", str13.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Invalid flag provided."+ "'", str14.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + ""+ "'", str18.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "\r\n"+ "'", str22.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + ""+ "'", str23.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "\r\n"+ "'", str28.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + ""+ "'", str29.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "\r\n"+ "'", str31.equals("\r\n"));

  }

  @Test
  public void test127() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test127"); }


    sg.edu.nus.comp.cs4218.misc.MergeSort mergeSort1 = new sg.edu.nus.comp.cs4218.misc.MergeSort(false);
    java.lang.String str3 = mergeSort1.extractFirstNumberWordFromLine("");
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication4 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication5 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl6 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array8 = new java.lang.String[] { "" };
    java.lang.String str9 = shellImpl6.globFilesDirectories(str_array8);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication10 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl11 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array13 = new java.lang.String[] { "" };
    java.lang.String str14 = shellImpl11.globFilesDirectories(str_array13);
    java.lang.String str15 = calApplication10.printCalForYear(str_array13);
    java.lang.String str16 = shellImpl6.pipeTwoCommands(str_array13);
    java.lang.String str17 = calApplication5.printCalForYearMondayFirst(str_array13);
    java.nio.file.Path path18 = null;
    java.lang.String[] str_array20 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.getFileContents(str_array13, path18, 10);
    java.lang.String str21 = calApplication4.printCal(str_array20);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication22 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication23 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl24 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array26 = new java.lang.String[] { "" };
    java.lang.String str27 = shellImpl24.globFilesDirectories(str_array26);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication28 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl29 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array31 = new java.lang.String[] { "" };
    java.lang.String str32 = shellImpl29.globFilesDirectories(str_array31);
    java.lang.String str33 = calApplication28.printCalForYear(str_array31);
    java.lang.String str34 = shellImpl24.pipeTwoCommands(str_array31);
    java.lang.String str35 = calApplication23.printCalForYearMondayFirst(str_array31);
    java.nio.file.Path path36 = null;
    java.lang.String[] str_array38 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.getFileContents(str_array31, path36, 10);
    java.lang.String str39 = calApplication22.printCal(str_array38);
    java.lang.String str40 = calApplication4.printCal(str_array38);
    sg.edu.nus.comp.cs4218.impl.cmd.CallCommand callCommand41 = new sg.edu.nus.comp.cs4218.impl.cmd.CallCommand();
    java.lang.String str42 = callCommand41.getInputStreamS();
    callCommand41.terminate();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication44 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl45 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array47 = new java.lang.String[] { "" };
    java.lang.String str48 = shellImpl45.globFilesDirectories(str_array47);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication49 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl50 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array52 = new java.lang.String[] { "" };
    java.lang.String str53 = shellImpl50.globFilesDirectories(str_array52);
    java.lang.String str54 = calApplication49.printCalForYear(str_array52);
    java.lang.String str55 = shellImpl45.pipeTwoCommands(str_array52);
    java.lang.String str56 = calApplication44.printCalForYearMondayFirst(str_array52);
    java.nio.file.Path path57 = null;
    java.lang.String[] str_array59 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.getFileContents(str_array52, path57, 10);
    java.lang.String[] str_array60 = callCommand41.evaluateGlob(str_array59);
    java.lang.String str61 = calApplication4.printCal(str_array59);
    java.lang.String[] str_array62 = sg.edu.nus.comp.cs4218.impl.ShellImpl.processBQ(str_array59);
    java.nio.file.Path path63 = null;
    java.lang.String[] str_array65 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.getFileContents(str_array59, path63, 15);
    java.lang.String[] str_array68 = mergeSort1.mergeSort(str_array65, 48, 2);
    java.lang.String str70 = mergeSort1.extractFirstNumberWordFromLine("*");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + ""+ "'", str3.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "\r\n"+ "'", str9.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\r\n"+ "'", str14.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str15.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + ""+ "'", str16.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "Invalid flag provided."+ "'", str17.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "     March 2016     \r\nSu Mo Tu We Th Fr Sa\r\n       1  2  3  4  5\r\n 6  7  8  9 10 11 12\r\n13 14 15 16 17 18 19\r\n20 21 22 23 24 25 26\r\n27 28 29 30 31\r\n"+ "'", str21.equals("     March 2016     \r\nSu Mo Tu We Th Fr Sa\r\n       1  2  3  4  5\r\n 6  7  8  9 10 11 12\r\n13 14 15 16 17 18 19\r\n20 21 22 23 24 25 26\r\n27 28 29 30 31\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "\r\n"+ "'", str27.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "\r\n"+ "'", str32.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str33.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + ""+ "'", str34.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "Invalid flag provided."+ "'", str35.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "     March 2016     \r\nSu Mo Tu We Th Fr Sa\r\n       1  2  3  4  5\r\n 6  7  8  9 10 11 12\r\n13 14 15 16 17 18 19\r\n20 21 22 23 24 25 26\r\n27 28 29 30 31\r\n"+ "'", str39.equals("     March 2016     \r\nSu Mo Tu We Th Fr Sa\r\n       1  2  3  4  5\r\n 6  7  8  9 10 11 12\r\n13 14 15 16 17 18 19\r\n20 21 22 23 24 25 26\r\n27 28 29 30 31\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "     March 2016     \r\nSu Mo Tu We Th Fr Sa\r\n       1  2  3  4  5\r\n 6  7  8  9 10 11 12\r\n13 14 15 16 17 18 19\r\n20 21 22 23 24 25 26\r\n27 28 29 30 31\r\n"+ "'", str40.equals("     March 2016     \r\nSu Mo Tu We Th Fr Sa\r\n       1  2  3  4  5\r\n 6  7  8  9 10 11 12\r\n13 14 15 16 17 18 19\r\n20 21 22 23 24 25 26\r\n27 28 29 30 31\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + ""+ "'", str42.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "\r\n"+ "'", str48.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "\r\n"+ "'", str53.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str54.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + ""+ "'", str55.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "Invalid flag provided."+ "'", str56.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "     March 2016     \r\nSu Mo Tu We Th Fr Sa\r\n       1  2  3  4  5\r\n 6  7  8  9 10 11 12\r\n13 14 15 16 17 18 19\r\n20 21 22 23 24 25 26\r\n27 28 29 30 31\r\n"+ "'", str61.equals("     March 2016     \r\nSu Mo Tu We Th Fr Sa\r\n       1  2  3  4  5\r\n 6  7  8  9 10 11 12\r\n13 14 15 16 17 18 19\r\n20 21 22 23 24 25 26\r\n27 28 29 30 31\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str70 + "' != '" + ""+ "'", str70.equals(""));

  }

  @Test
  public void test128() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test128"); }


    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl2 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array4 = new java.lang.String[] { "" };
    java.lang.String str5 = shellImpl2.globFilesDirectories(str_array4);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication6 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl7 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array9 = new java.lang.String[] { "" };
    java.lang.String str10 = shellImpl7.globFilesDirectories(str_array9);
    java.lang.String str11 = calApplication6.printCalForYear(str_array9);
    java.lang.String str12 = shellImpl2.pipeTwoCommands(str_array9);
    java.lang.String str13 = calApplication1.printCalForYearMondayFirst(str_array9);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl14 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array16 = new java.lang.String[] { "" };
    java.lang.String str17 = shellImpl14.globFilesDirectories(str_array16);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication18 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl19 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array21 = new java.lang.String[] { "" };
    java.lang.String str22 = shellImpl19.globFilesDirectories(str_array21);
    java.lang.String str23 = calApplication18.printCalForYear(str_array21);
    java.lang.String str24 = shellImpl14.pipeTwoCommands(str_array21);
    sg.edu.nus.comp.cs4218.impl.cmd.CallCommand callCommand25 = new sg.edu.nus.comp.cs4218.impl.cmd.CallCommand();
    java.lang.String str26 = callCommand25.getInputStreamS();
    callCommand25.terminate();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication28 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl29 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array31 = new java.lang.String[] { "" };
    java.lang.String str32 = shellImpl29.globFilesDirectories(str_array31);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication33 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl34 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array36 = new java.lang.String[] { "" };
    java.lang.String str37 = shellImpl34.globFilesDirectories(str_array36);
    java.lang.String str38 = calApplication33.printCalForYear(str_array36);
    java.lang.String str39 = shellImpl29.pipeTwoCommands(str_array36);
    java.lang.String str40 = calApplication28.printCalForYearMondayFirst(str_array36);
    java.nio.file.Path path41 = null;
    java.lang.String[] str_array43 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.getFileContents(str_array36, path41, 10);
    java.lang.String[] str_array44 = callCommand25.evaluateGlob(str_array36);
    java.lang.String str45 = shellImpl14.globMultiLevel(str_array36);
    java.lang.String str46 = calApplication1.printCal(str_array36);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl47 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl48 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array50 = new java.lang.String[] { "" };
    java.lang.String str51 = shellImpl48.globFilesDirectories(str_array50);
    java.lang.String str52 = shellImpl47.pipeWithException(str_array50);
    java.lang.String[] str_array53 = sg.edu.nus.comp.cs4218.impl.ShellImpl.processBQ(str_array50);
    java.lang.String str54 = calApplication1.printCalForMonthYearMondayFirst(str_array50);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl55 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array57 = new java.lang.String[] { "" };
    java.lang.String str58 = shellImpl55.globFilesDirectories(str_array57);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl59 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl60 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array62 = new java.lang.String[] { "" };
    java.lang.String str63 = shellImpl60.globFilesDirectories(str_array62);
    java.lang.String str64 = shellImpl59.pipeWithException(str_array62);
    java.lang.String str65 = shellImpl55.globNoPaths(str_array62);
    java.lang.String str66 = calApplication1.printCal(str_array62);
    java.util.List list67 = sortApplication0.sortCapitalNumberswithNumFlagOn(str_array62);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication68 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl69 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array71 = new java.lang.String[] { "" };
    java.lang.String str72 = shellImpl69.globFilesDirectories(str_array71);
    java.lang.String str73 = calApplication68.printCalForYear(str_array71);
    java.util.List list74 = sortApplication0.sortStringsSimple(str_array71);
    java.lang.String[] str_array76 = new java.lang.String[] { "Invalid syntax encountered." };
    boolean b77 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.isNumberCommandFormat(str_array76);
    java.util.List list78 = sortApplication0.sortSimpleCapitalSpecialChars(str_array76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "\r\n"+ "'", str5.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\r\n"+ "'", str10.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str11.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + ""+ "'", str12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Invalid flag provided."+ "'", str13.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "\r\n"+ "'", str17.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "\r\n"+ "'", str22.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str23.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + ""+ "'", str24.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + ""+ "'", str26.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "\r\n"+ "'", str32.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "\r\n"+ "'", str37.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str38.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + ""+ "'", str39.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "Invalid flag provided."+ "'", str40.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "\r\n"+ "'", str45.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "     March 2016     \r\nSu Mo Tu We Th Fr Sa\r\n       1  2  3  4  5\r\n 6  7  8  9 10 11 12\r\n13 14 15 16 17 18 19\r\n20 21 22 23 24 25 26\r\n27 28 29 30 31\r\n"+ "'", str46.equals("     March 2016     \r\nSu Mo Tu We Th Fr Sa\r\n       1  2  3  4  5\r\n 6  7  8  9 10 11 12\r\n13 14 15 16 17 18 19\r\n20 21 22 23 24 25 26\r\n27 28 29 30 31\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "\r\n"+ "'", str51.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + ""+ "'", str52.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "Invalid flag provided."+ "'", str54.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "\r\n"+ "'", str58.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + "\r\n"+ "'", str63.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str64 + "' != '" + ""+ "'", str64.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + ""+ "'", str65.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "     March 2016     \r\nSu Mo Tu We Th Fr Sa\r\n       1  2  3  4  5\r\n 6  7  8  9 10 11 12\r\n13 14 15 16 17 18 19\r\n20 21 22 23 24 25 26\r\n27 28 29 30 31\r\n"+ "'", str66.equals("     March 2016     \r\nSu Mo Tu We Th Fr Sa\r\n       1  2  3  4  5\r\n 6  7  8  9 10 11 12\r\n13 14 15 16 17 18 19\r\n20 21 22 23 24 25 26\r\n27 28 29 30 31\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str72 + "' != '" + "\r\n"+ "'", str72.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str73 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str73.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list78);

  }

  @Test
  public void test129() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test129"); }


    // The following exception was thrown during execution in test generation
    try {
      java.io.InputStream inputStream1 = sg.edu.nus.comp.cs4218.impl.ShellImpl.openInputRedir("*\r\n");
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.ShellException");
    } catch (sg.edu.nus.comp.cs4218.exception.ShellException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.ShellException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.ShellException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test130() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test130"); }


    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl1 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl3 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array5 = new java.lang.String[] { "" };
    java.lang.String str6 = shellImpl3.globFilesDirectories(str_array5);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl8 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array10 = new java.lang.String[] { "" };
    java.lang.String str11 = shellImpl8.globFilesDirectories(str_array10);
    java.lang.String str12 = calApplication7.printCalForYear(str_array10);
    java.lang.String str13 = shellImpl3.pipeTwoCommands(str_array10);
    java.lang.String str14 = calApplication2.printCalForYearMondayFirst(str_array10);
    java.nio.file.Path path15 = null;
    java.lang.String[] str_array17 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.getFileContents(str_array10, path15, 10);
    java.lang.String str18 = shellImpl1.globMultiLevel(str_array17);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl19 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array21 = new java.lang.String[] { "" };
    java.lang.String str22 = shellImpl19.globFilesDirectories(str_array21);
    java.lang.String str23 = shellImpl1.pipeTwoCommands(str_array21);
    java.lang.String str24 = calApplication0.printCal(str_array21);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl25 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl26 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array28 = new java.lang.String[] { "" };
    java.lang.String str29 = shellImpl26.globFilesDirectories(str_array28);
    java.lang.String str30 = shellImpl25.pipeWithException(str_array28);
    java.lang.String[] str_array31 = sg.edu.nus.comp.cs4218.impl.ShellImpl.processBQ(str_array28);
    java.lang.String str32 = calApplication0.printCalWithMondayFirst(str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\r\n"+ "'", str6.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "\r\n"+ "'", str11.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str12.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + ""+ "'", str13.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Invalid flag provided."+ "'", str14.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + ""+ "'", str18.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "\r\n"+ "'", str22.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + ""+ "'", str23.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "     March 2016     \r\nSu Mo Tu We Th Fr Sa\r\n       1  2  3  4  5\r\n 6  7  8  9 10 11 12\r\n13 14 15 16 17 18 19\r\n20 21 22 23 24 25 26\r\n27 28 29 30 31\r\n"+ "'", str24.equals("     March 2016     \r\nSu Mo Tu We Th Fr Sa\r\n       1  2  3  4  5\r\n 6  7  8  9 10 11 12\r\n13 14 15 16 17 18 19\r\n20 21 22 23 24 25 26\r\n27 28 29 30 31\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "\r\n"+ "'", str29.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + ""+ "'", str30.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "Invalid flag provided."+ "'", str32.equals("Invalid flag provided."));

  }

  @Test
  public void test131() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test131"); }


    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl0 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array2 = new java.lang.String[] { "" };
    java.lang.String str3 = shellImpl0.globFilesDirectories(str_array2);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication4 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl5 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array7 = new java.lang.String[] { "" };
    java.lang.String str8 = shellImpl5.globFilesDirectories(str_array7);
    java.lang.String str9 = calApplication4.printCalForYear(str_array7);
    java.lang.String str10 = shellImpl0.pipeTwoCommands(str_array7);
    sg.edu.nus.comp.cs4218.impl.cmd.CallCommand callCommand11 = new sg.edu.nus.comp.cs4218.impl.cmd.CallCommand();
    java.lang.String str12 = callCommand11.getInputStreamS();
    callCommand11.terminate();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication14 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl15 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array17 = new java.lang.String[] { "" };
    java.lang.String str18 = shellImpl15.globFilesDirectories(str_array17);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication19 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl20 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array22 = new java.lang.String[] { "" };
    java.lang.String str23 = shellImpl20.globFilesDirectories(str_array22);
    java.lang.String str24 = calApplication19.printCalForYear(str_array22);
    java.lang.String str25 = shellImpl15.pipeTwoCommands(str_array22);
    java.lang.String str26 = calApplication14.printCalForYearMondayFirst(str_array22);
    java.nio.file.Path path27 = null;
    java.lang.String[] str_array29 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.getFileContents(str_array22, path27, 10);
    java.lang.String[] str_array30 = callCommand11.evaluateGlob(str_array22);
    java.lang.String str31 = shellImpl0.globMultiLevel(str_array22);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication32 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl33 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array35 = new java.lang.String[] { "" };
    java.lang.String str36 = shellImpl33.globFilesDirectories(str_array35);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication37 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl38 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array40 = new java.lang.String[] { "" };
    java.lang.String str41 = shellImpl38.globFilesDirectories(str_array40);
    java.lang.String str42 = calApplication37.printCalForYear(str_array40);
    java.lang.String str43 = shellImpl33.pipeTwoCommands(str_array40);
    java.lang.String str44 = calApplication32.printCalForYearMondayFirst(str_array40);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl45 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array47 = new java.lang.String[] { "" };
    java.lang.String str48 = shellImpl45.globFilesDirectories(str_array47);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication49 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl50 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array52 = new java.lang.String[] { "" };
    java.lang.String str53 = shellImpl50.globFilesDirectories(str_array52);
    java.lang.String str54 = calApplication49.printCalForYear(str_array52);
    java.lang.String str55 = shellImpl45.pipeTwoCommands(str_array52);
    sg.edu.nus.comp.cs4218.impl.cmd.CallCommand callCommand56 = new sg.edu.nus.comp.cs4218.impl.cmd.CallCommand();
    java.lang.String str57 = callCommand56.getInputStreamS();
    callCommand56.terminate();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication59 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl60 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array62 = new java.lang.String[] { "" };
    java.lang.String str63 = shellImpl60.globFilesDirectories(str_array62);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication64 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl65 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array67 = new java.lang.String[] { "" };
    java.lang.String str68 = shellImpl65.globFilesDirectories(str_array67);
    java.lang.String str69 = calApplication64.printCalForYear(str_array67);
    java.lang.String str70 = shellImpl60.pipeTwoCommands(str_array67);
    java.lang.String str71 = calApplication59.printCalForYearMondayFirst(str_array67);
    java.nio.file.Path path72 = null;
    java.lang.String[] str_array74 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.getFileContents(str_array67, path72, 10);
    java.lang.String[] str_array75 = callCommand56.evaluateGlob(str_array67);
    java.lang.String str76 = shellImpl45.globMultiLevel(str_array67);
    java.lang.String str77 = calApplication32.printCal(str_array67);
    sg.edu.nus.comp.cs4218.impl.cmd.CallCommand callCommand78 = new sg.edu.nus.comp.cs4218.impl.cmd.CallCommand();
    java.lang.String str79 = callCommand78.getInputStreamS();
    callCommand78.terminate();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication81 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl82 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array84 = new java.lang.String[] { "" };
    java.lang.String str85 = shellImpl82.globFilesDirectories(str_array84);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication86 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl87 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array89 = new java.lang.String[] { "" };
    java.lang.String str90 = shellImpl87.globFilesDirectories(str_array89);
    java.lang.String str91 = calApplication86.printCalForYear(str_array89);
    java.lang.String str92 = shellImpl82.pipeTwoCommands(str_array89);
    java.lang.String str93 = calApplication81.printCalForYearMondayFirst(str_array89);
    java.nio.file.Path path94 = null;
    java.lang.String[] str_array96 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.getFileContents(str_array89, path94, 10);
    java.lang.String[] str_array97 = callCommand78.evaluateGlob(str_array96);
    java.lang.String str98 = calApplication32.printCalWithMondayFirst(str_array97);
    java.lang.String str99 = shellImpl0.pipeTwoCommands(str_array97);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "\r\n"+ "'", str3.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\r\n"+ "'", str8.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str9.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + ""+ "'", str10.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + ""+ "'", str12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "\r\n"+ "'", str18.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "\r\n"+ "'", str23.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str24.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + ""+ "'", str25.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "Invalid flag provided."+ "'", str26.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "\r\n"+ "'", str31.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "\r\n"+ "'", str36.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "\r\n"+ "'", str41.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str42.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + ""+ "'", str43.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "Invalid flag provided."+ "'", str44.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "\r\n"+ "'", str48.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "\r\n"+ "'", str53.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str54.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + ""+ "'", str55.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + ""+ "'", str57.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + "\r\n"+ "'", str63.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str68 + "' != '" + "\r\n"+ "'", str68.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str69.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str70 + "' != '" + ""+ "'", str70.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str71 + "' != '" + "Invalid flag provided."+ "'", str71.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str76 + "' != '" + "\r\n"+ "'", str76.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str77 + "' != '" + "     March 2016     \r\nSu Mo Tu We Th Fr Sa\r\n       1  2  3  4  5\r\n 6  7  8  9 10 11 12\r\n13 14 15 16 17 18 19\r\n20 21 22 23 24 25 26\r\n27 28 29 30 31\r\n"+ "'", str77.equals("     March 2016     \r\nSu Mo Tu We Th Fr Sa\r\n       1  2  3  4  5\r\n 6  7  8  9 10 11 12\r\n13 14 15 16 17 18 19\r\n20 21 22 23 24 25 26\r\n27 28 29 30 31\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str79 + "' != '" + ""+ "'", str79.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str85 + "' != '" + "\r\n"+ "'", str85.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str90 + "' != '" + "\r\n"+ "'", str90.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str91 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str91.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str92 + "' != '" + ""+ "'", str92.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str93 + "' != '" + "Invalid flag provided."+ "'", str93.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array96);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array97);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str98 + "' != '" + "Invalid flag provided."+ "'", str98.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str99 + "' != '" + ""+ "'", str99.equals(""));

  }

  @Test
  public void test132() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test132"); }


    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl2 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array4 = new java.lang.String[] { "" };
    java.lang.String str5 = shellImpl2.globFilesDirectories(str_array4);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication6 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl7 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array9 = new java.lang.String[] { "" };
    java.lang.String str10 = shellImpl7.globFilesDirectories(str_array9);
    java.lang.String str11 = calApplication6.printCalForYear(str_array9);
    java.lang.String str12 = shellImpl2.pipeTwoCommands(str_array9);
    java.lang.String str13 = calApplication1.printCalForYearMondayFirst(str_array9);
    java.nio.file.Path path14 = null;
    java.lang.String[] str_array16 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.getFileContents(str_array9, path14, 10);
    java.lang.String str17 = calApplication0.printCal(str_array16);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication18 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication19 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl20 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array22 = new java.lang.String[] { "" };
    java.lang.String str23 = shellImpl20.globFilesDirectories(str_array22);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication24 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl25 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array27 = new java.lang.String[] { "" };
    java.lang.String str28 = shellImpl25.globFilesDirectories(str_array27);
    java.lang.String str29 = calApplication24.printCalForYear(str_array27);
    java.lang.String str30 = shellImpl20.pipeTwoCommands(str_array27);
    java.lang.String str31 = calApplication19.printCalForYearMondayFirst(str_array27);
    java.nio.file.Path path32 = null;
    java.lang.String[] str_array34 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.getFileContents(str_array27, path32, 10);
    java.lang.String str35 = calApplication18.printCal(str_array34);
    java.lang.String str36 = calApplication0.printCal(str_array34);
    java.lang.String[] str_array37 = null;
    java.io.InputStream inputStream38 = null;
    java.io.OutputStream outputStream40 = sg.edu.nus.comp.cs4218.impl.ShellImpl.openOutputRedir("hi!");
    // The following exception was thrown during execution in test generation
    try {
      calApplication0.run(str_array37, inputStream38, outputStream40);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.CalException");
    } catch (sg.edu.nus.comp.cs4218.exception.CalException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.CalException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.CalException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "\r\n"+ "'", str5.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\r\n"+ "'", str10.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str11.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + ""+ "'", str12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Invalid flag provided."+ "'", str13.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "     March 2016     \r\nSu Mo Tu We Th Fr Sa\r\n       1  2  3  4  5\r\n 6  7  8  9 10 11 12\r\n13 14 15 16 17 18 19\r\n20 21 22 23 24 25 26\r\n27 28 29 30 31\r\n"+ "'", str17.equals("     March 2016     \r\nSu Mo Tu We Th Fr Sa\r\n       1  2  3  4  5\r\n 6  7  8  9 10 11 12\r\n13 14 15 16 17 18 19\r\n20 21 22 23 24 25 26\r\n27 28 29 30 31\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "\r\n"+ "'", str23.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "\r\n"+ "'", str28.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str29.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + ""+ "'", str30.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "Invalid flag provided."+ "'", str31.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "     March 2016     \r\nSu Mo Tu We Th Fr Sa\r\n       1  2  3  4  5\r\n 6  7  8  9 10 11 12\r\n13 14 15 16 17 18 19\r\n20 21 22 23 24 25 26\r\n27 28 29 30 31\r\n"+ "'", str35.equals("     March 2016     \r\nSu Mo Tu We Th Fr Sa\r\n       1  2  3  4  5\r\n 6  7  8  9 10 11 12\r\n13 14 15 16 17 18 19\r\n20 21 22 23 24 25 26\r\n27 28 29 30 31\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "     March 2016     \r\nSu Mo Tu We Th Fr Sa\r\n       1  2  3  4  5\r\n 6  7  8  9 10 11 12\r\n13 14 15 16 17 18 19\r\n20 21 22 23 24 25 26\r\n27 28 29 30 31\r\n"+ "'", str36.equals("     March 2016     \r\nSu Mo Tu We Th Fr Sa\r\n       1  2  3  4  5\r\n 6  7  8  9 10 11 12\r\n13 14 15 16 17 18 19\r\n20 21 22 23 24 25 26\r\n27 28 29 30 31\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(outputStream40);

  }

  @Test
  public void test133() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test133"); }


    boolean b1 = sg.edu.nus.comp.cs4218.misc.ExpressionEvaluator.isParenthesesCountSame("|");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);

  }

  @Test
  public void test134() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test134"); }


    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl0 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl2 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array4 = new java.lang.String[] { "" };
    java.lang.String str5 = shellImpl2.globFilesDirectories(str_array4);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication6 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl7 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array9 = new java.lang.String[] { "" };
    java.lang.String str10 = shellImpl7.globFilesDirectories(str_array9);
    java.lang.String str11 = calApplication6.printCalForYear(str_array9);
    java.lang.String str12 = shellImpl2.pipeTwoCommands(str_array9);
    java.lang.String str13 = calApplication1.printCalForYearMondayFirst(str_array9);
    java.nio.file.Path path14 = null;
    java.lang.String[] str_array16 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.getFileContents(str_array9, path14, 10);
    java.lang.String str17 = shellImpl0.globMultiLevel(str_array16);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl18 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl19 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array21 = new java.lang.String[] { "" };
    java.lang.String str22 = shellImpl19.globFilesDirectories(str_array21);
    java.lang.String str23 = shellImpl18.pipeWithException(str_array21);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl24 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array26 = new java.lang.String[] { "" };
    java.lang.String str27 = shellImpl24.globFilesDirectories(str_array26);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl28 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl29 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array31 = new java.lang.String[] { "" };
    java.lang.String str32 = shellImpl29.globFilesDirectories(str_array31);
    java.lang.String str33 = shellImpl28.pipeWithException(str_array31);
    java.lang.String str34 = shellImpl24.globNoPaths(str_array31);
    java.lang.String str35 = shellImpl18.globNoPaths(str_array31);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication36 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl37 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl38 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl39 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array41 = new java.lang.String[] { "" };
    java.lang.String str42 = shellImpl39.globFilesDirectories(str_array41);
    java.lang.String str43 = shellImpl38.pipeWithException(str_array41);
    java.lang.String str44 = shellImpl37.globFilesDirectories(str_array41);
    java.lang.String str45 = bcApplication36.number(str_array41);
    java.lang.String str46 = shellImpl18.pipeWithException(str_array41);
    java.lang.String str47 = shellImpl0.globNoPaths(str_array41);
    sg.edu.nus.comp.cs4218.impl.cmd.PipeCommand pipeCommand50 = new sg.edu.nus.comp.cs4218.impl.cmd.PipeCommand("|");
    java.io.InputStream inputStream51 = null;
    sg.edu.nus.comp.cs4218.impl.app.DateApplication dateApplication52 = new sg.edu.nus.comp.cs4218.impl.app.DateApplication();
    java.lang.String[] str_array53 = null;
    java.io.InputStream inputStream54 = null;
    sg.edu.nus.comp.cs4218.impl.app.EchoApplication echoApplication55 = new sg.edu.nus.comp.cs4218.impl.app.EchoApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl56 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl57 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array59 = new java.lang.String[] { "" };
    java.lang.String str60 = shellImpl57.globFilesDirectories(str_array59);
    java.lang.String str61 = shellImpl56.pipeWithException(str_array59);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl62 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array64 = new java.lang.String[] { "" };
    java.lang.String str65 = shellImpl62.globFilesDirectories(str_array64);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl66 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl67 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array69 = new java.lang.String[] { "" };
    java.lang.String str70 = shellImpl67.globFilesDirectories(str_array69);
    java.lang.String str71 = shellImpl66.pipeWithException(str_array69);
    java.lang.String str72 = shellImpl62.globNoPaths(str_array69);
    java.lang.String str73 = shellImpl56.globNoPaths(str_array69);
    java.io.InputStream inputStream74 = null;
    java.io.OutputStream outputStream76 = sg.edu.nus.comp.cs4218.impl.ShellImpl.openOutputRedir("File output redirection and pipe operator cannot be used side by side.");
    sg.edu.nus.comp.cs4218.impl.app.EchoApplication echoApplication77 = new sg.edu.nus.comp.cs4218.impl.app.EchoApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication78 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl79 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array81 = new java.lang.String[] { "" };
    java.lang.String str82 = shellImpl79.globFilesDirectories(str_array81);
    java.lang.String str83 = calApplication78.printCalForYear(str_array81);
    java.io.InputStream inputStream84 = null;
    java.io.OutputStream outputStream86 = sg.edu.nus.comp.cs4218.impl.ShellImpl.openOutputRedir("File output redirection and pipe operator cannot be used side by side.");
    echoApplication77.run(str_array81, inputStream84, outputStream86);
    sg.edu.nus.comp.cs4218.impl.ShellImpl.writeToStdout(outputStream76, outputStream86);
    echoApplication55.run(str_array69, inputStream74, outputStream86);
    dateApplication52.run(str_array53, inputStream54, outputStream86);
    pipeCommand50.evaluate(inputStream51, outputStream86);
    // The following exception was thrown during execution in test generation
    try {
      shellImpl0.parseAndEvaluate("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n", outputStream86);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.ShellException");
    } catch (sg.edu.nus.comp.cs4218.exception.ShellException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.ShellException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.ShellException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "\r\n"+ "'", str5.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\r\n"+ "'", str10.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str11.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + ""+ "'", str12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Invalid flag provided."+ "'", str13.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + ""+ "'", str17.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "\r\n"+ "'", str22.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + ""+ "'", str23.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "\r\n"+ "'", str27.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "\r\n"+ "'", str32.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + ""+ "'", str33.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + ""+ "'", str34.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + ""+ "'", str35.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "\r\n"+ "'", str42.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + ""+ "'", str43.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "\r\n"+ "'", str44.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "1"+ "'", str45.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + ""+ "'", str46.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + ""+ "'", str47.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "\r\n"+ "'", str60.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + ""+ "'", str61.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "\r\n"+ "'", str65.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str70 + "' != '" + "\r\n"+ "'", str70.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str71 + "' != '" + ""+ "'", str71.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str72 + "' != '" + ""+ "'", str72.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str73 + "' != '" + ""+ "'", str73.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(outputStream76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str82 + "' != '" + "\r\n"+ "'", str82.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str83 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str83.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(outputStream86);

  }

  @Test
  public void test135() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test135"); }


    sg.edu.nus.comp.cs4218.impl.GlobFinder globFinder2 = new sg.edu.nus.comp.cs4218.impl.GlobFinder("Missing arg for pipe command.", "Missing arg for pipe command.");
    java.nio.file.Path path3 = null;
    java.nio.file.attribute.BasicFileAttributes basicFileAttributes4 = null;
    java.nio.file.FileVisitResult fileVisitResult5 = globFinder2.preVisitDirectory(path3, basicFileAttributes4);
    java.nio.file.Path path6 = null;
    java.nio.file.attribute.BasicFileAttributes basicFileAttributes7 = null;
    java.nio.file.FileVisitResult fileVisitResult8 = globFinder2.preVisitDirectory(path6, basicFileAttributes7);
    java.nio.file.Path path9 = null;
    java.nio.file.attribute.BasicFileAttributes basicFileAttributes10 = null;
    java.nio.file.FileVisitResult fileVisitResult11 = globFinder2.visitFile(path9, basicFileAttributes10);
    java.nio.file.Path path12 = null;
    java.nio.file.attribute.BasicFileAttributes basicFileAttributes13 = null;
    java.nio.file.FileVisitResult fileVisitResult14 = globFinder2.preVisitDirectory(path12, basicFileAttributes13);
    java.util.List list15 = globFinder2.getResults();
    java.util.List list16 = globFinder2.getResults();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fileVisitResult5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fileVisitResult8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fileVisitResult11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fileVisitResult14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list16);

  }

  @Test
  public void test136() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test136"); }


    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl1 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array3 = new java.lang.String[] { "" };
    java.lang.String str4 = shellImpl1.globFilesDirectories(str_array3);
    java.lang.String str5 = calApplication0.printCalForYear(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication6 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl7 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array9 = new java.lang.String[] { "" };
    java.lang.String str10 = shellImpl7.globFilesDirectories(str_array9);
    java.lang.String str11 = calApplication6.printCalForYear(str_array9);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl12 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array14 = new java.lang.String[] { "" };
    java.lang.String str15 = shellImpl12.globFilesDirectories(str_array14);
    boolean b16 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.isNumberCommandFormat(str_array14);
    java.lang.String str17 = calApplication6.printCalForMonthYearMondayFirst(str_array14);
    java.nio.file.Path path18 = null;
    java.lang.String[] str_array20 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.getFileContents(str_array14, path18, 4);
    java.lang.String str21 = calApplication0.printCal(str_array14);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl22 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication23 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl24 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array26 = new java.lang.String[] { "" };
    java.lang.String str27 = shellImpl24.globFilesDirectories(str_array26);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication28 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl29 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array31 = new java.lang.String[] { "" };
    java.lang.String str32 = shellImpl29.globFilesDirectories(str_array31);
    java.lang.String str33 = calApplication28.printCalForYear(str_array31);
    java.lang.String str34 = shellImpl24.pipeTwoCommands(str_array31);
    java.lang.String str35 = calApplication23.printCalForYearMondayFirst(str_array31);
    java.nio.file.Path path36 = null;
    java.lang.String[] str_array38 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.getFileContents(str_array31, path36, 10);
    java.lang.String str39 = shellImpl22.globMultiLevel(str_array38);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl40 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array42 = new java.lang.String[] { "" };
    java.lang.String str43 = shellImpl40.globFilesDirectories(str_array42);
    java.lang.String str44 = shellImpl22.pipeTwoCommands(str_array42);
    sg.edu.nus.comp.cs4218.impl.cmd.CallCommand callCommand45 = new sg.edu.nus.comp.cs4218.impl.cmd.CallCommand();
    java.lang.String str46 = callCommand45.getInputStreamS();
    callCommand45.terminate();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication48 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl49 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array51 = new java.lang.String[] { "" };
    java.lang.String str52 = shellImpl49.globFilesDirectories(str_array51);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication53 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl54 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array56 = new java.lang.String[] { "" };
    java.lang.String str57 = shellImpl54.globFilesDirectories(str_array56);
    java.lang.String str58 = calApplication53.printCalForYear(str_array56);
    java.lang.String str59 = shellImpl49.pipeTwoCommands(str_array56);
    java.lang.String str60 = calApplication48.printCalForYearMondayFirst(str_array56);
    java.nio.file.Path path61 = null;
    java.lang.String[] str_array63 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.getFileContents(str_array56, path61, 10);
    java.lang.String[] str_array64 = callCommand45.evaluateGlob(str_array63);
    java.lang.String str65 = shellImpl22.globOneFile(str_array64);
    java.lang.String str66 = calApplication0.printCal(str_array64);
    sg.edu.nus.comp.cs4218.impl.cmd.CallCommand callCommand68 = new sg.edu.nus.comp.cs4218.impl.cmd.CallCommand("||");
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl69 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array71 = new java.lang.String[] { "" };
    java.lang.String str72 = shellImpl69.globFilesDirectories(str_array71);
    java.lang.String[] str_array73 = callCommand68.evaluateGlob(str_array71);
    java.lang.String str74 = calApplication0.printCalWithMondayFirst(str_array71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\r\n"+ "'", str4.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str5.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\r\n"+ "'", str10.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str11.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "\r\n"+ "'", str15.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "Invalid flag provided."+ "'", str17.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "     March 2016     \r\nSu Mo Tu We Th Fr Sa\r\n       1  2  3  4  5\r\n 6  7  8  9 10 11 12\r\n13 14 15 16 17 18 19\r\n20 21 22 23 24 25 26\r\n27 28 29 30 31\r\n"+ "'", str21.equals("     March 2016     \r\nSu Mo Tu We Th Fr Sa\r\n       1  2  3  4  5\r\n 6  7  8  9 10 11 12\r\n13 14 15 16 17 18 19\r\n20 21 22 23 24 25 26\r\n27 28 29 30 31\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "\r\n"+ "'", str27.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "\r\n"+ "'", str32.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str33.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + ""+ "'", str34.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "Invalid flag provided."+ "'", str35.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + ""+ "'", str39.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "\r\n"+ "'", str43.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + ""+ "'", str44.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + ""+ "'", str46.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "\r\n"+ "'", str52.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "\r\n"+ "'", str57.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str58.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + ""+ "'", str59.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "Invalid flag provided."+ "'", str60.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + ""+ "'", str65.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "     March 2016     \r\nSu Mo Tu We Th Fr Sa\r\n       1  2  3  4  5\r\n 6  7  8  9 10 11 12\r\n13 14 15 16 17 18 19\r\n20 21 22 23 24 25 26\r\n27 28 29 30 31\r\n"+ "'", str66.equals("     March 2016     \r\nSu Mo Tu We Th Fr Sa\r\n       1  2  3  4  5\r\n 6  7  8  9 10 11 12\r\n13 14 15 16 17 18 19\r\n20 21 22 23 24 25 26\r\n27 28 29 30 31\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str72 + "' != '" + "\r\n"+ "'", str72.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str74 + "' != '" + "Invalid flag provided."+ "'", str74.equals("Invalid flag provided."));

  }

  @Test
  public void test137() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test137"); }


    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str3 = sg.edu.nus.comp.cs4218.misc.ExpressionEvaluator.calculateArithmetic("^", " not supported yet", "File output redirection and pipe operator cannot be used side by side.");
      org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
    } catch (java.lang.NumberFormatException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NumberFormatException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test138() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test138"); }


    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl2 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication3 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl4 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array6 = new java.lang.String[] { "" };
    java.lang.String str7 = shellImpl4.globFilesDirectories(str_array6);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication8 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl9 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array11 = new java.lang.String[] { "" };
    java.lang.String str12 = shellImpl9.globFilesDirectories(str_array11);
    java.lang.String str13 = calApplication8.printCalForYear(str_array11);
    java.lang.String str14 = shellImpl4.pipeTwoCommands(str_array11);
    java.lang.String str15 = calApplication3.printCalForYearMondayFirst(str_array11);
    java.nio.file.Path path16 = null;
    java.lang.String[] str_array18 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.getFileContents(str_array11, path16, 10);
    java.lang.String str19 = shellImpl2.globMultiLevel(str_array18);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl20 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array22 = new java.lang.String[] { "" };
    java.lang.String str23 = shellImpl20.globFilesDirectories(str_array22);
    java.lang.String str24 = shellImpl2.pipeTwoCommands(str_array22);
    java.lang.String str25 = calApplication1.printCal(str_array22);
    java.util.List list26 = sortApplication0.sortSpecialChars(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "\r\n"+ "'", str7.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\r\n"+ "'", str12.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str13.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + ""+ "'", str14.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "Invalid flag provided."+ "'", str15.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + ""+ "'", str19.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "\r\n"+ "'", str23.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + ""+ "'", str24.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "     March 2016     \r\nSu Mo Tu We Th Fr Sa\r\n       1  2  3  4  5\r\n 6  7  8  9 10 11 12\r\n13 14 15 16 17 18 19\r\n20 21 22 23 24 25 26\r\n27 28 29 30 31\r\n"+ "'", str25.equals("     March 2016     \r\nSu Mo Tu We Th Fr Sa\r\n       1  2  3  4  5\r\n 6  7  8  9 10 11 12\r\n13 14 15 16 17 18 19\r\n20 21 22 23 24 25 26\r\n27 28 29 30 31\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list26);

  }

  @Test
  public void test139() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test139"); }


    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication0 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl1 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl2 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl3 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array5 = new java.lang.String[] { "" };
    java.lang.String str6 = shellImpl3.globFilesDirectories(str_array5);
    java.lang.String str7 = shellImpl2.pipeWithException(str_array5);
    java.lang.String str8 = shellImpl1.globFilesDirectories(str_array5);
    java.lang.String str9 = bcApplication0.number(str_array5);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl10 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array12 = new java.lang.String[] { "" };
    java.lang.String str13 = shellImpl10.globFilesDirectories(str_array12);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication14 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl15 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array17 = new java.lang.String[] { "" };
    java.lang.String str18 = shellImpl15.globFilesDirectories(str_array17);
    java.lang.String str19 = calApplication14.printCalForYear(str_array17);
    java.lang.String str20 = shellImpl10.pipeTwoCommands(str_array17);
    java.lang.String str21 = bcApplication0.number(str_array17);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication23 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication24 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl25 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array27 = new java.lang.String[] { "" };
    java.lang.String str28 = shellImpl25.globFilesDirectories(str_array27);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication29 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl30 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array32 = new java.lang.String[] { "" };
    java.lang.String str33 = shellImpl30.globFilesDirectories(str_array32);
    java.lang.String str34 = calApplication29.printCalForYear(str_array32);
    java.lang.String str35 = shellImpl25.pipeTwoCommands(str_array32);
    java.lang.String str36 = calApplication24.printCalForYearMondayFirst(str_array32);
    java.nio.file.Path path37 = null;
    java.lang.String[] str_array39 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.getFileContents(str_array32, path37, 10);
    java.lang.String str40 = calApplication23.printCal(str_array39);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication41 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication42 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl43 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array45 = new java.lang.String[] { "" };
    java.lang.String str46 = shellImpl43.globFilesDirectories(str_array45);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication47 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl48 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array50 = new java.lang.String[] { "" };
    java.lang.String str51 = shellImpl48.globFilesDirectories(str_array50);
    java.lang.String str52 = calApplication47.printCalForYear(str_array50);
    java.lang.String str53 = shellImpl43.pipeTwoCommands(str_array50);
    java.lang.String str54 = calApplication42.printCalForYearMondayFirst(str_array50);
    java.nio.file.Path path55 = null;
    java.lang.String[] str_array57 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.getFileContents(str_array50, path55, 10);
    java.lang.String str58 = calApplication41.printCal(str_array57);
    java.lang.String str59 = calApplication23.printCal(str_array57);
    java.util.List list60 = sg.edu.nus.comp.cs4218.misc.SortHelper.separateBasedOnType((-13), str_array57);
    java.nio.file.Path path61 = null;
    java.lang.String[] str_array63 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.getFileContents(str_array57, path61, 28);
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str64 = bcApplication0.greaterThanOrEqual(str_array57);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\r\n"+ "'", str6.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + ""+ "'", str7.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\r\n"+ "'", str8.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "1"+ "'", str9.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "\r\n"+ "'", str13.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "\r\n"+ "'", str18.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str19.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + ""+ "'", str20.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "1"+ "'", str21.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "\r\n"+ "'", str28.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "\r\n"+ "'", str33.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str34.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + ""+ "'", str35.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "Invalid flag provided."+ "'", str36.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "     March 2016     \r\nSu Mo Tu We Th Fr Sa\r\n       1  2  3  4  5\r\n 6  7  8  9 10 11 12\r\n13 14 15 16 17 18 19\r\n20 21 22 23 24 25 26\r\n27 28 29 30 31\r\n"+ "'", str40.equals("     March 2016     \r\nSu Mo Tu We Th Fr Sa\r\n       1  2  3  4  5\r\n 6  7  8  9 10 11 12\r\n13 14 15 16 17 18 19\r\n20 21 22 23 24 25 26\r\n27 28 29 30 31\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "\r\n"+ "'", str46.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "\r\n"+ "'", str51.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str52.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + ""+ "'", str53.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "Invalid flag provided."+ "'", str54.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "     March 2016     \r\nSu Mo Tu We Th Fr Sa\r\n       1  2  3  4  5\r\n 6  7  8  9 10 11 12\r\n13 14 15 16 17 18 19\r\n20 21 22 23 24 25 26\r\n27 28 29 30 31\r\n"+ "'", str58.equals("     March 2016     \r\nSu Mo Tu We Th Fr Sa\r\n       1  2  3  4  5\r\n 6  7  8  9 10 11 12\r\n13 14 15 16 17 18 19\r\n20 21 22 23 24 25 26\r\n27 28 29 30 31\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "     March 2016     \r\nSu Mo Tu We Th Fr Sa\r\n       1  2  3  4  5\r\n 6  7  8  9 10 11 12\r\n13 14 15 16 17 18 19\r\n20 21 22 23 24 25 26\r\n27 28 29 30 31\r\n"+ "'", str59.equals("     March 2016     \r\nSu Mo Tu We Th Fr Sa\r\n       1  2  3  4  5\r\n 6  7  8  9 10 11 12\r\n13 14 15 16 17 18 19\r\n20 21 22 23 24 25 26\r\n27 28 29 30 31\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array63);

  }

  @Test
  public void test140() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test140"); }


    sg.edu.nus.comp.cs4218.impl.cmd.CallCommand callCommand0 = new sg.edu.nus.comp.cs4218.impl.cmd.CallCommand();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl1 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl2 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array4 = new java.lang.String[] { "" };
    java.lang.String str5 = shellImpl2.globFilesDirectories(str_array4);
    java.lang.String str6 = shellImpl1.pipeWithException(str_array4);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl7 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array9 = new java.lang.String[] { "" };
    java.lang.String str10 = shellImpl7.globFilesDirectories(str_array9);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl11 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl12 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array14 = new java.lang.String[] { "" };
    java.lang.String str15 = shellImpl12.globFilesDirectories(str_array14);
    java.lang.String str16 = shellImpl11.pipeWithException(str_array14);
    java.lang.String str17 = shellImpl7.globNoPaths(str_array14);
    java.lang.String str18 = shellImpl1.globNoPaths(str_array14);
    java.lang.String[] str_array19 = callCommand0.evaluateGlob(str_array14);
    java.util.Vector vector22 = sg.edu.nus.comp.cs4218.misc.ExpressionEvaluator.infixToPostfix("0");
    java.util.List list23 = sg.edu.nus.comp.cs4218.misc.SortHelper.sortHelper((java.util.List)vector22);
    // The following exception was thrown during execution in test generation
    try {
      int i25 = callCommand0.extractInputRedir(">", vector22, (-1));
      org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException");
    } catch (java.lang.StringIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.StringIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "\r\n"+ "'", str5.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\r\n"+ "'", str10.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "\r\n"+ "'", str15.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + ""+ "'", str16.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + ""+ "'", str17.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + ""+ "'", str18.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(vector22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);

  }

  @Test
  public void test141() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test141"); }


    sg.edu.nus.comp.cs4218.impl.GlobFinder globFinder2 = new sg.edu.nus.comp.cs4218.impl.GlobFinder("Missing arg for pipe command.", "Missing arg for pipe command.");
    java.nio.file.Path path3 = null;
    java.nio.file.attribute.BasicFileAttributes basicFileAttributes4 = null;
    java.nio.file.FileVisitResult fileVisitResult5 = globFinder2.preVisitDirectory(path3, basicFileAttributes4);
    java.nio.file.Path path6 = null;
    java.nio.file.attribute.BasicFileAttributes basicFileAttributes7 = null;
    java.nio.file.FileVisitResult fileVisitResult8 = globFinder2.preVisitDirectory(path6, basicFileAttributes7);
    java.nio.file.Path path9 = null;
    java.nio.file.attribute.BasicFileAttributes basicFileAttributes10 = null;
    java.nio.file.FileVisitResult fileVisitResult11 = globFinder2.visitFile(path9, basicFileAttributes10);
    java.nio.file.Path path12 = null;
    java.nio.file.attribute.BasicFileAttributes basicFileAttributes13 = null;
    java.nio.file.FileVisitResult fileVisitResult14 = globFinder2.visitFile(path12, basicFileAttributes13);
    java.io.OutputStream outputStream16 = sg.edu.nus.comp.cs4218.impl.ShellImpl.openOutputRedir("File output redirection and pipe operator cannot be used side by side.");
    sg.edu.nus.comp.cs4218.impl.app.EchoApplication echoApplication17 = new sg.edu.nus.comp.cs4218.impl.app.EchoApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication18 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl19 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array21 = new java.lang.String[] { "" };
    java.lang.String str22 = shellImpl19.globFilesDirectories(str_array21);
    java.lang.String str23 = calApplication18.printCalForYear(str_array21);
    java.io.InputStream inputStream24 = null;
    java.io.OutputStream outputStream26 = sg.edu.nus.comp.cs4218.impl.ShellImpl.openOutputRedir("File output redirection and pipe operator cannot be used side by side.");
    echoApplication17.run(str_array21, inputStream24, outputStream26);
    sg.edu.nus.comp.cs4218.impl.ShellImpl.writeToStdout(outputStream16, outputStream26);
    java.io.IOException iOException29 = null;
    java.nio.file.FileVisitResult fileVisitResult30 = globFinder2.postVisitDirectory((java.lang.Object)outputStream16, iOException29);
    sg.edu.nus.comp.cs4218.impl.cmd.PipeCommand pipeCommand32 = new sg.edu.nus.comp.cs4218.impl.cmd.PipeCommand("|");
    java.io.InputStream inputStream33 = null;
    sg.edu.nus.comp.cs4218.impl.app.DateApplication dateApplication34 = new sg.edu.nus.comp.cs4218.impl.app.DateApplication();
    java.lang.String[] str_array35 = null;
    java.io.InputStream inputStream36 = null;
    sg.edu.nus.comp.cs4218.impl.app.EchoApplication echoApplication37 = new sg.edu.nus.comp.cs4218.impl.app.EchoApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl38 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl39 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array41 = new java.lang.String[] { "" };
    java.lang.String str42 = shellImpl39.globFilesDirectories(str_array41);
    java.lang.String str43 = shellImpl38.pipeWithException(str_array41);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl44 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array46 = new java.lang.String[] { "" };
    java.lang.String str47 = shellImpl44.globFilesDirectories(str_array46);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl48 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl49 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array51 = new java.lang.String[] { "" };
    java.lang.String str52 = shellImpl49.globFilesDirectories(str_array51);
    java.lang.String str53 = shellImpl48.pipeWithException(str_array51);
    java.lang.String str54 = shellImpl44.globNoPaths(str_array51);
    java.lang.String str55 = shellImpl38.globNoPaths(str_array51);
    java.io.InputStream inputStream56 = null;
    java.io.OutputStream outputStream58 = sg.edu.nus.comp.cs4218.impl.ShellImpl.openOutputRedir("File output redirection and pipe operator cannot be used side by side.");
    sg.edu.nus.comp.cs4218.impl.app.EchoApplication echoApplication59 = new sg.edu.nus.comp.cs4218.impl.app.EchoApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication60 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl61 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array63 = new java.lang.String[] { "" };
    java.lang.String str64 = shellImpl61.globFilesDirectories(str_array63);
    java.lang.String str65 = calApplication60.printCalForYear(str_array63);
    java.io.InputStream inputStream66 = null;
    java.io.OutputStream outputStream68 = sg.edu.nus.comp.cs4218.impl.ShellImpl.openOutputRedir("File output redirection and pipe operator cannot be used side by side.");
    echoApplication59.run(str_array63, inputStream66, outputStream68);
    sg.edu.nus.comp.cs4218.impl.ShellImpl.writeToStdout(outputStream58, outputStream68);
    echoApplication37.run(str_array51, inputStream56, outputStream68);
    dateApplication34.run(str_array35, inputStream36, outputStream68);
    pipeCommand32.evaluate(inputStream33, outputStream68);
    sg.edu.nus.comp.cs4218.impl.ShellImpl.writeToStdout(outputStream16, outputStream68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fileVisitResult5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fileVisitResult8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fileVisitResult11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fileVisitResult14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(outputStream16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "\r\n"+ "'", str22.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str23.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(outputStream26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fileVisitResult30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "\r\n"+ "'", str42.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + ""+ "'", str43.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "\r\n"+ "'", str47.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "\r\n"+ "'", str52.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + ""+ "'", str53.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + ""+ "'", str54.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + ""+ "'", str55.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(outputStream58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str64 + "' != '" + "\r\n"+ "'", str64.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str65.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(outputStream68);

  }

  @Test
  public void test142() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test142"); }


    java.io.OutputStream outputStream1 = sg.edu.nus.comp.cs4218.impl.ShellImpl.openOutputRedir("File output redirection and pipe operator cannot be used side by side.");
    sg.edu.nus.comp.cs4218.impl.app.EchoApplication echoApplication2 = new sg.edu.nus.comp.cs4218.impl.app.EchoApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication3 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl4 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array6 = new java.lang.String[] { "" };
    java.lang.String str7 = shellImpl4.globFilesDirectories(str_array6);
    java.lang.String str8 = calApplication3.printCalForYear(str_array6);
    java.io.InputStream inputStream9 = null;
    java.io.OutputStream outputStream11 = sg.edu.nus.comp.cs4218.impl.ShellImpl.openOutputRedir("File output redirection and pipe operator cannot be used side by side.");
    echoApplication2.run(str_array6, inputStream9, outputStream11);
    sg.edu.nus.comp.cs4218.impl.ShellImpl.writeToStdout(outputStream1, outputStream11);
    java.io.OutputStream outputStream15 = sg.edu.nus.comp.cs4218.impl.ShellImpl.openOutputRedir("&&");
    sg.edu.nus.comp.cs4218.impl.ShellImpl.writeToStdout(outputStream1, outputStream15);
    // The following exception was thrown during execution in test generation
    try {
      java.io.InputStream inputStream17 = sg.edu.nus.comp.cs4218.impl.ShellImpl.outputStreamToInputStream(outputStream15);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(outputStream1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "\r\n"+ "'", str7.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str8.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(outputStream11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(outputStream15);

  }

  @Test
  public void test143() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test143"); }


    sg.edu.nus.comp.cs4218.misc.MergeSort mergeSort1 = new sg.edu.nus.comp.cs4218.misc.MergeSort(false);
    java.lang.String str3 = mergeSort1.extractFirstNumberWordFromLine("=");
    int i6 = mergeSort1.customCompare("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n", "");
    int i9 = mergeSort1.compareIncludeNumOrder("<", "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n");
    int i12 = mergeSort1.customCompare("!", ">");
    int i14 = mergeSort1.getRank('^');
    int i17 = mergeSort1.compareIncludeNumOrder("-1", "Invalid app.");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + ""+ "'", str3.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-29));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == (-1));

  }

  @Test
  public void test144() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test144"); }


    sg.edu.nus.comp.cs4218.impl.cmd.PipeCommand pipeCommand1 = new sg.edu.nus.comp.cs4218.impl.cmd.PipeCommand("Invalid app.");
    java.io.InputStream inputStream2 = null;
    sg.edu.nus.comp.cs4218.impl.app.EchoApplication echoApplication3 = new sg.edu.nus.comp.cs4218.impl.app.EchoApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication4 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl5 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array7 = new java.lang.String[] { "" };
    java.lang.String str8 = shellImpl5.globFilesDirectories(str_array7);
    java.lang.String str9 = calApplication4.printCalForYear(str_array7);
    java.io.InputStream inputStream10 = null;
    java.io.OutputStream outputStream12 = sg.edu.nus.comp.cs4218.impl.ShellImpl.openOutputRedir("File output redirection and pipe operator cannot be used side by side.");
    echoApplication3.run(str_array7, inputStream10, outputStream12);
    pipeCommand1.evaluate(inputStream2, outputStream12);
    pipeCommand1.parse();
    java.io.InputStream inputStream16 = null;
    sg.edu.nus.comp.cs4218.impl.app.EchoApplication echoApplication17 = new sg.edu.nus.comp.cs4218.impl.app.EchoApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl18 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl19 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array21 = new java.lang.String[] { "" };
    java.lang.String str22 = shellImpl19.globFilesDirectories(str_array21);
    java.lang.String str23 = shellImpl18.pipeWithException(str_array21);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl24 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array26 = new java.lang.String[] { "" };
    java.lang.String str27 = shellImpl24.globFilesDirectories(str_array26);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl28 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl29 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array31 = new java.lang.String[] { "" };
    java.lang.String str32 = shellImpl29.globFilesDirectories(str_array31);
    java.lang.String str33 = shellImpl28.pipeWithException(str_array31);
    java.lang.String str34 = shellImpl24.globNoPaths(str_array31);
    java.lang.String str35 = shellImpl18.globNoPaths(str_array31);
    java.io.InputStream inputStream36 = null;
    java.io.OutputStream outputStream38 = sg.edu.nus.comp.cs4218.impl.ShellImpl.openOutputRedir("File output redirection and pipe operator cannot be used side by side.");
    sg.edu.nus.comp.cs4218.impl.app.EchoApplication echoApplication39 = new sg.edu.nus.comp.cs4218.impl.app.EchoApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication40 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl41 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array43 = new java.lang.String[] { "" };
    java.lang.String str44 = shellImpl41.globFilesDirectories(str_array43);
    java.lang.String str45 = calApplication40.printCalForYear(str_array43);
    java.io.InputStream inputStream46 = null;
    java.io.OutputStream outputStream48 = sg.edu.nus.comp.cs4218.impl.ShellImpl.openOutputRedir("File output redirection and pipe operator cannot be used side by side.");
    echoApplication39.run(str_array43, inputStream46, outputStream48);
    sg.edu.nus.comp.cs4218.impl.ShellImpl.writeToStdout(outputStream38, outputStream48);
    echoApplication17.run(str_array31, inputStream36, outputStream48);
    // The following exception was thrown during execution in test generation
    try {
      pipeCommand1.evaluate(inputStream16, outputStream48);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.PipeCommandException");
    } catch (sg.edu.nus.comp.cs4218.exception.PipeCommandException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.PipeCommandException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.PipeCommandException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\r\n"+ "'", str8.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str9.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(outputStream12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "\r\n"+ "'", str22.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + ""+ "'", str23.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "\r\n"+ "'", str27.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "\r\n"+ "'", str32.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + ""+ "'", str33.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + ""+ "'", str34.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + ""+ "'", str35.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(outputStream38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "\r\n"+ "'", str44.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str45.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(outputStream48);

  }

  @Test
  public void test145() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test145"); }


    java.lang.String[] str_array0 = null;
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String[] str_array1 = sg.edu.nus.comp.cs4218.impl.ShellImpl.processBQ(str_array0);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test146() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test146"); }


    sg.edu.nus.comp.cs4218.impl.cmd.SequenceCommand sequenceCommand1 = new sg.edu.nus.comp.cs4218.impl.cmd.SequenceCommand("1");
    sequenceCommand1.terminate();

  }

  @Test
  public void test147() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test147"); }


    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl1 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl3 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array5 = new java.lang.String[] { "" };
    java.lang.String str6 = shellImpl3.globFilesDirectories(str_array5);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl8 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array10 = new java.lang.String[] { "" };
    java.lang.String str11 = shellImpl8.globFilesDirectories(str_array10);
    java.lang.String str12 = calApplication7.printCalForYear(str_array10);
    java.lang.String str13 = shellImpl3.pipeTwoCommands(str_array10);
    java.lang.String str14 = calApplication2.printCalForYearMondayFirst(str_array10);
    java.nio.file.Path path15 = null;
    java.lang.String[] str_array17 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.getFileContents(str_array10, path15, 10);
    java.lang.String str18 = shellImpl1.globMultiLevel(str_array17);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl19 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl20 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array22 = new java.lang.String[] { "" };
    java.lang.String str23 = shellImpl20.globFilesDirectories(str_array22);
    java.lang.String str24 = shellImpl19.pipeWithException(str_array22);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl25 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array27 = new java.lang.String[] { "" };
    java.lang.String str28 = shellImpl25.globFilesDirectories(str_array27);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl29 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl30 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array32 = new java.lang.String[] { "" };
    java.lang.String str33 = shellImpl30.globFilesDirectories(str_array32);
    java.lang.String str34 = shellImpl29.pipeWithException(str_array32);
    java.lang.String str35 = shellImpl25.globNoPaths(str_array32);
    java.lang.String str36 = shellImpl19.globNoPaths(str_array32);
    java.lang.String str37 = shellImpl1.globFilesDirectories(str_array32);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication38 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl39 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array41 = new java.lang.String[] { "" };
    java.lang.String str42 = shellImpl39.globFilesDirectories(str_array41);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication43 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl44 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array46 = new java.lang.String[] { "" };
    java.lang.String str47 = shellImpl44.globFilesDirectories(str_array46);
    java.lang.String str48 = calApplication43.printCalForYear(str_array46);
    java.lang.String str49 = shellImpl39.pipeTwoCommands(str_array46);
    java.lang.String str50 = calApplication38.printCalForYearMondayFirst(str_array46);
    java.nio.file.Path path51 = null;
    java.lang.String[] str_array53 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.getFileContents(str_array46, path51, 10);
    java.lang.String str54 = shellImpl1.globOneFile(str_array53);
    java.util.List list55 = sortApplication0.sortNumbersSpecialChars(str_array53);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl56 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication57 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl58 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array60 = new java.lang.String[] { "" };
    java.lang.String str61 = shellImpl58.globFilesDirectories(str_array60);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication62 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl63 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array65 = new java.lang.String[] { "" };
    java.lang.String str66 = shellImpl63.globFilesDirectories(str_array65);
    java.lang.String str67 = calApplication62.printCalForYear(str_array65);
    java.lang.String str68 = shellImpl58.pipeTwoCommands(str_array65);
    java.lang.String str69 = calApplication57.printCalForYearMondayFirst(str_array65);
    java.nio.file.Path path70 = null;
    java.lang.String[] str_array72 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.getFileContents(str_array65, path70, 10);
    java.lang.String str73 = shellImpl56.globMultiLevel(str_array72);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl74 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array76 = new java.lang.String[] { "" };
    java.lang.String str77 = shellImpl74.globFilesDirectories(str_array76);
    java.lang.String str78 = shellImpl56.pipeTwoCommands(str_array76);
    sg.edu.nus.comp.cs4218.impl.app.EchoApplication echoApplication79 = new sg.edu.nus.comp.cs4218.impl.app.EchoApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication80 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl81 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array83 = new java.lang.String[] { "" };
    java.lang.String str84 = shellImpl81.globFilesDirectories(str_array83);
    java.lang.String str85 = calApplication80.printCalForYear(str_array83);
    java.io.InputStream inputStream86 = null;
    java.io.OutputStream outputStream88 = sg.edu.nus.comp.cs4218.impl.ShellImpl.openOutputRedir("File output redirection and pipe operator cannot be used side by side.");
    echoApplication79.run(str_array83, inputStream86, outputStream88);
    java.lang.String str90 = shellImpl56.globNoPaths(str_array83);
    java.util.List list91 = sortApplication0.sortSimpleNumbersSpecialChars(str_array83);
    java.lang.String[] str_array93 = new java.lang.String[] { "-==" };
    java.util.List list94 = sortApplication0.sortSpecialChars(str_array93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\r\n"+ "'", str6.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "\r\n"+ "'", str11.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str12.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + ""+ "'", str13.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Invalid flag provided."+ "'", str14.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + ""+ "'", str18.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "\r\n"+ "'", str23.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + ""+ "'", str24.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "\r\n"+ "'", str28.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "\r\n"+ "'", str33.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + ""+ "'", str34.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + ""+ "'", str35.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + ""+ "'", str36.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "\r\n"+ "'", str37.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "\r\n"+ "'", str42.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "\r\n"+ "'", str47.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str48.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + ""+ "'", str49.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "Invalid flag provided."+ "'", str50.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + ""+ "'", str54.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "\r\n"+ "'", str61.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "\r\n"+ "'", str66.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str67.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str68 + "' != '" + ""+ "'", str68.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + "Invalid flag provided."+ "'", str69.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str73 + "' != '" + ""+ "'", str73.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str77 + "' != '" + "\r\n"+ "'", str77.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str78 + "' != '" + ""+ "'", str78.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str84 + "' != '" + "\r\n"+ "'", str84.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str85 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str85.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(outputStream88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str90 + "' != '" + ""+ "'", str90.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list94);

  }

  @Test
  public void test148() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test148"); }


    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication0 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl1 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl2 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl3 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array5 = new java.lang.String[] { "" };
    java.lang.String str6 = shellImpl3.globFilesDirectories(str_array5);
    java.lang.String str7 = shellImpl2.pipeWithException(str_array5);
    java.lang.String str8 = shellImpl1.globFilesDirectories(str_array5);
    java.lang.String str9 = bcApplication0.number(str_array5);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication10 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl11 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl12 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl13 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array15 = new java.lang.String[] { "" };
    java.lang.String str16 = shellImpl13.globFilesDirectories(str_array15);
    java.lang.String str17 = shellImpl12.pipeWithException(str_array15);
    java.lang.String str18 = shellImpl11.globFilesDirectories(str_array15);
    java.lang.String str19 = bcApplication10.number(str_array15);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl20 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array22 = new java.lang.String[] { "" };
    java.lang.String str23 = shellImpl20.globFilesDirectories(str_array22);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication24 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl25 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array27 = new java.lang.String[] { "" };
    java.lang.String str28 = shellImpl25.globFilesDirectories(str_array27);
    java.lang.String str29 = calApplication24.printCalForYear(str_array27);
    java.lang.String str30 = shellImpl20.pipeTwoCommands(str_array27);
    java.lang.String str31 = bcApplication10.number(str_array27);
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str32 = bcApplication0.notEqual(str_array27);
      org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException");
    } catch (java.util.EmptyStackException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.util.EmptyStackException")) {
        org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\r\n"+ "'", str6.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + ""+ "'", str7.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\r\n"+ "'", str8.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "1"+ "'", str9.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\r\n"+ "'", str16.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + ""+ "'", str17.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "\r\n"+ "'", str18.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "1"+ "'", str19.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "\r\n"+ "'", str23.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "\r\n"+ "'", str28.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str29.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + ""+ "'", str30.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "1"+ "'", str31.equals("1"));

  }

  @Test
  public void test149() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test149"); }


    sg.edu.nus.comp.cs4218.impl.GlobFinder globFinder2 = new sg.edu.nus.comp.cs4218.impl.GlobFinder("", "Missing arg for pipe command.");
    java.nio.file.Path path3 = null;
    java.nio.file.attribute.BasicFileAttributes basicFileAttributes4 = null;
    java.nio.file.FileVisitResult fileVisitResult5 = globFinder2.preVisitDirectory(path3, basicFileAttributes4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fileVisitResult5);

  }

  @Test
  public void test150() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test150"); }


    sg.edu.nus.comp.cs4218.Command command1 = sg.edu.nus.comp.cs4218.impl.ShellImpl.parse("-0");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(command1);

  }

  @Test
  public void test151() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test151"); }


    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication0 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl1 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl2 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl3 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array5 = new java.lang.String[] { "" };
    java.lang.String str6 = shellImpl3.globFilesDirectories(str_array5);
    java.lang.String str7 = shellImpl2.pipeWithException(str_array5);
    java.lang.String str8 = shellImpl1.globFilesDirectories(str_array5);
    java.lang.String str9 = bcApplication0.number(str_array5);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl10 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array12 = new java.lang.String[] { "" };
    java.lang.String str13 = shellImpl10.globFilesDirectories(str_array12);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication14 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl15 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array17 = new java.lang.String[] { "" };
    java.lang.String str18 = shellImpl15.globFilesDirectories(str_array17);
    java.lang.String str19 = calApplication14.printCalForYear(str_array17);
    java.lang.String str20 = shellImpl10.pipeTwoCommands(str_array17);
    java.lang.String str21 = bcApplication0.number(str_array17);
    java.lang.String[] str_array23 = new java.lang.String[] { "Invalid syntax encountered." };
    boolean b24 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.isNumberCommandFormat(str_array23);
    java.lang.String str25 = bcApplication0.lessThan(str_array23);
    sg.edu.nus.comp.cs4218.impl.app.EchoApplication echoApplication26 = new sg.edu.nus.comp.cs4218.impl.app.EchoApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication27 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl28 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array30 = new java.lang.String[] { "" };
    java.lang.String str31 = shellImpl28.globFilesDirectories(str_array30);
    java.lang.String str32 = calApplication27.printCalForYear(str_array30);
    java.io.InputStream inputStream33 = null;
    java.io.OutputStream outputStream35 = sg.edu.nus.comp.cs4218.impl.ShellImpl.openOutputRedir("File output redirection and pipe operator cannot be used side by side.");
    echoApplication26.run(str_array30, inputStream33, outputStream35);
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str37 = bcApplication0.multiply(str_array30);
      org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException");
    } catch (java.util.EmptyStackException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.util.EmptyStackException")) {
        org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\r\n"+ "'", str6.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + ""+ "'", str7.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\r\n"+ "'", str8.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "1"+ "'", str9.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "\r\n"+ "'", str13.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "\r\n"+ "'", str18.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str19.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + ""+ "'", str20.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "1"+ "'", str21.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "bc: Unknown character detected I"+ "'", str25.equals("bc: Unknown character detected I"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "\r\n"+ "'", str31.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str32.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(outputStream35);

  }

  @Test
  public void test152() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test152"); }


    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication0 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl1 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl2 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl3 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array5 = new java.lang.String[] { "" };
    java.lang.String str6 = shellImpl3.globFilesDirectories(str_array5);
    java.lang.String str7 = shellImpl2.pipeWithException(str_array5);
    java.lang.String str8 = shellImpl1.globFilesDirectories(str_array5);
    java.lang.String str9 = bcApplication0.number(str_array5);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication11 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl12 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array14 = new java.lang.String[] { "" };
    java.lang.String str15 = shellImpl12.globFilesDirectories(str_array14);
    java.lang.String str16 = calApplication11.printCalForYear(str_array14);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication17 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl18 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array20 = new java.lang.String[] { "" };
    java.lang.String str21 = shellImpl18.globFilesDirectories(str_array20);
    java.lang.String str22 = calApplication17.printCalForYear(str_array20);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl23 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array25 = new java.lang.String[] { "" };
    java.lang.String str26 = shellImpl23.globFilesDirectories(str_array25);
    boolean b27 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.isNumberCommandFormat(str_array25);
    java.lang.String str28 = calApplication17.printCalForMonthYearMondayFirst(str_array25);
    java.nio.file.Path path29 = null;
    java.lang.String[] str_array31 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.getFileContents(str_array25, path29, 4);
    java.lang.String str32 = calApplication11.printCal(str_array25);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication33 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl34 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array36 = new java.lang.String[] { "" };
    java.lang.String str37 = shellImpl34.globFilesDirectories(str_array36);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication38 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl39 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array41 = new java.lang.String[] { "" };
    java.lang.String str42 = shellImpl39.globFilesDirectories(str_array41);
    java.lang.String str43 = calApplication38.printCalForYear(str_array41);
    java.lang.String str44 = shellImpl34.pipeTwoCommands(str_array41);
    java.lang.String str45 = bcApplication33.number(str_array41);
    java.lang.String str46 = calApplication11.printCalForMonthYearMondayFirst(str_array41);
    java.util.List list47 = sg.edu.nus.comp.cs4218.misc.SortHelper.separateBasedOnType(1000000000, str_array41);
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str48 = bcApplication0.not(str_array41);
      org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException");
    } catch (java.util.EmptyStackException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.util.EmptyStackException")) {
        org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\r\n"+ "'", str6.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + ""+ "'", str7.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\r\n"+ "'", str8.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "1"+ "'", str9.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "\r\n"+ "'", str15.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str16.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "\r\n"+ "'", str21.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str22.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "\r\n"+ "'", str26.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "Invalid flag provided."+ "'", str28.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "     March 2016     \r\nSu Mo Tu We Th Fr Sa\r\n       1  2  3  4  5\r\n 6  7  8  9 10 11 12\r\n13 14 15 16 17 18 19\r\n20 21 22 23 24 25 26\r\n27 28 29 30 31\r\n"+ "'", str32.equals("     March 2016     \r\nSu Mo Tu We Th Fr Sa\r\n       1  2  3  4  5\r\n 6  7  8  9 10 11 12\r\n13 14 15 16 17 18 19\r\n20 21 22 23 24 25 26\r\n27 28 29 30 31\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "\r\n"+ "'", str37.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "\r\n"+ "'", str42.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str43.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + ""+ "'", str44.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "1"+ "'", str45.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "Invalid flag provided."+ "'", str46.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list47);

  }

  @Test
  public void test153() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test153"); }


    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication0 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl1 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl2 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl3 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array5 = new java.lang.String[] { "" };
    java.lang.String str6 = shellImpl3.globFilesDirectories(str_array5);
    java.lang.String str7 = shellImpl2.pipeWithException(str_array5);
    java.lang.String str8 = shellImpl1.globFilesDirectories(str_array5);
    java.lang.String str9 = bcApplication0.number(str_array5);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication10 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl11 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array13 = new java.lang.String[] { "" };
    java.lang.String str14 = shellImpl11.globFilesDirectories(str_array13);
    java.lang.String str15 = calApplication10.printCalForYear(str_array13);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication16 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl17 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array19 = new java.lang.String[] { "" };
    java.lang.String str20 = shellImpl17.globFilesDirectories(str_array19);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication21 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl22 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array24 = new java.lang.String[] { "" };
    java.lang.String str25 = shellImpl22.globFilesDirectories(str_array24);
    java.lang.String str26 = calApplication21.printCalForYear(str_array24);
    java.lang.String str27 = shellImpl17.pipeTwoCommands(str_array24);
    java.lang.String str28 = calApplication16.printCalForYearMondayFirst(str_array24);
    java.nio.file.Path path29 = null;
    java.lang.String[] str_array31 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.getFileContents(str_array24, path29, 10);
    java.lang.String str32 = calApplication10.printCalForYearMondayFirst(str_array31);
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str33 = bcApplication0.number(str_array31);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\r\n"+ "'", str6.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + ""+ "'", str7.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\r\n"+ "'", str8.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "1"+ "'", str9.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\r\n"+ "'", str14.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str15.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "\r\n"+ "'", str20.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "\r\n"+ "'", str25.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str26.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + ""+ "'", str27.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "Invalid flag provided."+ "'", str28.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "Invalid flag provided."+ "'", str32.equals("Invalid flag provided."));

  }

  @Test
  public void test154() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test154"); }


    sg.edu.nus.comp.cs4218.misc.MergeSort mergeSort1 = new sg.edu.nus.comp.cs4218.misc.MergeSort(false);
    java.lang.String str3 = mergeSort1.extractFirstNumberWordFromLine("");
    int i5 = mergeSort1.getRank('!');
    int i8 = mergeSort1.compareIncludeNumOrder("||", "Input redirection file same as output redirection file.");
    int i10 = mergeSort1.getRank('&');
    int i13 = mergeSort1.compareIncludeNumOrder("Invalid syntax encountered.", "1");
    int i15 = mergeSort1.getRank('#');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + ""+ "'", str3.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 4);

  }

  @Test
  public void test155() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test155"); }


    sg.edu.nus.comp.cs4218.misc.MergeSort mergeSort1 = new sg.edu.nus.comp.cs4218.misc.MergeSort(false);
    int i4 = mergeSort1.compareIncludeNumOrder("/", "<");
    int i7 = mergeSort1.compareIncludeNumOrder("Invalid flag provided.", "Error writing to stdout.");
    sg.edu.nus.comp.cs4218.impl.cmd.CallCommand callCommand9 = new sg.edu.nus.comp.cs4218.impl.cmd.CallCommand("||");
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl10 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array12 = new java.lang.String[] { "" };
    java.lang.String str13 = shellImpl10.globFilesDirectories(str_array12);
    java.lang.String[] str_array14 = callCommand9.evaluateGlob(str_array12);
    // The following exception was thrown during execution in test generation
    try {
      mergeSort1.merge(str_array14, (-13), 28, 20);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-13));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "\r\n"+ "'", str13.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array14);

  }

  @Test
  public void test156() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test156"); }


    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication0 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl1 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array3 = new java.lang.String[] { "" };
    java.lang.String str4 = shellImpl1.globFilesDirectories(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication5 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl6 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array8 = new java.lang.String[] { "" };
    java.lang.String str9 = shellImpl6.globFilesDirectories(str_array8);
    java.lang.String str10 = calApplication5.printCalForYear(str_array8);
    java.lang.String str11 = shellImpl1.pipeTwoCommands(str_array8);
    java.lang.String str12 = bcApplication0.number(str_array8);
    java.lang.String[] str_array14 = new java.lang.String[] { "Invalid syntax encountered." };
    boolean b15 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.isNumberCommandFormat(str_array14);
    java.lang.String str16 = bcApplication0.and(str_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\r\n"+ "'", str4.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "\r\n"+ "'", str9.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str10.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + ""+ "'", str11.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "1"+ "'", str12.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "bc: Unknown character detected I"+ "'", str16.equals("bc: Unknown character detected I"));

  }

  @Test
  public void test157() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test157"); }


    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str3 = sg.edu.nus.comp.cs4218.misc.ExpressionEvaluator.calculateRelation("-", "^", "<");
      org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
    } catch (java.lang.NumberFormatException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NumberFormatException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test158() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test158"); }


    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl1 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl2 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array4 = new java.lang.String[] { "" };
    java.lang.String str5 = shellImpl2.globFilesDirectories(str_array4);
    java.lang.String str6 = shellImpl1.pipeWithException(str_array4);
    java.lang.String[] str_array7 = sg.edu.nus.comp.cs4218.impl.ShellImpl.processBQ(str_array4);
    java.io.InputStream inputStream8 = null;
    sg.edu.nus.comp.cs4218.impl.cmd.PipeCommand pipeCommand10 = new sg.edu.nus.comp.cs4218.impl.cmd.PipeCommand("Invalid app.");
    java.io.InputStream inputStream11 = null;
    sg.edu.nus.comp.cs4218.impl.app.EchoApplication echoApplication12 = new sg.edu.nus.comp.cs4218.impl.app.EchoApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication13 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl14 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array16 = new java.lang.String[] { "" };
    java.lang.String str17 = shellImpl14.globFilesDirectories(str_array16);
    java.lang.String str18 = calApplication13.printCalForYear(str_array16);
    java.io.InputStream inputStream19 = null;
    java.io.OutputStream outputStream21 = sg.edu.nus.comp.cs4218.impl.ShellImpl.openOutputRedir("File output redirection and pipe operator cannot be used side by side.");
    echoApplication12.run(str_array16, inputStream19, outputStream21);
    pipeCommand10.evaluate(inputStream11, outputStream21);
    // The following exception was thrown during execution in test generation
    try {
      sg.edu.nus.comp.cs4218.impl.ShellImpl.runApp("==", str_array7, inputStream8, outputStream21);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.ShellException");
    } catch (sg.edu.nus.comp.cs4218.exception.ShellException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.ShellException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.ShellException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "\r\n"+ "'", str5.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "\r\n"+ "'", str17.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str18.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(outputStream21);

  }

  @Test
  public void test159() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test159"); }


    sg.edu.nus.comp.cs4218.impl.GlobFinder globFinder2 = new sg.edu.nus.comp.cs4218.impl.GlobFinder("Invalid syntax encountered.", "Invalid flag provided.");
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication3 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication4 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl5 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication6 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl7 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array9 = new java.lang.String[] { "" };
    java.lang.String str10 = shellImpl7.globFilesDirectories(str_array9);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication11 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl12 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array14 = new java.lang.String[] { "" };
    java.lang.String str15 = shellImpl12.globFilesDirectories(str_array14);
    java.lang.String str16 = calApplication11.printCalForYear(str_array14);
    java.lang.String str17 = shellImpl7.pipeTwoCommands(str_array14);
    java.lang.String str18 = calApplication6.printCalForYearMondayFirst(str_array14);
    java.nio.file.Path path19 = null;
    java.lang.String[] str_array21 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.getFileContents(str_array14, path19, 10);
    java.lang.String str22 = shellImpl5.globMultiLevel(str_array21);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl23 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl24 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array26 = new java.lang.String[] { "" };
    java.lang.String str27 = shellImpl24.globFilesDirectories(str_array26);
    java.lang.String str28 = shellImpl23.pipeWithException(str_array26);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl29 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array31 = new java.lang.String[] { "" };
    java.lang.String str32 = shellImpl29.globFilesDirectories(str_array31);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl33 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl34 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array36 = new java.lang.String[] { "" };
    java.lang.String str37 = shellImpl34.globFilesDirectories(str_array36);
    java.lang.String str38 = shellImpl33.pipeWithException(str_array36);
    java.lang.String str39 = shellImpl29.globNoPaths(str_array36);
    java.lang.String str40 = shellImpl23.globNoPaths(str_array36);
    java.lang.String str41 = shellImpl5.globFilesDirectories(str_array36);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication42 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl43 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array45 = new java.lang.String[] { "" };
    java.lang.String str46 = shellImpl43.globFilesDirectories(str_array45);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication47 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl48 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array50 = new java.lang.String[] { "" };
    java.lang.String str51 = shellImpl48.globFilesDirectories(str_array50);
    java.lang.String str52 = calApplication47.printCalForYear(str_array50);
    java.lang.String str53 = shellImpl43.pipeTwoCommands(str_array50);
    java.lang.String str54 = calApplication42.printCalForYearMondayFirst(str_array50);
    java.nio.file.Path path55 = null;
    java.lang.String[] str_array57 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.getFileContents(str_array50, path55, 10);
    java.lang.String str58 = shellImpl5.globOneFile(str_array57);
    java.util.List list59 = sortApplication4.sortNumbersSpecialChars(str_array57);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl60 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl61 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array63 = new java.lang.String[] { "" };
    java.lang.String str64 = shellImpl61.globFilesDirectories(str_array63);
    java.lang.String str65 = shellImpl60.pipeWithException(str_array63);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl66 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array68 = new java.lang.String[] { "" };
    java.lang.String str69 = shellImpl66.globFilesDirectories(str_array68);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl70 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl71 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array73 = new java.lang.String[] { "" };
    java.lang.String str74 = shellImpl71.globFilesDirectories(str_array73);
    java.lang.String str75 = shellImpl70.pipeWithException(str_array73);
    java.lang.String str76 = shellImpl66.globNoPaths(str_array73);
    java.lang.String str77 = shellImpl60.globNoPaths(str_array73);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication78 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl79 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl80 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl81 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array83 = new java.lang.String[] { "" };
    java.lang.String str84 = shellImpl81.globFilesDirectories(str_array83);
    java.lang.String str85 = shellImpl80.pipeWithException(str_array83);
    java.lang.String str86 = shellImpl79.globFilesDirectories(str_array83);
    java.lang.String str87 = bcApplication78.number(str_array83);
    java.lang.String str88 = shellImpl60.pipeWithException(str_array83);
    java.util.List list89 = sortApplication4.sortSimpleCapitalNumber(str_array83);
    java.lang.String str90 = bcApplication3.number(str_array83);
    java.io.IOException iOException91 = null;
    // The following exception was thrown during execution in test generation
    try {
      java.nio.file.FileVisitResult fileVisitResult92 = globFinder2.visitFileFailed((java.lang.Object)str90, iOException91);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\r\n"+ "'", str10.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "\r\n"+ "'", str15.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str16.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + ""+ "'", str17.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "Invalid flag provided."+ "'", str18.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + ""+ "'", str22.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "\r\n"+ "'", str27.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + ""+ "'", str28.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "\r\n"+ "'", str32.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "\r\n"+ "'", str37.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + ""+ "'", str38.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + ""+ "'", str39.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + ""+ "'", str40.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "\r\n"+ "'", str41.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "\r\n"+ "'", str46.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "\r\n"+ "'", str51.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str52.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + ""+ "'", str53.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "Invalid flag provided."+ "'", str54.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + ""+ "'", str58.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str64 + "' != '" + "\r\n"+ "'", str64.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + ""+ "'", str65.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + "\r\n"+ "'", str69.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str74 + "' != '" + "\r\n"+ "'", str74.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str75 + "' != '" + ""+ "'", str75.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str76 + "' != '" + ""+ "'", str76.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str77 + "' != '" + ""+ "'", str77.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str84 + "' != '" + "\r\n"+ "'", str84.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str85 + "' != '" + ""+ "'", str85.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str86 + "' != '" + "\r\n"+ "'", str86.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str87 + "' != '" + "1"+ "'", str87.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str88 + "' != '" + ""+ "'", str88.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str90 + "' != '" + "1"+ "'", str90.equals("1"));

  }

  @Test
  public void test160() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test160"); }


    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl1 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array3 = new java.lang.String[] { "" };
    java.lang.String str4 = shellImpl1.globFilesDirectories(str_array3);
    java.lang.String str5 = calApplication0.printCalForYear(str_array3);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication6 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl7 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array9 = new java.lang.String[] { "" };
    java.lang.String str10 = shellImpl7.globFilesDirectories(str_array9);
    java.lang.String str11 = calApplication6.printCalForYear(str_array9);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl12 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array14 = new java.lang.String[] { "" };
    java.lang.String str15 = shellImpl12.globFilesDirectories(str_array14);
    boolean b16 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.isNumberCommandFormat(str_array14);
    java.lang.String str17 = calApplication6.printCalForMonthYearMondayFirst(str_array14);
    java.nio.file.Path path18 = null;
    java.lang.String[] str_array20 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.getFileContents(str_array14, path18, 4);
    java.lang.String str21 = calApplication0.printCal(str_array14);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl22 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication23 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl24 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array26 = new java.lang.String[] { "" };
    java.lang.String str27 = shellImpl24.globFilesDirectories(str_array26);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication28 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl29 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array31 = new java.lang.String[] { "" };
    java.lang.String str32 = shellImpl29.globFilesDirectories(str_array31);
    java.lang.String str33 = calApplication28.printCalForYear(str_array31);
    java.lang.String str34 = shellImpl24.pipeTwoCommands(str_array31);
    java.lang.String str35 = calApplication23.printCalForYearMondayFirst(str_array31);
    java.nio.file.Path path36 = null;
    java.lang.String[] str_array38 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.getFileContents(str_array31, path36, 10);
    java.lang.String str39 = shellImpl22.globMultiLevel(str_array38);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl40 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array42 = new java.lang.String[] { "" };
    java.lang.String str43 = shellImpl40.globFilesDirectories(str_array42);
    java.lang.String str44 = shellImpl22.pipeTwoCommands(str_array42);
    sg.edu.nus.comp.cs4218.impl.cmd.CallCommand callCommand45 = new sg.edu.nus.comp.cs4218.impl.cmd.CallCommand();
    java.lang.String str46 = callCommand45.getInputStreamS();
    callCommand45.terminate();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication48 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl49 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array51 = new java.lang.String[] { "" };
    java.lang.String str52 = shellImpl49.globFilesDirectories(str_array51);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication53 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl54 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array56 = new java.lang.String[] { "" };
    java.lang.String str57 = shellImpl54.globFilesDirectories(str_array56);
    java.lang.String str58 = calApplication53.printCalForYear(str_array56);
    java.lang.String str59 = shellImpl49.pipeTwoCommands(str_array56);
    java.lang.String str60 = calApplication48.printCalForYearMondayFirst(str_array56);
    java.nio.file.Path path61 = null;
    java.lang.String[] str_array63 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.getFileContents(str_array56, path61, 10);
    java.lang.String[] str_array64 = callCommand45.evaluateGlob(str_array63);
    java.lang.String str65 = shellImpl22.globOneFile(str_array64);
    java.lang.String str66 = calApplication0.printCal(str_array64);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl67 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array69 = new java.lang.String[] { "" };
    java.lang.String str70 = shellImpl67.globFilesDirectories(str_array69);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication71 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl72 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array74 = new java.lang.String[] { "" };
    java.lang.String str75 = shellImpl72.globFilesDirectories(str_array74);
    java.lang.String str76 = calApplication71.printCalForYear(str_array74);
    java.lang.String str77 = shellImpl67.pipeTwoCommands(str_array74);
    sg.edu.nus.comp.cs4218.impl.cmd.CallCommand callCommand78 = new sg.edu.nus.comp.cs4218.impl.cmd.CallCommand();
    java.lang.String str79 = callCommand78.getInputStreamS();
    callCommand78.terminate();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication81 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl82 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array84 = new java.lang.String[] { "" };
    java.lang.String str85 = shellImpl82.globFilesDirectories(str_array84);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication86 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl87 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array89 = new java.lang.String[] { "" };
    java.lang.String str90 = shellImpl87.globFilesDirectories(str_array89);
    java.lang.String str91 = calApplication86.printCalForYear(str_array89);
    java.lang.String str92 = shellImpl82.pipeTwoCommands(str_array89);
    java.lang.String str93 = calApplication81.printCalForYearMondayFirst(str_array89);
    java.nio.file.Path path94 = null;
    java.lang.String[] str_array96 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.getFileContents(str_array89, path94, 10);
    java.lang.String[] str_array97 = callCommand78.evaluateGlob(str_array89);
    java.lang.String str98 = shellImpl67.globMultiLevel(str_array89);
    java.lang.String str99 = calApplication0.printCalForMonthYearMondayFirst(str_array89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\r\n"+ "'", str4.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str5.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\r\n"+ "'", str10.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str11.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "\r\n"+ "'", str15.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "Invalid flag provided."+ "'", str17.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "     March 2016     \r\nSu Mo Tu We Th Fr Sa\r\n       1  2  3  4  5\r\n 6  7  8  9 10 11 12\r\n13 14 15 16 17 18 19\r\n20 21 22 23 24 25 26\r\n27 28 29 30 31\r\n"+ "'", str21.equals("     March 2016     \r\nSu Mo Tu We Th Fr Sa\r\n       1  2  3  4  5\r\n 6  7  8  9 10 11 12\r\n13 14 15 16 17 18 19\r\n20 21 22 23 24 25 26\r\n27 28 29 30 31\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "\r\n"+ "'", str27.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "\r\n"+ "'", str32.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str33.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + ""+ "'", str34.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "Invalid flag provided."+ "'", str35.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + ""+ "'", str39.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "\r\n"+ "'", str43.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + ""+ "'", str44.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + ""+ "'", str46.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "\r\n"+ "'", str52.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "\r\n"+ "'", str57.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str58.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + ""+ "'", str59.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "Invalid flag provided."+ "'", str60.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + ""+ "'", str65.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "     March 2016     \r\nSu Mo Tu We Th Fr Sa\r\n       1  2  3  4  5\r\n 6  7  8  9 10 11 12\r\n13 14 15 16 17 18 19\r\n20 21 22 23 24 25 26\r\n27 28 29 30 31\r\n"+ "'", str66.equals("     March 2016     \r\nSu Mo Tu We Th Fr Sa\r\n       1  2  3  4  5\r\n 6  7  8  9 10 11 12\r\n13 14 15 16 17 18 19\r\n20 21 22 23 24 25 26\r\n27 28 29 30 31\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str70 + "' != '" + "\r\n"+ "'", str70.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str75 + "' != '" + "\r\n"+ "'", str75.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str76 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str76.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str77 + "' != '" + ""+ "'", str77.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str79 + "' != '" + ""+ "'", str79.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str85 + "' != '" + "\r\n"+ "'", str85.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str90 + "' != '" + "\r\n"+ "'", str90.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str91 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str91.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str92 + "' != '" + ""+ "'", str92.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str93 + "' != '" + "Invalid flag provided."+ "'", str93.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array96);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array97);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str98 + "' != '" + "\r\n"+ "'", str98.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str99 + "' != '" + "Invalid flag provided."+ "'", str99.equals("Invalid flag provided."));

  }

  @Test
  public void test161() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test161"); }


    sg.edu.nus.comp.cs4218.impl.app.HeadApplication headApplication0 = new sg.edu.nus.comp.cs4218.impl.app.HeadApplication();
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication1 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.app.EchoApplication echoApplication2 = new sg.edu.nus.comp.cs4218.impl.app.EchoApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication3 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl4 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array6 = new java.lang.String[] { "" };
    java.lang.String str7 = shellImpl4.globFilesDirectories(str_array6);
    java.lang.String str8 = calApplication3.printCalForYear(str_array6);
    java.io.InputStream inputStream9 = null;
    java.io.OutputStream outputStream11 = sg.edu.nus.comp.cs4218.impl.ShellImpl.openOutputRedir("File output redirection and pipe operator cannot be used side by side.");
    echoApplication2.run(str_array6, inputStream9, outputStream11);
    java.lang.String str13 = bcApplication1.number(str_array6);
    java.io.InputStream inputStream14 = null;
    java.io.OutputStream outputStream16 = sg.edu.nus.comp.cs4218.impl.ShellImpl.openOutputRedir("File output redirection and pipe operator cannot be used side by side.");
    sg.edu.nus.comp.cs4218.impl.app.EchoApplication echoApplication17 = new sg.edu.nus.comp.cs4218.impl.app.EchoApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication18 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl19 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array21 = new java.lang.String[] { "" };
    java.lang.String str22 = shellImpl19.globFilesDirectories(str_array21);
    java.lang.String str23 = calApplication18.printCalForYear(str_array21);
    java.io.InputStream inputStream24 = null;
    java.io.OutputStream outputStream26 = sg.edu.nus.comp.cs4218.impl.ShellImpl.openOutputRedir("File output redirection and pipe operator cannot be used side by side.");
    echoApplication17.run(str_array21, inputStream24, outputStream26);
    sg.edu.nus.comp.cs4218.impl.ShellImpl.writeToStdout(outputStream16, outputStream26);
    java.io.OutputStream outputStream30 = sg.edu.nus.comp.cs4218.impl.ShellImpl.openOutputRedir("&&");
    sg.edu.nus.comp.cs4218.impl.ShellImpl.writeToStdout(outputStream16, outputStream30);
    // The following exception was thrown during execution in test generation
    try {
      headApplication0.run(str_array6, inputStream14, outputStream30);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.HeadException");
    } catch (sg.edu.nus.comp.cs4218.exception.HeadException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.HeadException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.HeadException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "\r\n"+ "'", str7.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str8.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(outputStream11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "1"+ "'", str13.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(outputStream16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "\r\n"+ "'", str22.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str23.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(outputStream26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(outputStream30);

  }

  @Test
  public void test162() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test162"); }


    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication0 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl1 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl2 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl3 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array5 = new java.lang.String[] { "" };
    java.lang.String str6 = shellImpl3.globFilesDirectories(str_array5);
    java.lang.String str7 = shellImpl2.pipeWithException(str_array5);
    java.lang.String str8 = shellImpl1.globFilesDirectories(str_array5);
    java.lang.String str9 = bcApplication0.number(str_array5);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl10 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array12 = new java.lang.String[] { "" };
    java.lang.String str13 = shellImpl10.globFilesDirectories(str_array12);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication14 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl15 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array17 = new java.lang.String[] { "" };
    java.lang.String str18 = shellImpl15.globFilesDirectories(str_array17);
    java.lang.String str19 = calApplication14.printCalForYear(str_array17);
    java.lang.String str20 = shellImpl10.pipeTwoCommands(str_array17);
    java.lang.String str21 = bcApplication0.number(str_array17);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication22 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl23 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl24 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl25 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array27 = new java.lang.String[] { "" };
    java.lang.String str28 = shellImpl25.globFilesDirectories(str_array27);
    java.lang.String str29 = shellImpl24.pipeWithException(str_array27);
    java.lang.String str30 = shellImpl23.globFilesDirectories(str_array27);
    java.lang.String str31 = bcApplication22.number(str_array27);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl32 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array34 = new java.lang.String[] { "" };
    java.lang.String str35 = shellImpl32.globFilesDirectories(str_array34);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication36 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl37 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array39 = new java.lang.String[] { "" };
    java.lang.String str40 = shellImpl37.globFilesDirectories(str_array39);
    java.lang.String str41 = calApplication36.printCalForYear(str_array39);
    java.lang.String str42 = shellImpl32.pipeTwoCommands(str_array39);
    java.lang.String str43 = bcApplication22.number(str_array39);
    java.lang.String[] str_array45 = new java.lang.String[] { "Invalid syntax encountered." };
    boolean b46 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.isNumberCommandFormat(str_array45);
    java.lang.String str47 = bcApplication22.lessThan(str_array45);
    java.lang.String str48 = bcApplication0.pow(str_array45);
    java.lang.String[] str_array49 = null;
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str50 = bcApplication0.greaterThan(str_array49);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\r\n"+ "'", str6.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + ""+ "'", str7.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\r\n"+ "'", str8.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "1"+ "'", str9.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "\r\n"+ "'", str13.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "\r\n"+ "'", str18.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str19.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + ""+ "'", str20.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "1"+ "'", str21.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "\r\n"+ "'", str28.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + ""+ "'", str29.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "\r\n"+ "'", str30.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "1"+ "'", str31.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "\r\n"+ "'", str35.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "\r\n"+ "'", str40.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str41.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + ""+ "'", str42.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "1"+ "'", str43.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "bc: Unknown character detected I"+ "'", str47.equals("bc: Unknown character detected I"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "bc: Unknown character detected I"+ "'", str48.equals("bc: Unknown character detected I"));

  }

  @Test
  public void test163() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test163"); }


    sg.edu.nus.comp.cs4218.impl.app.EchoApplication echoApplication0 = new sg.edu.nus.comp.cs4218.impl.app.EchoApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl2 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array4 = new java.lang.String[] { "" };
    java.lang.String str5 = shellImpl2.globFilesDirectories(str_array4);
    java.lang.String str6 = calApplication1.printCalForYear(str_array4);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl7 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array9 = new java.lang.String[] { "" };
    java.lang.String str10 = shellImpl7.globFilesDirectories(str_array9);
    boolean b11 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.isNumberCommandFormat(str_array9);
    java.lang.String str12 = calApplication1.printCalForMonthYearMondayFirst(str_array9);
    java.nio.file.Path path13 = null;
    java.lang.String[] str_array15 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.getFileContents(str_array9, path13, 4);
    java.io.InputStream inputStream16 = null;
    sg.edu.nus.comp.cs4218.impl.app.EchoApplication echoApplication17 = new sg.edu.nus.comp.cs4218.impl.app.EchoApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication18 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl19 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array21 = new java.lang.String[] { "" };
    java.lang.String str22 = shellImpl19.globFilesDirectories(str_array21);
    java.lang.String str23 = calApplication18.printCalForYear(str_array21);
    java.io.InputStream inputStream24 = null;
    java.io.OutputStream outputStream26 = sg.edu.nus.comp.cs4218.impl.ShellImpl.openOutputRedir("File output redirection and pipe operator cannot be used side by side.");
    echoApplication17.run(str_array21, inputStream24, outputStream26);
    echoApplication0.run(str_array15, inputStream16, outputStream26);
    sg.edu.nus.comp.cs4218.impl.ShellImpl.closeOutputStream(outputStream26);
    sg.edu.nus.comp.cs4218.impl.ShellImpl.closeOutputStream(outputStream26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "\r\n"+ "'", str5.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str6.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\r\n"+ "'", str10.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Invalid flag provided."+ "'", str12.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "\r\n"+ "'", str22.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str23.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(outputStream26);

  }

  @Test
  public void test164() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test164"); }


    sg.edu.nus.comp.cs4218.impl.app.DateApplication dateApplication0 = new sg.edu.nus.comp.cs4218.impl.app.DateApplication();
    sg.edu.nus.comp.cs4218.impl.cmd.CallCommand callCommand1 = new sg.edu.nus.comp.cs4218.impl.cmd.CallCommand();
    callCommand1.parse();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl3 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl4 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array6 = new java.lang.String[] { "" };
    java.lang.String str7 = shellImpl4.globFilesDirectories(str_array6);
    java.lang.String str8 = shellImpl3.pipeWithException(str_array6);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl9 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array11 = new java.lang.String[] { "" };
    java.lang.String str12 = shellImpl9.globFilesDirectories(str_array11);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl13 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl14 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array16 = new java.lang.String[] { "" };
    java.lang.String str17 = shellImpl14.globFilesDirectories(str_array16);
    java.lang.String str18 = shellImpl13.pipeWithException(str_array16);
    java.lang.String str19 = shellImpl9.globNoPaths(str_array16);
    java.lang.String str20 = shellImpl3.globNoPaths(str_array16);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication21 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl22 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl23 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl24 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array26 = new java.lang.String[] { "" };
    java.lang.String str27 = shellImpl24.globFilesDirectories(str_array26);
    java.lang.String str28 = shellImpl23.pipeWithException(str_array26);
    java.lang.String str29 = shellImpl22.globFilesDirectories(str_array26);
    java.lang.String str30 = bcApplication21.number(str_array26);
    java.lang.String str31 = shellImpl3.pipeWithException(str_array26);
    java.lang.String[] str_array32 = callCommand1.evaluateGlob(str_array26);
    java.lang.String[] str_array33 = sg.edu.nus.comp.cs4218.impl.ShellImpl.processBQ(str_array26);
    java.io.InputStream inputStream34 = null;
    sg.edu.nus.comp.cs4218.impl.cmd.PipeCommand pipeCommand36 = new sg.edu.nus.comp.cs4218.impl.cmd.PipeCommand("|");
    java.io.InputStream inputStream37 = null;
    sg.edu.nus.comp.cs4218.impl.app.DateApplication dateApplication38 = new sg.edu.nus.comp.cs4218.impl.app.DateApplication();
    java.lang.String[] str_array39 = null;
    java.io.InputStream inputStream40 = null;
    sg.edu.nus.comp.cs4218.impl.app.EchoApplication echoApplication41 = new sg.edu.nus.comp.cs4218.impl.app.EchoApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl42 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl43 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array45 = new java.lang.String[] { "" };
    java.lang.String str46 = shellImpl43.globFilesDirectories(str_array45);
    java.lang.String str47 = shellImpl42.pipeWithException(str_array45);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl48 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array50 = new java.lang.String[] { "" };
    java.lang.String str51 = shellImpl48.globFilesDirectories(str_array50);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl52 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl53 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array55 = new java.lang.String[] { "" };
    java.lang.String str56 = shellImpl53.globFilesDirectories(str_array55);
    java.lang.String str57 = shellImpl52.pipeWithException(str_array55);
    java.lang.String str58 = shellImpl48.globNoPaths(str_array55);
    java.lang.String str59 = shellImpl42.globNoPaths(str_array55);
    java.io.InputStream inputStream60 = null;
    java.io.OutputStream outputStream62 = sg.edu.nus.comp.cs4218.impl.ShellImpl.openOutputRedir("File output redirection and pipe operator cannot be used side by side.");
    sg.edu.nus.comp.cs4218.impl.app.EchoApplication echoApplication63 = new sg.edu.nus.comp.cs4218.impl.app.EchoApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication64 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl65 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array67 = new java.lang.String[] { "" };
    java.lang.String str68 = shellImpl65.globFilesDirectories(str_array67);
    java.lang.String str69 = calApplication64.printCalForYear(str_array67);
    java.io.InputStream inputStream70 = null;
    java.io.OutputStream outputStream72 = sg.edu.nus.comp.cs4218.impl.ShellImpl.openOutputRedir("File output redirection and pipe operator cannot be used side by side.");
    echoApplication63.run(str_array67, inputStream70, outputStream72);
    sg.edu.nus.comp.cs4218.impl.ShellImpl.writeToStdout(outputStream62, outputStream72);
    echoApplication41.run(str_array55, inputStream60, outputStream72);
    dateApplication38.run(str_array39, inputStream40, outputStream72);
    pipeCommand36.evaluate(inputStream37, outputStream72);
    // The following exception was thrown during execution in test generation
    try {
      dateApplication0.run(str_array33, inputStream34, outputStream72);
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.DateException");
    } catch (sg.edu.nus.comp.cs4218.exception.DateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.DateException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.DateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "\r\n"+ "'", str7.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + ""+ "'", str8.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\r\n"+ "'", str12.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "\r\n"+ "'", str17.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + ""+ "'", str18.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + ""+ "'", str19.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + ""+ "'", str20.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "\r\n"+ "'", str27.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + ""+ "'", str28.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "\r\n"+ "'", str29.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "1"+ "'", str30.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + ""+ "'", str31.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "\r\n"+ "'", str46.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + ""+ "'", str47.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "\r\n"+ "'", str51.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "\r\n"+ "'", str56.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + ""+ "'", str57.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + ""+ "'", str58.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + ""+ "'", str59.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(outputStream62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str68 + "' != '" + "\r\n"+ "'", str68.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str69.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(outputStream72);

  }

  @Test
  public void test165() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test165"); }


    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication0 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl1 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array3 = new java.lang.String[] { "" };
    java.lang.String str4 = shellImpl1.globFilesDirectories(str_array3);
    java.lang.String str5 = calApplication0.printCalForYear(str_array3);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl6 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array8 = new java.lang.String[] { "" };
    java.lang.String str9 = shellImpl6.globFilesDirectories(str_array8);
    boolean b10 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.isNumberCommandFormat(str_array8);
    java.lang.String str11 = calApplication0.printCalForMonthYearMondayFirst(str_array8);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl12 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array14 = new java.lang.String[] { "" };
    java.lang.String str15 = shellImpl12.globFilesDirectories(str_array14);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication16 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl17 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array19 = new java.lang.String[] { "" };
    java.lang.String str20 = shellImpl17.globFilesDirectories(str_array19);
    java.lang.String str21 = calApplication16.printCalForYear(str_array19);
    java.lang.String str22 = shellImpl12.pipeTwoCommands(str_array19);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication23 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl24 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array26 = new java.lang.String[] { "" };
    java.lang.String str27 = shellImpl24.globFilesDirectories(str_array26);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication28 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl29 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array31 = new java.lang.String[] { "" };
    java.lang.String str32 = shellImpl29.globFilesDirectories(str_array31);
    java.lang.String str33 = calApplication28.printCalForYear(str_array31);
    java.lang.String str34 = shellImpl24.pipeTwoCommands(str_array31);
    java.lang.String str35 = calApplication23.printCalForYearMondayFirst(str_array31);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl36 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array38 = new java.lang.String[] { "" };
    java.lang.String str39 = shellImpl36.globFilesDirectories(str_array38);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication40 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl41 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array43 = new java.lang.String[] { "" };
    java.lang.String str44 = shellImpl41.globFilesDirectories(str_array43);
    java.lang.String str45 = calApplication40.printCalForYear(str_array43);
    java.lang.String str46 = shellImpl36.pipeTwoCommands(str_array43);
    sg.edu.nus.comp.cs4218.impl.cmd.CallCommand callCommand47 = new sg.edu.nus.comp.cs4218.impl.cmd.CallCommand();
    java.lang.String str48 = callCommand47.getInputStreamS();
    callCommand47.terminate();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication50 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl51 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array53 = new java.lang.String[] { "" };
    java.lang.String str54 = shellImpl51.globFilesDirectories(str_array53);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication55 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl56 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array58 = new java.lang.String[] { "" };
    java.lang.String str59 = shellImpl56.globFilesDirectories(str_array58);
    java.lang.String str60 = calApplication55.printCalForYear(str_array58);
    java.lang.String str61 = shellImpl51.pipeTwoCommands(str_array58);
    java.lang.String str62 = calApplication50.printCalForYearMondayFirst(str_array58);
    java.nio.file.Path path63 = null;
    java.lang.String[] str_array65 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.getFileContents(str_array58, path63, 10);
    java.lang.String[] str_array66 = callCommand47.evaluateGlob(str_array58);
    java.lang.String str67 = shellImpl36.globMultiLevel(str_array58);
    java.lang.String str68 = calApplication23.printCal(str_array58);
    java.lang.String str69 = shellImpl12.globMultiLevel(str_array58);
    java.lang.String str70 = calApplication0.printCalForMonthYearMondayFirst(str_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\r\n"+ "'", str4.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str5.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "\r\n"+ "'", str9.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Invalid flag provided."+ "'", str11.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "\r\n"+ "'", str15.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "\r\n"+ "'", str20.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str21.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + ""+ "'", str22.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "\r\n"+ "'", str27.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "\r\n"+ "'", str32.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str33.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + ""+ "'", str34.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "Invalid flag provided."+ "'", str35.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "\r\n"+ "'", str39.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "\r\n"+ "'", str44.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str45.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + ""+ "'", str46.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + ""+ "'", str48.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "\r\n"+ "'", str54.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "\r\n"+ "'", str59.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str60.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + ""+ "'", str61.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "Invalid flag provided."+ "'", str62.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "\r\n"+ "'", str67.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str68 + "' != '" + "     March 2016     \r\nSu Mo Tu We Th Fr Sa\r\n       1  2  3  4  5\r\n 6  7  8  9 10 11 12\r\n13 14 15 16 17 18 19\r\n20 21 22 23 24 25 26\r\n27 28 29 30 31\r\n"+ "'", str68.equals("     March 2016     \r\nSu Mo Tu We Th Fr Sa\r\n       1  2  3  4  5\r\n 6  7  8  9 10 11 12\r\n13 14 15 16 17 18 19\r\n20 21 22 23 24 25 26\r\n27 28 29 30 31\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + "\r\n"+ "'", str69.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str70 + "' != '" + "Invalid flag provided."+ "'", str70.equals("Invalid flag provided."));

  }

  @Test
  public void test166() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test166"); }


    // The following exception was thrown during execution in test generation
    try {
      java.io.OutputStream outputStream1 = sg.edu.nus.comp.cs4218.impl.ShellImpl.openOutputRedir(">=");
      org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.ShellException");
    } catch (sg.edu.nus.comp.cs4218.exception.ShellException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("sg.edu.nus.comp.cs4218.exception.ShellException")) {
        org.junit.Assert.fail("Expected exception of type sg.edu.nus.comp.cs4218.exception.ShellException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test167() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test167"); }


    sg.edu.nus.comp.cs4218.impl.app.SortApplication sortApplication0 = new sg.edu.nus.comp.cs4218.impl.app.SortApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl1 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication2 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl3 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array5 = new java.lang.String[] { "" };
    java.lang.String str6 = shellImpl3.globFilesDirectories(str_array5);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication7 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl8 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array10 = new java.lang.String[] { "" };
    java.lang.String str11 = shellImpl8.globFilesDirectories(str_array10);
    java.lang.String str12 = calApplication7.printCalForYear(str_array10);
    java.lang.String str13 = shellImpl3.pipeTwoCommands(str_array10);
    java.lang.String str14 = calApplication2.printCalForYearMondayFirst(str_array10);
    java.nio.file.Path path15 = null;
    java.lang.String[] str_array17 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.getFileContents(str_array10, path15, 10);
    java.lang.String str18 = shellImpl1.globMultiLevel(str_array17);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl19 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl20 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array22 = new java.lang.String[] { "" };
    java.lang.String str23 = shellImpl20.globFilesDirectories(str_array22);
    java.lang.String str24 = shellImpl19.pipeWithException(str_array22);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl25 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array27 = new java.lang.String[] { "" };
    java.lang.String str28 = shellImpl25.globFilesDirectories(str_array27);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl29 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl30 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array32 = new java.lang.String[] { "" };
    java.lang.String str33 = shellImpl30.globFilesDirectories(str_array32);
    java.lang.String str34 = shellImpl29.pipeWithException(str_array32);
    java.lang.String str35 = shellImpl25.globNoPaths(str_array32);
    java.lang.String str36 = shellImpl19.globNoPaths(str_array32);
    java.lang.String str37 = shellImpl1.globFilesDirectories(str_array32);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication38 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl39 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array41 = new java.lang.String[] { "" };
    java.lang.String str42 = shellImpl39.globFilesDirectories(str_array41);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication43 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl44 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array46 = new java.lang.String[] { "" };
    java.lang.String str47 = shellImpl44.globFilesDirectories(str_array46);
    java.lang.String str48 = calApplication43.printCalForYear(str_array46);
    java.lang.String str49 = shellImpl39.pipeTwoCommands(str_array46);
    java.lang.String str50 = calApplication38.printCalForYearMondayFirst(str_array46);
    java.nio.file.Path path51 = null;
    java.lang.String[] str_array53 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.getFileContents(str_array46, path51, 10);
    java.lang.String str54 = shellImpl1.globOneFile(str_array53);
    java.util.List list55 = sortApplication0.sortNumbersSpecialChars(str_array53);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl56 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl57 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array59 = new java.lang.String[] { "" };
    java.lang.String str60 = shellImpl57.globFilesDirectories(str_array59);
    java.lang.String str61 = shellImpl56.pipeWithException(str_array59);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl62 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array64 = new java.lang.String[] { "" };
    java.lang.String str65 = shellImpl62.globFilesDirectories(str_array64);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl66 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl67 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array69 = new java.lang.String[] { "" };
    java.lang.String str70 = shellImpl67.globFilesDirectories(str_array69);
    java.lang.String str71 = shellImpl66.pipeWithException(str_array69);
    java.lang.String str72 = shellImpl62.globNoPaths(str_array69);
    java.lang.String str73 = shellImpl56.globNoPaths(str_array69);
    sg.edu.nus.comp.cs4218.impl.app.BcApplication bcApplication74 = new sg.edu.nus.comp.cs4218.impl.app.BcApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl75 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl76 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl77 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array79 = new java.lang.String[] { "" };
    java.lang.String str80 = shellImpl77.globFilesDirectories(str_array79);
    java.lang.String str81 = shellImpl76.pipeWithException(str_array79);
    java.lang.String str82 = shellImpl75.globFilesDirectories(str_array79);
    java.lang.String str83 = bcApplication74.number(str_array79);
    java.lang.String str84 = shellImpl56.pipeWithException(str_array79);
    java.util.List list85 = sortApplication0.sortSimpleCapitalNumber(str_array79);
    java.lang.String[] str_array87 = new java.lang.String[] { "." };
    java.util.List list88 = sortApplication0.sortCapitalSpecialChars(str_array87);
    java.lang.String[] str_array89 = sg.edu.nus.comp.cs4218.impl.ShellImpl.processBQ(str_array87);
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str90 = sg.edu.nus.comp.cs4218.impl.app.BcApplication.evaluateHelper(str_array89);
      org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException");
    } catch (java.util.EmptyStackException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.util.EmptyStackException")) {
        org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\r\n"+ "'", str6.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "\r\n"+ "'", str11.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str12.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + ""+ "'", str13.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Invalid flag provided."+ "'", str14.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + ""+ "'", str18.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "\r\n"+ "'", str23.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + ""+ "'", str24.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "\r\n"+ "'", str28.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "\r\n"+ "'", str33.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + ""+ "'", str34.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + ""+ "'", str35.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + ""+ "'", str36.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "\r\n"+ "'", str37.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "\r\n"+ "'", str42.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "\r\n"+ "'", str47.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str48.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + ""+ "'", str49.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "Invalid flag provided."+ "'", str50.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + ""+ "'", str54.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "\r\n"+ "'", str60.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + ""+ "'", str61.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "\r\n"+ "'", str65.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str70 + "' != '" + "\r\n"+ "'", str70.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str71 + "' != '" + ""+ "'", str71.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str72 + "' != '" + ""+ "'", str72.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str73 + "' != '" + ""+ "'", str73.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str80 + "' != '" + "\r\n"+ "'", str80.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str81 + "' != '" + ""+ "'", str81.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str82 + "' != '" + "\r\n"+ "'", str82.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str83 + "' != '" + "1"+ "'", str83.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str84 + "' != '" + ""+ "'", str84.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array89);

  }

  @Test
  public void test168() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test168"); }


    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl0 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array2 = new java.lang.String[] { "" };
    java.lang.String str3 = shellImpl0.globFilesDirectories(str_array2);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl4 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl5 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array7 = new java.lang.String[] { "" };
    java.lang.String str8 = shellImpl5.globFilesDirectories(str_array7);
    java.lang.String str9 = shellImpl4.pipeWithException(str_array7);
    java.lang.String str10 = shellImpl0.globNoPaths(str_array7);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl11 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array13 = new java.lang.String[] { "" };
    java.lang.String str14 = shellImpl11.globFilesDirectories(str_array13);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication15 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl16 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array18 = new java.lang.String[] { "" };
    java.lang.String str19 = shellImpl16.globFilesDirectories(str_array18);
    java.lang.String str20 = calApplication15.printCalForYear(str_array18);
    java.lang.String str21 = shellImpl11.pipeTwoCommands(str_array18);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication22 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication23 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl24 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array26 = new java.lang.String[] { "" };
    java.lang.String str27 = shellImpl24.globFilesDirectories(str_array26);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication28 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl29 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array31 = new java.lang.String[] { "" };
    java.lang.String str32 = shellImpl29.globFilesDirectories(str_array31);
    java.lang.String str33 = calApplication28.printCalForYear(str_array31);
    java.lang.String str34 = shellImpl24.pipeTwoCommands(str_array31);
    java.lang.String str35 = calApplication23.printCalForYearMondayFirst(str_array31);
    java.nio.file.Path path36 = null;
    java.lang.String[] str_array38 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.getFileContents(str_array31, path36, 10);
    java.lang.String str39 = calApplication22.printCal(str_array38);
    java.lang.String str40 = shellImpl11.globOneFile(str_array38);
    java.lang.String str41 = shellImpl0.globNoPaths(str_array38);
    // The following exception was thrown during execution in test generation
    try {
      boolean b42 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.isNumberCommandFormat(str_array38);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "\r\n"+ "'", str3.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "\r\n"+ "'", str8.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + ""+ "'", str10.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\r\n"+ "'", str14.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "\r\n"+ "'", str19.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str20.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + ""+ "'", str21.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "\r\n"+ "'", str27.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "\r\n"+ "'", str32.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str33.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + ""+ "'", str34.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "Invalid flag provided."+ "'", str35.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "     March 2016     \r\nSu Mo Tu We Th Fr Sa\r\n       1  2  3  4  5\r\n 6  7  8  9 10 11 12\r\n13 14 15 16 17 18 19\r\n20 21 22 23 24 25 26\r\n27 28 29 30 31\r\n"+ "'", str39.equals("     March 2016     \r\nSu Mo Tu We Th Fr Sa\r\n       1  2  3  4  5\r\n 6  7  8  9 10 11 12\r\n13 14 15 16 17 18 19\r\n20 21 22 23 24 25 26\r\n27 28 29 30 31\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + ""+ "'", str40.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + ""+ "'", str41.equals(""));

  }

  @Test
  public void test169() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test169"); }


    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication1 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl2 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array4 = new java.lang.String[] { "" };
    java.lang.String str5 = shellImpl2.globFilesDirectories(str_array4);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication6 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl7 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array9 = new java.lang.String[] { "" };
    java.lang.String str10 = shellImpl7.globFilesDirectories(str_array9);
    java.lang.String str11 = calApplication6.printCalForYear(str_array9);
    java.lang.String str12 = shellImpl2.pipeTwoCommands(str_array9);
    java.lang.String str13 = calApplication1.printCalForYearMondayFirst(str_array9);
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl14 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array16 = new java.lang.String[] { "" };
    java.lang.String str17 = shellImpl14.globFilesDirectories(str_array16);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication18 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl19 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array21 = new java.lang.String[] { "" };
    java.lang.String str22 = shellImpl19.globFilesDirectories(str_array21);
    java.lang.String str23 = calApplication18.printCalForYear(str_array21);
    java.lang.String str24 = shellImpl14.pipeTwoCommands(str_array21);
    sg.edu.nus.comp.cs4218.impl.cmd.CallCommand callCommand25 = new sg.edu.nus.comp.cs4218.impl.cmd.CallCommand();
    java.lang.String str26 = callCommand25.getInputStreamS();
    callCommand25.terminate();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication28 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl29 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array31 = new java.lang.String[] { "" };
    java.lang.String str32 = shellImpl29.globFilesDirectories(str_array31);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication33 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl34 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array36 = new java.lang.String[] { "" };
    java.lang.String str37 = shellImpl34.globFilesDirectories(str_array36);
    java.lang.String str38 = calApplication33.printCalForYear(str_array36);
    java.lang.String str39 = shellImpl29.pipeTwoCommands(str_array36);
    java.lang.String str40 = calApplication28.printCalForYearMondayFirst(str_array36);
    java.nio.file.Path path41 = null;
    java.lang.String[] str_array43 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.getFileContents(str_array36, path41, 10);
    java.lang.String[] str_array44 = callCommand25.evaluateGlob(str_array36);
    java.lang.String str45 = shellImpl14.globMultiLevel(str_array36);
    java.lang.String str46 = calApplication1.printCal(str_array36);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication48 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication49 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl50 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array52 = new java.lang.String[] { "" };
    java.lang.String str53 = shellImpl50.globFilesDirectories(str_array52);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication54 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl55 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array57 = new java.lang.String[] { "" };
    java.lang.String str58 = shellImpl55.globFilesDirectories(str_array57);
    java.lang.String str59 = calApplication54.printCalForYear(str_array57);
    java.lang.String str60 = shellImpl50.pipeTwoCommands(str_array57);
    java.lang.String str61 = calApplication49.printCalForYearMondayFirst(str_array57);
    java.nio.file.Path path62 = null;
    java.lang.String[] str_array64 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.getFileContents(str_array57, path62, 10);
    java.lang.String str65 = calApplication48.printCal(str_array64);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication66 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication67 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl68 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array70 = new java.lang.String[] { "" };
    java.lang.String str71 = shellImpl68.globFilesDirectories(str_array70);
    sg.edu.nus.comp.cs4218.impl.app.CalApplication calApplication72 = new sg.edu.nus.comp.cs4218.impl.app.CalApplication();
    sg.edu.nus.comp.cs4218.impl.ShellImpl shellImpl73 = new sg.edu.nus.comp.cs4218.impl.ShellImpl();
    java.lang.String[] str_array75 = new java.lang.String[] { "" };
    java.lang.String str76 = shellImpl73.globFilesDirectories(str_array75);
    java.lang.String str77 = calApplication72.printCalForYear(str_array75);
    java.lang.String str78 = shellImpl68.pipeTwoCommands(str_array75);
    java.lang.String str79 = calApplication67.printCalForYearMondayFirst(str_array75);
    java.nio.file.Path path80 = null;
    java.lang.String[] str_array82 = sg.edu.nus.comp.cs4218.impl.app.SortApplication.getFileContents(str_array75, path80, 10);
    java.lang.String str83 = calApplication66.printCal(str_array82);
    java.lang.String str84 = calApplication48.printCal(str_array82);
    java.util.List list85 = sg.edu.nus.comp.cs4218.misc.SortHelper.separateBasedOnType((-13), str_array82);
    java.lang.String[] str_array86 = sg.edu.nus.comp.cs4218.impl.ShellImpl.processBQ(str_array82);
    java.lang.String str87 = calApplication1.printCalForYearMondayFirst(str_array82);
    java.util.List list88 = sg.edu.nus.comp.cs4218.misc.SortHelper.separateBasedOnType(100, str_array82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "\r\n"+ "'", str5.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\r\n"+ "'", str10.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str11.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + ""+ "'", str12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Invalid flag provided."+ "'", str13.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "\r\n"+ "'", str17.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "\r\n"+ "'", str22.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str23.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + ""+ "'", str24.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + ""+ "'", str26.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "\r\n"+ "'", str32.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "\r\n"+ "'", str37.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str38.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + ""+ "'", str39.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "Invalid flag provided."+ "'", str40.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "\r\n"+ "'", str45.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "     March 2016     \r\nSu Mo Tu We Th Fr Sa\r\n       1  2  3  4  5\r\n 6  7  8  9 10 11 12\r\n13 14 15 16 17 18 19\r\n20 21 22 23 24 25 26\r\n27 28 29 30 31\r\n"+ "'", str46.equals("     March 2016     \r\nSu Mo Tu We Th Fr Sa\r\n       1  2  3  4  5\r\n 6  7  8  9 10 11 12\r\n13 14 15 16 17 18 19\r\n20 21 22 23 24 25 26\r\n27 28 29 30 31\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "\r\n"+ "'", str53.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "\r\n"+ "'", str58.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str59.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + ""+ "'", str60.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "Invalid flag provided."+ "'", str61.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "     March 2016     \r\nSu Mo Tu We Th Fr Sa\r\n       1  2  3  4  5\r\n 6  7  8  9 10 11 12\r\n13 14 15 16 17 18 19\r\n20 21 22 23 24 25 26\r\n27 28 29 30 31\r\n"+ "'", str65.equals("     March 2016     \r\nSu Mo Tu We Th Fr Sa\r\n       1  2  3  4  5\r\n 6  7  8  9 10 11 12\r\n13 14 15 16 17 18 19\r\n20 21 22 23 24 25 26\r\n27 28 29 30 31\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str71 + "' != '" + "\r\n"+ "'", str71.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str76 + "' != '" + "\r\n"+ "'", str76.equals("\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str77 + "' != '" + "                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"+ "'", str77.equals("                               -1                               \r\n      January               February               March        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5         1  2  3  4  5\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26\r\n23 24 25 26 27 28 29  27 28                 27 28 29 30 31      \r\n30 31                                                           \r\n       April                  May                   June        \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2   1  2  3  4  5  6  7            1  2  3  4\r\n 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11\r\n10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18\r\n17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25\r\n24 25 26 27 28 29 30  29 30 31              26 27 28 29 30      \r\n                                                                \r\n        July                 August              September      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                1  2      1  2  3  4  5  6               1  2  3\r\n 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10\r\n10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17\r\n17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24\r\n24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30   \r\n31                                                              \r\n      October               November              December      \r\nSu Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\r\n                   1         1  2  3  4  5               1  2  3\r\n 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10\r\n 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17\r\n16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24\r\n23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31\r\n30 31                                                           \r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str78 + "' != '" + ""+ "'", str78.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str79 + "' != '" + "Invalid flag provided."+ "'", str79.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str83 + "' != '" + "     March 2016     \r\nSu Mo Tu We Th Fr Sa\r\n       1  2  3  4  5\r\n 6  7  8  9 10 11 12\r\n13 14 15 16 17 18 19\r\n20 21 22 23 24 25 26\r\n27 28 29 30 31\r\n"+ "'", str83.equals("     March 2016     \r\nSu Mo Tu We Th Fr Sa\r\n       1  2  3  4  5\r\n 6  7  8  9 10 11 12\r\n13 14 15 16 17 18 19\r\n20 21 22 23 24 25 26\r\n27 28 29 30 31\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str84 + "' != '" + "     March 2016     \r\nSu Mo Tu We Th Fr Sa\r\n       1  2  3  4  5\r\n 6  7  8  9 10 11 12\r\n13 14 15 16 17 18 19\r\n20 21 22 23 24 25 26\r\n27 28 29 30 31\r\n"+ "'", str84.equals("     March 2016     \r\nSu Mo Tu We Th Fr Sa\r\n       1  2  3  4  5\r\n 6  7  8  9 10 11 12\r\n13 14 15 16 17 18 19\r\n20 21 22 23 24 25 26\r\n27 28 29 30 31\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str87 + "' != '" + "Invalid flag provided."+ "'", str87.equals("Invalid flag provided."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list88);

  }

}
